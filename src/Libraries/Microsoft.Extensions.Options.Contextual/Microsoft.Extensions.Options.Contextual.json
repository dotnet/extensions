{
  "Name": "Microsoft.Extensions.Options.Contextual, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
  "Types": [
    {
      "Type": "static class Microsoft.Extensions.Options.Contextual.ContextualOptionsServiceCollectionExtensions",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Options.Contextual.ContextualOptionsServiceCollectionExtensions.AddContextualOptions(this Microsoft.Extensions.DependencyInjection.IServiceCollection services);",
          "Stage": "Experimental"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Options.Contextual.ContextualOptionsServiceCollectionExtensions.Configure<TOptions>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<Microsoft.Extensions.Options.Contextual.IOptionsContext, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Microsoft.Extensions.Options.Contextual.IConfigureContextualOptions<TOptions>>> loadOptions);",
          "Stage": "Experimental"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Options.Contextual.ContextualOptionsServiceCollectionExtensions.Configure<TOptions>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Func<Microsoft.Extensions.Options.Contextual.IOptionsContext, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask<Microsoft.Extensions.Options.Contextual.IConfigureContextualOptions<TOptions>>> loadOptions);",
          "Stage": "Experimental"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Options.Contextual.ContextualOptionsServiceCollectionExtensions.Configure<TOptions>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.Extensions.Options.Contextual.IOptionsContext, TOptions> configureOptions);",
          "Stage": "Experimental"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Options.Contextual.ContextualOptionsServiceCollectionExtensions.Configure<TOptions>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Action<Microsoft.Extensions.Options.Contextual.IOptionsContext, TOptions> configureOptions);",
          "Stage": "Experimental"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Options.Contextual.ContextualOptionsServiceCollectionExtensions.PostConfigure<TOptions>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.Extensions.Options.Contextual.IOptionsContext, TOptions> configureOptions);",
          "Stage": "Experimental"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Options.Contextual.ContextualOptionsServiceCollectionExtensions.PostConfigure<TOptions>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string? name, System.Action<Microsoft.Extensions.Options.Contextual.IOptionsContext, TOptions> configureOptions);",
          "Stage": "Experimental"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Options.Contextual.ContextualOptionsServiceCollectionExtensions.PostConfigureAll<TOptions>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.Extensions.Options.Contextual.IOptionsContext, TOptions> configureOptions);",
          "Stage": "Experimental"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Options.Contextual.ContextualOptionsServiceCollectionExtensions.ValidateContextualOptions<TOptions>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<TOptions, bool> validate, string failureMessage);",
          "Stage": "Experimental"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Options.Contextual.ContextualOptionsServiceCollectionExtensions.ValidateContextualOptions<TOptions>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string name, System.Func<TOptions, bool> validate, string failureMessage);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Options.Contextual.IConfigureContextualOptions<in TOptions> : System.IDisposable where TOptions : class",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "void Microsoft.Extensions.Options.Contextual.IConfigureContextualOptions<TOptions>.Configure(TOptions options);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Options.Contextual.IContextualOptions<TOptions> where TOptions : class",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Threading.Tasks.ValueTask<TOptions> Microsoft.Extensions.Options.Contextual.IContextualOptions<TOptions>.GetAsync<TContext>(in TContext context, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Options.Contextual.IContextualOptionsFactory<TOptions> where TOptions : class",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Threading.Tasks.ValueTask<TOptions> Microsoft.Extensions.Options.Contextual.IContextualOptionsFactory<TOptions>.CreateAsync<TContext>(string name, in TContext context, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Options.Contextual.ILoadContextualOptions<TOptions> where TOptions : class",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Threading.Tasks.ValueTask<Microsoft.Extensions.Options.Contextual.IConfigureContextualOptions<TOptions>> Microsoft.Extensions.Options.Contextual.ILoadContextualOptions<TOptions>.LoadAsync<TContext>(string name, in TContext context, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Options.Contextual.INamedContextualOptions<TOptions> : Microsoft.Extensions.Options.Contextual.IContextualOptions<TOptions> where TOptions : class",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Threading.Tasks.ValueTask<TOptions> Microsoft.Extensions.Options.Contextual.INamedContextualOptions<TOptions>.GetAsync<TContext>(string name, in TContext context, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Options.Contextual.IOptionsContext",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "void Microsoft.Extensions.Options.Contextual.IOptionsContext.PopulateReceiver<T>(T receiver);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Options.Contextual.IOptionsContextReceiver",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "void Microsoft.Extensions.Options.Contextual.IOptionsContextReceiver.Receive<T>(string key, T value);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Options.Contextual.IPostConfigureContextualOptions<in TOptions> where TOptions : class",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "void Microsoft.Extensions.Options.Contextual.IPostConfigureContextualOptions<TOptions>.PostConfigure<TContext>(string name, in TContext context, TOptions options);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Options.Contextual.IValidateContextualOptions<in TOptions> where TOptions : class",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Options.ValidateOptionsResult Microsoft.Extensions.Options.Contextual.IValidateContextualOptions<TOptions>.Validate(string? name, TOptions options);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Options.Contextual.NullConfigureContextualOptions",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "static Microsoft.Extensions.Options.Contextual.IConfigureContextualOptions<TOptions> Microsoft.Extensions.Options.Contextual.NullConfigureContextualOptions.GetInstance<TOptions>();",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Options.Contextual.OptionsContextAttribute : System.Attribute",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Options.Contextual.OptionsContextAttribute.OptionsContextAttribute();",
          "Stage": "Experimental"
        }
      ]
    }
  ]
}