<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <Description>A library for aggregating and reporting evaluation data. This library also includes support for caching LLM responses.</Description>
    <TargetFrameworks>$(TargetFrameworks);netstandard2.0</TargetFrameworks>
    <RootNamespace>Microsoft.Extensions.AI.Evaluation.Reporting</RootNamespace>
    <!-- EA0002: Use System.TimeProvider to make the code easier to test. -->
    <NoWarn>$(NoWarn);EA0002</NoWarn>
  </PropertyGroup>

  <PropertyGroup>
    <Workstream>AIEval</Workstream>
    <Stage>preview</Stage>
    <ForceLatestDotnetVersions>true</ForceLatestDotnetVersions>
    <EnablePackageValidation>false</EnablePackageValidation>
    <MinCodeCoverage>88</MinCodeCoverage>
    <MinMutationScore>0</MinMutationScore>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\Microsoft.Extensions.AI\Microsoft.Extensions.AI.csproj" />
    <ProjectReference Include="..\..\Microsoft.Extensions.AI.Evaluation\Microsoft.Extensions.AI.Evaluation.csproj" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="..\TypeScript\html-report\dist\index.html" Visible="false">
      <LogicalName>Reporting.HTML.index.html</LogicalName>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleToTest Include="Microsoft.Extensions.AI.Evaluation.Integration.Tests" />
    <InternalsVisibleToTest Include="Microsoft.Extensions.AI.Evaluation.Reporting.Tests" />
  </ItemGroup>

  <!-- Build the report code before this, so it can be embedded.
  Setting the BeforeTargets=DispatchToInnerBuilds allows it to build only once before
  the multiple parallel builds are invoked for each target framework. -->
  <Target Name="BuildTypescriptBundle"
          BeforeTargets="DispatchToInnerBuilds"
          Outputs="..\TypeScript\html-report\dist\index.html">
    <Message Text="Build the Typescript bundle" Importance="high" />
    <Exec Command="npm install" WorkingDirectory="..\TypeScript" />
    <Exec Command="node build-if-out-of-date.js" WorkingDirectory="..\TypeScript" />
  </Target>

  <!-- Generate a version constant that can be accessed from the C# code. -->
  <Target Name="GenerateVersionConstant" BeforeTargets="CoreCompile">
    <PropertyGroup>
      <ConstantsFilePath>$(IntermediateOutputPath)Constants.g.cs</ConstantsFilePath>
      <Lines>
// <auto-generated>
// This file is auto-generated by MSBuild.
// </auto-generated>

namespace Microsoft.Extensions.AI.Evaluation.Reporting%3B

internal static class Constants
{
    public const string Version = "$(Version)"%3B
}
      </Lines>
    </PropertyGroup>

    <Message Text="Generating $(ConstantsFilePath)." Importance="high" />
    
    <WriteLinesToFile File="$(ConstantsFilePath)"
                      Lines="$(Lines)"
                      Overwrite="true"
                      WriteOnlyWhenDifferent="true" />

    <ItemGroup>
      <Compile Include="$(ConstantsFilePath)" />
    </ItemGroup>
  </Target>

  <!-- Generate a version file that can be accessed from the script that builds the Azure DevOps Extension pacakge. -->
  <Target Name="StampVSIXPackageVersion" BeforeTargets="CoreCompile">
    <PropertyGroup>
      <VSIXPackageVersionFile>..\TypeScript\azure-devops-report\VSIXPackageVersion.json</VSIXPackageVersionFile>
      <VSIXVersion>$(VersionPrefix).42424242</VSIXVersion>
      <VSIXVersion Condition=" '$(VersionSuffixDateStamp)'!='' ">$(VersionPrefix).$(VersionSuffixDateStamp)$(VersionSuffixBuildOfTheDayPadded)</VSIXVersion>
      <Lines>{"PackageVersion":"$(VSIXVersion)"}</Lines>
    </PropertyGroup>
    <WriteLinesToFile File="$(VSIXPackageVersionFile)"
                      Lines="$(Lines)"
                      Overwrite="true"
                      WriteOnlyWhenDifferent="true" />
  </Target>

</Project>
