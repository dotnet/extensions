<Project>
  <Import Project="$([MSBuild]::GetPathOfFileAbove('Directory.Build.targets', '$(MSBuildThisFileDirectory)..\'))" />

  <PropertyGroup>
    <_TypescriptRootPath>$(MSBuildThisFileDirectory)TypeScript</_TypescriptRootPath>
    <_NpmInstallStampFile>$(_TypescriptRootPath)\node_modules\.installed</_NpmInstallStampFile>
  </PropertyGroup>

  <Target Name="NpmInstall"
          Inputs="$(_TypescriptRootPath)\package.json"
          Outputs="$(_NpmInstallStampFile)">
    <Exec Command="npm install" WorkingDirectory="$(_TypescriptRootPath)" />
    <Touch Files="$(_NpmInstallStampFile)" AlwaysCreate="true" />
  </Target>

  <!-- Build the report code before the C# project builds, so report HTML can be embedded. -->
  <Target Name="BuildTypescriptBundle"
          DependsOnTargets="NpmInstall"
          Condition="'$(EnableEvaluationReportBuild)'=='true'"
          Inputs="$(_TypescriptRootPath)\**\*.*"
          Outputs="$(_TypescriptRootPath)\html-report\dist\index.html">
    <Message Text="Build the Typescript bundle" Importance="high" />
    <Exec Command="node build-if-out-of-date.js" WorkingDirectory="$(_TypescriptRootPath)" />
  </Target>

  <!-- Make sure the typescript build is up to date before the the multi-targetted builds. -->
  <Target Name="_BuildTypeScriptBundleBeforeOuterBuild"
    DependsOnTargets="BuildTypescriptBundle"
    BeforeTargets="DispatchToInnerBuilds"
  />

  <!-- Delegate inner builds back to the outer build in case it tries to finish before the outer build -->
  <Target Name="_BuildTypeScriptBundleBeforeInnerBuild"
    BeforeTargets="CoreCompile">
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="BuildTypescriptBundle"
             RemoveProperties="TargetFramework" />
  </Target>

  <!-- Generate a version constant that can be accessed from the C# code. -->
  <Target Name="GenerateVersionConstant" BeforeTargets="CoreCompile">
    <PropertyGroup>
      <_ConstantsFilePath>$(IntermediateOutputPath)Constants.g.cs</_ConstantsFilePath>
      <_Lines>
// <auto-generated>
// This file is auto-generated by MSBuild.
// </auto-generated>

namespace $(RootNamespace)%3B

internal static class Constants
{
    public const string Version = "$(Version)"%3B
}
      </_Lines>
    </PropertyGroup>

    <Message Text="Generating $(_ConstantsFilePath)." Importance="high" />
    
    <WriteLinesToFile File="$(_ConstantsFilePath)"
                      Lines="$(_Lines)"
                      Overwrite="true"
                      WriteOnlyWhenDifferent="true" />

    <ItemGroup>
      <Compile Include="$(_ConstantsFilePath)" />
    </ItemGroup>
  </Target>

  <!-- Generate a version file that can be accessed from the script that builds the Azure DevOps Extension package. -->
  <Target Name="StampVSIXPackageVersion" BeforeTargets="DispatchToInnerBuilds">
    <PropertyGroup>
      <_VSIXPackageVersionFile>$(MSBuildThisFileDirectory)\TypeScript\azure-devops-report\VSIXPackageVersion.json</_VSIXPackageVersionFile>

      <_VSIXVersion>$(VersionPrefix).42424242</_VSIXVersion>
      <_VSIXVersion Condition=" '$(VersionSuffixDateStamp)'!='' ">$(VersionPrefix).$(VersionSuffixDateStamp)$(VersionSuffixBuildOfTheDayPadded)</_VSIXVersion>

      <_Lines>{"PackageVersion":"$(_VSIXVersion)"}</_Lines>
    </PropertyGroup>

    <WriteLinesToFile File="$(_VSIXPackageVersionFile)"
                      Lines="$(_Lines)"
                      Overwrite="true"
                      WriteOnlyWhenDifferent="true" />
  </Target>
</Project>
