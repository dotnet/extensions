Microsoft.Extensions.Http.Resilience.FaultInjection.ContextExtensions
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.CircuitBreakerOptions.get -> Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerStrategyOptions!
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.RateLimiterOptions.get -> Microsoft.Extensions.Http.Resilience.HttpRateLimiterStrategyOptions!
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.RateLimiterOptions.set -> void
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.TimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutStrategyOptions!
Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerStrategyOptions
Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerStrategyOptions.HttpCircuitBreakerStrategyOptions() -> void
Microsoft.Extensions.Http.Resilience.HttpHedgingStrategyOptions
Microsoft.Extensions.Http.Resilience.HttpHedgingStrategyOptions.HttpHedgingStrategyOptions() -> void
Microsoft.Extensions.Http.Resilience.HttpRateLimiterStrategyOptions
Microsoft.Extensions.Http.Resilience.HttpRateLimiterStrategyOptions.HttpRateLimiterStrategyOptions() -> void
Microsoft.Extensions.Http.Resilience.HttpRequestMessageExtensions
Microsoft.Extensions.Http.Resilience.HttpResilienceStrategyBuilderExtensions
Microsoft.Extensions.Http.Resilience.HttpRetryStrategyOptions
Microsoft.Extensions.Http.Resilience.HttpRetryStrategyOptions.HttpRetryStrategyOptions() -> void
Microsoft.Extensions.Http.Resilience.HttpRetryStrategyOptions.ShouldRetryAfterHeader.get -> bool
Microsoft.Extensions.Http.Resilience.HttpRetryStrategyOptions.ShouldRetryAfterHeader.set -> void
Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions.HedgingOptions.get -> Microsoft.Extensions.Http.Resilience.HttpHedgingStrategyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions.TotalRequestTimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutStrategyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceBuilderBuilderExtensions
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.AttemptTimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutStrategyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.CircuitBreakerOptions.get -> Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerStrategyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.RateLimiterOptions.get -> Microsoft.Extensions.Http.Resilience.HttpRateLimiterStrategyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.RateLimiterOptions.set -> void
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.RetryOptions.get -> Microsoft.Extensions.Http.Resilience.HttpRetryStrategyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.TotalRequestTimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutStrategyOptions!
Microsoft.Extensions.Http.Resilience.HttpTimeoutStrategyOptions
Microsoft.Extensions.Http.Resilience.HttpTimeoutStrategyOptions.HttpTimeoutStrategyOptions() -> void
Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder
Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder.StrategyName.get -> string!
Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder
Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder.StrategyName.get -> string!
Microsoft.Extensions.Http.Resilience.ResilienceHandlerContext
Microsoft.Extensions.Http.Resilience.ResilienceHandlerContext.BuilderName.get -> string!
Microsoft.Extensions.Http.Resilience.ResilienceHandlerContext.EnableReloads<TOptions>(string? name = null) -> void
Microsoft.Extensions.Http.Resilience.ResilienceHandlerContext.ServiceProvider.get -> System.IServiceProvider!
Microsoft.Extensions.Http.Resilience.ResilienceHandlerContext.StrategyKey.get -> string!
static Microsoft.Extensions.Http.Resilience.FaultInjection.ContextExtensions.WithCallingRequestMessage(this Polly.Context! context, System.Net.Http.HttpRequestMessage! request) -> Polly.Context!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, string! strategyName, System.Action<Polly.ResilienceStrategyBuilder<System.Net.Http.HttpResponseMessage!>!, Microsoft.Extensions.Http.Resilience.ResilienceHandlerContext!>! configure) -> Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, string! strategyName, System.Action<Polly.ResilienceStrategyBuilder<System.Net.Http.HttpResponseMessage!>!>! configure) -> Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardHedgingHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardHedgingHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder!>! configure) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions!>! configure) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.HttpRequestMessageExtensions.GetResilienceContext(this System.Net.Http.HttpRequestMessage! requestMessage) -> Polly.ResilienceContext?
static Microsoft.Extensions.Http.Resilience.HttpRequestMessageExtensions.SetResilienceContext(this System.Net.Http.HttpRequestMessage! requestMessage, Polly.ResilienceContext? resilienceContext) -> void
static Microsoft.Extensions.Http.Resilience.HttpResilienceStrategyBuilderExtensions.SelectStrategyBy(this Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder! builder, System.Func<System.IServiceProvider!, System.Func<System.Net.Http.HttpRequestMessage!, string!>!>! selectorFactory) -> Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.HttpResilienceStrategyBuilderExtensions.SelectStrategyByAuthority(this Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder! builder, Microsoft.Extensions.Compliance.Classification.DataClassification classification) -> Microsoft.Extensions.Http.Resilience.IHttpResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.HttpStandardResilienceBuilderBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.HttpStandardResilienceBuilderBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions!, System.IServiceProvider!>! configure) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.HttpStandardResilienceBuilderBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions!>! configure) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.HttpStandardResilienceBuilderBuilderExtensions.SelectStrategyBy(this Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder! builder, System.Func<System.IServiceProvider!, System.Func<System.Net.Http.HttpRequestMessage!, string!>!>! selectorFactory) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.HttpStandardResilienceBuilderBuilderExtensions.SelectStrategyByAuthority(this Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder! builder, Microsoft.Extensions.Compliance.Classification.DataClassification classification) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResilienceStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions.SelectStrategyBy(this Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder! builder, System.Func<System.IServiceProvider!, System.Func<System.Net.Http.HttpRequestMessage!, string!>!>! selectorFactory) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
static Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions.SelectStrategyByAuthority(this Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder! builder, Microsoft.Extensions.Compliance.Classification.DataClassification classification) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
static readonly Microsoft.Extensions.Http.Resilience.HttpClientHedgingResiliencePredicates.IsTransientHttpOutcome -> System.Predicate<Polly.Outcome<System.Net.Http.HttpResponseMessage!>>!
static readonly Microsoft.Extensions.Http.Resilience.HttpClientResiliencePredicates.IsTransientHttpOutcome -> System.Predicate<Polly.Outcome<System.Net.Http.HttpResponseMessage!>>!
*REMOVED*Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions
*REMOVED*Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions.BaseFallbackUri.get -> System.Uri?
*REMOVED*Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions.BaseFallbackUri.set -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions.FallbackClientHandlerOptions() -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions.FallbackPolicyOptions.get -> Microsoft.Extensions.Http.Resilience.HttpFallbackPolicyOptions!
*REMOVED*Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions.FallbackPolicyOptions.set -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.FaultInjection.PolicyContextExtensions
*REMOVED*Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.BulkheadOptions.get -> Microsoft.Extensions.Http.Resilience.HttpBulkheadPolicyOptions!
*REMOVED*Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.BulkheadOptions.set -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.CircuitBreakerOptions.get -> Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerPolicyOptions!
*REMOVED*Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.TimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions!
*REMOVED*Microsoft.Extensions.Http.Resilience.HedgingHttpClientBuilderExtensions
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpBulkheadPolicyOptions
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpBulkheadPolicyOptions.HttpBulkheadPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerPolicyOptions
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerPolicyOptions.HttpCircuitBreakerPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpClientResilienceGenerators
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpFallbackPolicyOptions
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpFallbackPolicyOptions.HttpFallbackPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpHedgingPolicyOptions
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpHedgingPolicyOptions.HttpHedgingPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpResiliencePipelineBuilderExtensions
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpRetryPolicyOptions
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpRetryPolicyOptions.HttpRetryPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpRetryPolicyOptions.ShouldRetryAfterHeader.get -> bool
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpRetryPolicyOptions.ShouldRetryAfterHeader.set -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions.HedgingOptions.get -> Microsoft.Extensions.Http.Resilience.HttpHedgingPolicyOptions!
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions.TotalRequestTimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions!
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.AttemptTimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions!
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.BulkheadOptions.get -> Microsoft.Extensions.Http.Resilience.HttpBulkheadPolicyOptions!
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.BulkheadOptions.set -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.CircuitBreakerOptions.get -> Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerPolicyOptions!
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.RetryOptions.get -> Microsoft.Extensions.Http.Resilience.HttpRetryPolicyOptions!
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.TotalRequestTimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions!
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions
*REMOVED*Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions.HttpTimeoutPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder
*REMOVED*Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder
*REMOVED*Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder.PipelineName.get -> string!
*REMOVED*Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
*REMOVED*Microsoft.Extensions.Http.Resilience.IRequestRoutingStrategy
*REMOVED*Microsoft.Extensions.Http.Resilience.IRequestRoutingStrategy.TryGetNextRoute(out System.Uri? nextRoute) -> bool
*REMOVED*Microsoft.Extensions.Http.Resilience.IRequestRoutingStrategyFactory
*REMOVED*Microsoft.Extensions.Http.Resilience.IRequestRoutingStrategyFactory.CreateRoutingStrategy() -> Microsoft.Extensions.Http.Resilience.IRequestRoutingStrategy!
*REMOVED*Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder.EndpointResiliencePipelineBuilder.get -> Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder!
*REMOVED*Microsoft.Extensions.Http.Resilience.PipelineKeySelector
*REMOVED*static Microsoft.Extensions.Http.Resilience.FaultInjection.PolicyContextExtensions.WithCallingRequestMessage(this Polly.Context! context, System.Net.Http.HttpRequestMessage! request) -> Polly.Context!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HedgingHttpClientBuilderExtensions.AddStandardHedgingHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HedgingHttpClientBuilderExtensions.AddStandardHedgingHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder!>! configure) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddFallbackHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.DependencyInjection.IHttpClientBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddFallbackHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section, System.Action<Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions!>! configure) -> Microsoft.Extensions.DependencyInjection.IHttpClientBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddFallbackHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions!>! configure) -> Microsoft.Extensions.DependencyInjection.IHttpClientBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, string! pipelineIdentifier) -> Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions!>! configure) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpResiliencePipelineBuilderExtensions.SelectPipelineBy(this Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder! builder, System.Func<System.IServiceProvider!, Microsoft.Extensions.Http.Resilience.PipelineKeySelector!>! selectorFactory) -> Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpResiliencePipelineBuilderExtensions.SelectPipelineByAuthority(this Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder! builder, Microsoft.Extensions.Compliance.Classification.DataClassification classification) -> Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions!, System.IServiceProvider!>! configure) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions!>! configure) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions.SelectPipelineBy(this Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder! builder, System.Func<System.IServiceProvider!, Microsoft.Extensions.Http.Resilience.PipelineKeySelector!>! selectorFactory) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions.SelectPipelineByAuthority(this Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder! builder, Microsoft.Extensions.Compliance.Classification.DataClassification classification) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions.SelectPipelineBy(this Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder! builder, System.Func<System.IServiceProvider!, Microsoft.Extensions.Http.Resilience.PipelineKeySelector!>! selectorFactory) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
*REMOVED*static Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions.SelectPipelineByAuthority(this Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder! builder, Microsoft.Extensions.Compliance.Classification.DataClassification classification) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
*REMOVED*static readonly Microsoft.Extensions.Http.Resilience.HttpClientResilienceGenerators.HandleRetryAfterHeader -> System.Func<Microsoft.Extensions.Resilience.Options.RetryDelayArguments<System.Net.Http.HttpResponseMessage!>, System.TimeSpan>!
