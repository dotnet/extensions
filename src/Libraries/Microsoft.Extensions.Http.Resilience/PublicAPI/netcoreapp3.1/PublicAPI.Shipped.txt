
#nullable enable
Microsoft.Extensions.Http.Resilience.Endpoint
Microsoft.Extensions.Http.Resilience.Endpoint.Endpoint() -> void
Microsoft.Extensions.Http.Resilience.Endpoint.Uri.get -> System.Uri?
Microsoft.Extensions.Http.Resilience.Endpoint.Uri.set -> void
Microsoft.Extensions.Http.Resilience.EndpointGroup
Microsoft.Extensions.Http.Resilience.EndpointGroup.EndpointGroup() -> void
Microsoft.Extensions.Http.Resilience.EndpointGroup.Endpoints.get -> System.Collections.Generic.IList<Microsoft.Extensions.Http.Resilience.WeightedEndpoint!>!
Microsoft.Extensions.Http.Resilience.EndpointGroup.Endpoints.set -> void
Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions
Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions.BaseFallbackUri.get -> System.Uri?
Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions.BaseFallbackUri.set -> void
Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions.FallbackClientHandlerOptions() -> void
Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions.FallbackPolicyOptions.get -> Microsoft.Extensions.Http.Resilience.HttpFallbackPolicyOptions!
Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions.FallbackPolicyOptions.set -> void
Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions
Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder
Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder.AddException(string! key, System.Exception! exception) -> Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder!
Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder.AddHttpContent(string! key, System.Net.Http.HttpContent! content) -> Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder!
Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder.Configure() -> Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder!
Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder.Configure(Microsoft.Extensions.Configuration.IConfiguration! section) -> Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder!
Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder.Configure(System.Action<Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptions!>! configureOptions) -> Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder!
Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder.HttpFaultInjectionOptionsBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> void
Microsoft.Extensions.Http.Resilience.FaultInjection.IHttpClientChaosPolicyFactory
Microsoft.Extensions.Http.Resilience.FaultInjection.IHttpClientChaosPolicyFactory.CreateHttpResponsePolicy() -> Polly.Contrib.Simmy.Outcomes.AsyncInjectOutcomePolicy<System.Net.Http.HttpResponseMessage!>!
Microsoft.Extensions.Http.Resilience.FaultInjection.PolicyContextExtensions
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.BulkheadOptions.get -> Microsoft.Extensions.Http.Resilience.HttpBulkheadPolicyOptions!
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.BulkheadOptions.set -> void
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.CircuitBreakerOptions.get -> Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerPolicyOptions!
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.CircuitBreakerOptions.set -> void
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.HedgingEndpointOptions() -> void
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.TimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions!
Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions.TimeoutOptions.set -> void
Microsoft.Extensions.Http.Resilience.HedgingHttpClientBuilderExtensions
Microsoft.Extensions.Http.Resilience.HttpBulkheadPolicyOptions
Microsoft.Extensions.Http.Resilience.HttpBulkheadPolicyOptions.HttpBulkheadPolicyOptions() -> void
Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerPolicyOptions
Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerPolicyOptions.HttpCircuitBreakerPolicyOptions() -> void
Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions
Microsoft.Extensions.Http.Resilience.HttpClientHedgingResiliencePredicates
Microsoft.Extensions.Http.Resilience.HttpClientResilienceGenerators
Microsoft.Extensions.Http.Resilience.HttpClientResiliencePredicates
Microsoft.Extensions.Http.Resilience.HttpFallbackPolicyOptions
Microsoft.Extensions.Http.Resilience.HttpFallbackPolicyOptions.HttpFallbackPolicyOptions() -> void
Microsoft.Extensions.Http.Resilience.HttpHedgingPolicyOptions
Microsoft.Extensions.Http.Resilience.HttpHedgingPolicyOptions.HttpHedgingPolicyOptions() -> void
Microsoft.Extensions.Http.Resilience.HttpResiliencePipelineBuilderExtensions
Microsoft.Extensions.Http.Resilience.HttpRetryPolicyOptions
Microsoft.Extensions.Http.Resilience.HttpRetryPolicyOptions.HttpRetryPolicyOptions() -> void
Microsoft.Extensions.Http.Resilience.HttpRetryPolicyOptions.ShouldRetryAfterHeader.get -> bool
Microsoft.Extensions.Http.Resilience.HttpRetryPolicyOptions.ShouldRetryAfterHeader.set -> void
Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions
Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions.EndpointOptions.get -> Microsoft.Extensions.Http.Resilience.HedgingEndpointOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions.EndpointOptions.set -> void
Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions.HedgingOptions.get -> Microsoft.Extensions.Http.Resilience.HttpHedgingPolicyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions.HedgingOptions.set -> void
Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions.HttpStandardHedgingResilienceOptions() -> void
Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions.TotalRequestTimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions.TotalRequestTimeoutOptions.set -> void
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.AttemptTimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.AttemptTimeoutOptions.set -> void
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.BulkheadOptions.get -> Microsoft.Extensions.Http.Resilience.HttpBulkheadPolicyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.BulkheadOptions.set -> void
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.CircuitBreakerOptions.get -> Microsoft.Extensions.Http.Resilience.HttpCircuitBreakerPolicyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.CircuitBreakerOptions.set -> void
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.HttpStandardResilienceOptions() -> void
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.RetryOptions.get -> Microsoft.Extensions.Http.Resilience.HttpRetryPolicyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.RetryOptions.set -> void
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.TotalRequestTimeoutOptions.get -> Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions!
Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions.TotalRequestTimeoutOptions.set -> void
Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions
Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions
Microsoft.Extensions.Http.Resilience.HttpTimeoutPolicyOptions.HttpTimeoutPolicyOptions() -> void
Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder
Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder
Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder.PipelineName.get -> string!
Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.Extensions.Http.Resilience.IRequestRoutingStrategy
Microsoft.Extensions.Http.Resilience.IRequestRoutingStrategy.TryGetNextRoute(out System.Uri? nextRoute) -> bool
Microsoft.Extensions.Http.Resilience.IRequestRoutingStrategyFactory
Microsoft.Extensions.Http.Resilience.IRequestRoutingStrategyFactory.CreateRoutingStrategy() -> Microsoft.Extensions.Http.Resilience.IRequestRoutingStrategy!
Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder
Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder.Name.get -> string!
Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder
Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder.EndpointResiliencePipelineBuilder.get -> Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder!
Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder.Name.get -> string!
Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder.RoutingStrategyBuilder.get -> Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder!
Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.Extensions.Http.Resilience.OrderedGroupsRoutingOptions
Microsoft.Extensions.Http.Resilience.OrderedGroupsRoutingOptions.Groups.get -> System.Collections.Generic.IList<Microsoft.Extensions.Http.Resilience.EndpointGroup!>!
Microsoft.Extensions.Http.Resilience.OrderedGroupsRoutingOptions.Groups.set -> void
Microsoft.Extensions.Http.Resilience.OrderedGroupsRoutingOptions.OrderedGroupsRoutingOptions() -> void
Microsoft.Extensions.Http.Resilience.PipelineKeySelector
Microsoft.Extensions.Http.Resilience.RoutingStrategyBuilderExtensions
Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions
Microsoft.Extensions.Http.Resilience.WeightedEndpoint
Microsoft.Extensions.Http.Resilience.WeightedEndpoint.Uri.get -> System.Uri?
Microsoft.Extensions.Http.Resilience.WeightedEndpoint.Uri.set -> void
Microsoft.Extensions.Http.Resilience.WeightedEndpoint.Weight.get -> int
Microsoft.Extensions.Http.Resilience.WeightedEndpoint.Weight.set -> void
Microsoft.Extensions.Http.Resilience.WeightedEndpoint.WeightedEndpoint() -> void
Microsoft.Extensions.Http.Resilience.WeightedEndpointGroup
Microsoft.Extensions.Http.Resilience.WeightedEndpointGroup.Weight.get -> int
Microsoft.Extensions.Http.Resilience.WeightedEndpointGroup.Weight.set -> void
Microsoft.Extensions.Http.Resilience.WeightedEndpointGroup.WeightedEndpointGroup() -> void
Microsoft.Extensions.Http.Resilience.WeightedGroupSelectionMode
Microsoft.Extensions.Http.Resilience.WeightedGroupSelectionMode.EveryAttempt = 0 -> Microsoft.Extensions.Http.Resilience.WeightedGroupSelectionMode
Microsoft.Extensions.Http.Resilience.WeightedGroupSelectionMode.InitialAttempt = 1 -> Microsoft.Extensions.Http.Resilience.WeightedGroupSelectionMode
Microsoft.Extensions.Http.Resilience.WeightedGroupsRoutingOptions
Microsoft.Extensions.Http.Resilience.WeightedGroupsRoutingOptions.Groups.get -> System.Collections.Generic.IList<Microsoft.Extensions.Http.Resilience.WeightedEndpointGroup!>!
Microsoft.Extensions.Http.Resilience.WeightedGroupsRoutingOptions.Groups.set -> void
Microsoft.Extensions.Http.Resilience.WeightedGroupsRoutingOptions.SelectionMode.get -> Microsoft.Extensions.Http.Resilience.WeightedGroupSelectionMode
Microsoft.Extensions.Http.Resilience.WeightedGroupsRoutingOptions.SelectionMode.set -> void
Microsoft.Extensions.Http.Resilience.WeightedGroupsRoutingOptions.WeightedGroupsRoutingOptions() -> void
static Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddFaultInjectionPolicyHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! httpClientBuilder, string! chaosPolicyOptionsGroupName) -> Microsoft.Extensions.DependencyInjection.IHttpClientBuilder!
static Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddHttpClientFaultInjection(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddHttpClientFaultInjection(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfiguration! section) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddHttpClientFaultInjection(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Extensions.Http.Resilience.FaultInjection.HttpFaultInjectionOptionsBuilder!>! configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddWeightedFaultInjectionPolicyHandlers(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! httpClientBuilder, Microsoft.Extensions.Configuration.IConfigurationSection! weightAssignmentsConfigSection) -> Microsoft.Extensions.DependencyInjection.IHttpClientBuilder!
static Microsoft.Extensions.Http.Resilience.FaultInjection.HttpClientFaultInjectionExtensions.AddWeightedFaultInjectionPolicyHandlers(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! httpClientBuilder, System.Action<Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions!>! weightAssignmentsConfig) -> Microsoft.Extensions.DependencyInjection.IHttpClientBuilder!
static Microsoft.Extensions.Http.Resilience.FaultInjection.PolicyContextExtensions.WithCallingRequestMessage(this Polly.Context! context, System.Net.Http.HttpRequestMessage! request) -> Polly.Context!
static Microsoft.Extensions.Http.Resilience.HedgingHttpClientBuilderExtensions.AddStandardHedgingHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
static Microsoft.Extensions.Http.Resilience.HedgingHttpClientBuilderExtensions.AddStandardHedgingHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder!>! configure) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddFallbackHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.DependencyInjection.IHttpClientBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddFallbackHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section, System.Action<Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions!>! configure) -> Microsoft.Extensions.DependencyInjection.IHttpClientBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddFallbackHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.FallbackClientHandlerOptions!>! configure) -> Microsoft.Extensions.DependencyInjection.IHttpClientBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, string! pipelineIdentifier) -> Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
static Microsoft.Extensions.Http.Resilience.HttpClientBuilderExtensions.AddStandardResilienceHandler(this Microsoft.Extensions.DependencyInjection.IHttpClientBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions!>! configure) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
static Microsoft.Extensions.Http.Resilience.HttpResiliencePipelineBuilderExtensions.SelectPipelineBy(this Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder! builder, System.Func<System.IServiceProvider!, Microsoft.Extensions.Http.Resilience.PipelineKeySelector!>! selectorFactory) -> Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder!
static Microsoft.Extensions.Http.Resilience.HttpResiliencePipelineBuilderExtensions.SelectPipelineByAuthority(this Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder! builder, Microsoft.Extensions.Compliance.Classification.DataClassification classification) -> Microsoft.Extensions.Http.Resilience.IHttpResiliencePipelineBuilder!
static Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
static Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions!, System.IServiceProvider!>! configure) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
static Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.HttpStandardResilienceOptions!>! configure) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
static Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions.SelectPipelineBy(this Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder! builder, System.Func<System.IServiceProvider!, Microsoft.Extensions.Http.Resilience.PipelineKeySelector!>! selectorFactory) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
static Microsoft.Extensions.Http.Resilience.HttpStandardResiliencePipelineBuilderExtensions.SelectPipelineByAuthority(this Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder! builder, Microsoft.Extensions.Compliance.Classification.DataClassification classification) -> Microsoft.Extensions.Http.Resilience.IHttpStandardResiliencePipelineBuilder!
static Microsoft.Extensions.Http.Resilience.RoutingStrategyBuilderExtensions.ConfigureOrderedGroups(this Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.RoutingStrategyBuilderExtensions.ConfigureOrderedGroups(this Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.OrderedGroupsRoutingOptions!, System.IServiceProvider!>! configure) -> Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.RoutingStrategyBuilderExtensions.ConfigureOrderedGroups(this Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.OrderedGroupsRoutingOptions!>! configure) -> Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.RoutingStrategyBuilderExtensions.ConfigureWeightedGroups(this Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.RoutingStrategyBuilderExtensions.ConfigureWeightedGroups(this Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.WeightedGroupsRoutingOptions!, System.IServiceProvider!>! configure) -> Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.RoutingStrategyBuilderExtensions.ConfigureWeightedGroups(this Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.WeightedGroupsRoutingOptions!>! configure) -> Microsoft.Extensions.Http.Resilience.IRoutingStrategyBuilder!
static Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
static Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions!, System.IServiceProvider!>! configure) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
static Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions.Configure(this Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder! builder, System.Action<Microsoft.Extensions.Http.Resilience.HttpStandardHedgingResilienceOptions!>! configure) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
static Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions.SelectPipelineBy(this Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder! builder, System.Func<System.IServiceProvider!, Microsoft.Extensions.Http.Resilience.PipelineKeySelector!>! selectorFactory) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
static Microsoft.Extensions.Http.Resilience.StandardHedgingHandlerBuilderExtensions.SelectPipelineByAuthority(this Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder! builder, Microsoft.Extensions.Compliance.Classification.DataClassification classification) -> Microsoft.Extensions.Http.Resilience.IStandardHedgingHandlerBuilder!
static readonly Microsoft.Extensions.Http.Resilience.HttpClientHedgingResiliencePredicates.IsTransientHttpException -> System.Predicate<System.Exception!>!
static readonly Microsoft.Extensions.Http.Resilience.HttpClientResilienceGenerators.HandleRetryAfterHeader -> System.Func<Microsoft.Extensions.Resilience.Options.RetryDelayArguments<System.Net.Http.HttpResponseMessage!>, System.TimeSpan>!
static readonly Microsoft.Extensions.Http.Resilience.HttpClientResiliencePredicates.IsTransientHttpException -> System.Predicate<System.Exception!>!
static readonly Microsoft.Extensions.Http.Resilience.HttpClientResiliencePredicates.IsTransientHttpFailure -> System.Predicate<System.Net.Http.HttpResponseMessage!>!
