{
  "Name": "Microsoft.Extensions.Resilience, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
  "Types": [
    {
      "Type": "enum Microsoft.Extensions.Resilience.Options.BackoffType",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.BackoffType.BackoffType();",
          "Stage": "Stable"
        }
      ],
      "Fields": [
        {
          "Member": "const Microsoft.Extensions.Resilience.Options.BackoffType Microsoft.Extensions.Resilience.Options.BackoffType.Constant",
          "Stage": "Stable",
          "Value": "1"
        },
        {
          "Member": "const Microsoft.Extensions.Resilience.Options.BackoffType Microsoft.Extensions.Resilience.Options.BackoffType.ExponentialWithJitter",
          "Stage": "Stable",
          "Value": "0"
        },
        {
          "Member": "const Microsoft.Extensions.Resilience.Options.BackoffType Microsoft.Extensions.Resilience.Options.BackoffType.Linear",
          "Stage": "Stable",
          "Value": "2"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.BreakActionArguments : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.BreakActionArguments.BreakActionArguments(System.Exception exception, Polly.Context context, System.TimeSpan breakDuration, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.BreakActionArguments.BreakActionArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.TimeSpan Microsoft.Extensions.Resilience.Options.BreakActionArguments.BreakDuration { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.BreakActionArguments.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.BreakActionArguments.Context { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Exception Microsoft.Extensions.Resilience.Options.BreakActionArguments.Exception { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult> : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments<TResult>, Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.BreakActionArguments(Polly.DelegateResult<TResult> result, Polly.Context context, System.TimeSpan breakDuration, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.BreakActionArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.TimeSpan Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.BreakDuration { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.Context { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.DelegateResult<TResult> Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.Result { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions.BulkheadPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "int Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions.MaxConcurrency { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "int Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions.MaxQueuedActions { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Func<Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments, System.Threading.Tasks.Task> Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions.OnBulkheadRejectedAsync { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments.BulkheadTaskArguments(Polly.Context context, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments.BulkheadTaskArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments.Context { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsBase",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsBase.ChaosPolicyOptionsBase();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "bool Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsBase.Enabled { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "double Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsBase.FaultInjectionRate { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup.ChaosPolicyOptionsGroup();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.CustomResultPolicyOptions? Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup.CustomResultPolicyOptions { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.ExceptionPolicyOptions? Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup.ExceptionPolicyOptions { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.HttpResponseInjectionPolicyOptions? Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup.HttpResponseInjectionPolicyOptions { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.LatencyPolicyOptions? Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup.LatencyPolicyOptions { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.CircuitBreakerPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.TimeSpan Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.BreakDuration { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "double Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.FailureThreshold { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "int Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.MinimumThroughput { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Action<Microsoft.Extensions.Resilience.Options.BreakActionArguments> Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.OnCircuitBreak { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Action<Microsoft.Extensions.Resilience.Options.ResetActionArguments> Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.OnCircuitReset { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.TimeSpan Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.SamplingDuration { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Predicate<System.Exception> Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.ShouldHandleException { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult> : Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>.CircuitBreakerPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Action<Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>> Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>.OnCircuitBreak { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Predicate<TResult> Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>.ShouldHandleResultAsError { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.FaultInjection.CustomResultPolicyOptions : Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsBase",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.CustomResultPolicyOptions.CustomResultPolicyOptions();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Resilience.FaultInjection.CustomResultPolicyOptions.CustomResultKey { get; set; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.FaultInjection.ExceptionPolicyOptions : Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsBase",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.ExceptionPolicyOptions.ExceptionPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Resilience.FaultInjection.ExceptionPolicyOptions.ExceptionKey { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.FailureResultContext",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.FailureResultContext.FailureResultContext();",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.FailureResultContext Microsoft.Extensions.Resilience.FailureResultContext.Create(string failureSource = \"unknown\", string failureReason = \"unknown\", string additionalInformation = \"unknown\");",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Resilience.FailureResultContext.AdditionalInformation { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "string Microsoft.Extensions.Resilience.FailureResultContext.FailureReason { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "string Microsoft.Extensions.Resilience.FailureResultContext.FailureSource { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions.FallbackPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Func<Microsoft.Extensions.Resilience.Options.FallbackTaskArguments, System.Threading.Tasks.Task> Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions.OnFallbackAsync { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Predicate<System.Exception> Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions.ShouldHandleException { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult> : Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>.FallbackPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Func<Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>, System.Threading.Tasks.Task> Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>.OnFallbackAsync { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Predicate<TResult> Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>.ShouldHandleResultAsError { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments.FallbackScenarioTaskArguments(Polly.Context context, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments.FallbackScenarioTaskArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments.Context { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "delegate System.Threading.Tasks.Task Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider(Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments args)",
      "Stage": "Stable"
    },
    {
      "Type": "delegate System.Threading.Tasks.Task<TResult> Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider<TResult>(Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments args)",
      "Stage": "Stable"
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.FallbackTaskArguments : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.FallbackTaskArguments.FallbackTaskArguments(System.Exception exception, Polly.Context context, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.FallbackTaskArguments.FallbackTaskArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.FallbackTaskArguments.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.FallbackTaskArguments.Context { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Exception Microsoft.Extensions.Resilience.Options.FallbackTaskArguments.Exception { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult> : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments<TResult>, Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>.FallbackTaskArguments(Polly.DelegateResult<TResult> result, Polly.Context context, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>.FallbackTaskArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>.Context { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.DelegateResult<TResult> Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>.Result { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.AddFaultInjection(this Microsoft.Extensions.DependencyInjection.IServiceCollection services);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.AddFaultInjection(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration section);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.AddFaultInjection(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static string? Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.GetFaultInjectionGroupName(this Polly.Context context);",
          "Stage": "Stable"
        },
        {
          "Member": "static Polly.Context Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.WithFaultInjection(this Polly.Context context, string groupName);",
          "Stage": "Stable"
        },
        {
          "Member": "static Polly.Context Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionExtensions.WithFaultInjection(this Polly.Context context, Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions weightAssignments);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptions.FaultInjectionOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Collections.Generic.IDictionary<string, Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup> Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptions.ChaosPolicyOptionsGroups { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder.FaultInjectionOptionsBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection services);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder.AddCustomResult(string key, object customResult);",
          "Stage": "Experimental"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder.AddException(string key, System.Exception exception);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder.Configure();",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder.Configure(Microsoft.Extensions.Configuration.IConfiguration section);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptionsBuilder.Configure(System.Action<Microsoft.Extensions.Resilience.FaultInjection.FaultInjectionOptions> configureOptions);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions.FaultPolicyWeightAssignmentsOptions();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "System.Collections.Generic.IDictionary<string, double> Microsoft.Extensions.Resilience.FaultInjection.FaultPolicyWeightAssignmentsOptions.WeightAssignments { get; set; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "delegate bool Microsoft.Extensions.Resilience.HedgedTaskProvider(Microsoft.Extensions.Resilience.HedgingTaskProviderArguments args, out System.Threading.Tasks.Task? result)",
      "Stage": "Stable"
    },
    {
      "Type": "delegate bool Microsoft.Extensions.Resilience.HedgedTaskProvider<TResult>(Microsoft.Extensions.Resilience.HedgingTaskProviderArguments args, out System.Threading.Tasks.Task<TResult>? result)",
      "Stage": "Stable"
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.HedgingDelayArguments : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.HedgingDelayArguments.HedgingDelayArguments(Polly.Context context, int attemptNumber, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.HedgingDelayArguments.HedgingDelayArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "int Microsoft.Extensions.Resilience.Options.HedgingDelayArguments.AttemptNumber { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.HedgingDelayArguments.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.HedgingDelayArguments.Context { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Fields": [
        {
          "Member": "static readonly System.TimeSpan Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.InfiniteHedgingDelay",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.TimeSpan Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelay { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Func<Microsoft.Extensions.Resilience.Options.HedgingDelayArguments, System.TimeSpan>? Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelayGenerator { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "int Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.MaxHedgedAttempts { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Func<Microsoft.Extensions.Resilience.Options.HedgingTaskArguments, System.Threading.Tasks.Task> Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.OnHedgingAsync { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Predicate<System.Exception> Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.ShouldHandleException { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult> : Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>.HedgingPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Func<Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>, System.Threading.Tasks.Task> Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>.OnHedgingAsync { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Predicate<TResult> Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>.ShouldHandleResultAsError { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.HedgingTaskArguments : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.HedgingTaskArguments(System.Exception exception, Polly.Context context, int attemptNumber, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.HedgingTaskArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "int Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.AttemptNumber { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.Context { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Exception Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.Exception { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult> : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments<TResult>, Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.HedgingTaskArguments(Polly.DelegateResult<TResult> result, Polly.Context context, int attemptNumber, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.HedgingTaskArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "int Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.AttemptNumber { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.Context { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.DelegateResult<TResult> Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.Result { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.HedgingTaskProviderArguments : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.HedgingTaskProviderArguments.HedgingTaskProviderArguments(Polly.Context context, int attemptNumber, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.HedgingTaskProviderArguments.HedgingTaskProviderArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "int Microsoft.Extensions.Resilience.HedgingTaskProviderArguments.AttemptNumber { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.HedgingTaskProviderArguments.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.HedgingTaskProviderArguments.Context { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.FaultInjection.HttpResponseInjectionPolicyOptions : Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsBase",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.HttpResponseInjectionPolicyOptions.HttpResponseInjectionPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string? Microsoft.Extensions.Resilience.FaultInjection.HttpResponseInjectionPolicyOptions.HttpContentKey { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Net.HttpStatusCode Microsoft.Extensions.Resilience.FaultInjection.HttpResponseInjectionPolicyOptions.StatusCode { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Resilience.FaultInjection.IChaosPolicyFactory",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Polly.Contrib.Simmy.Outcomes.AsyncInjectOutcomePolicy<TResult> Microsoft.Extensions.Resilience.FaultInjection.IChaosPolicyFactory.CreateCustomResultPolicy<TResult>();",
          "Stage": "Experimental"
        },
        {
          "Member": "Polly.Contrib.Simmy.Outcomes.AsyncInjectOutcomePolicy Microsoft.Extensions.Resilience.FaultInjection.IChaosPolicyFactory.CreateExceptionPolicy();",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Contrib.Simmy.Latency.AsyncInjectLatencyPolicy<TResult> Microsoft.Extensions.Resilience.FaultInjection.IChaosPolicyFactory.CreateLatencyPolicy<TResult>();",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Resilience.FaultInjection.IFaultInjectionOptionsProvider",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "bool Microsoft.Extensions.Resilience.FaultInjection.IFaultInjectionOptionsProvider.TryGetChaosPolicyOptionsGroup(string optionsGroupName, out Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsGroup? optionsGroup);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.FaultInjection.InjectedFaultException : System.Exception",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.InjectedFaultException.InjectedFaultException();",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.InjectedFaultException.InjectedFaultException(string message);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.InjectedFaultException.InjectedFaultException(string message, System.Exception innerException);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>",
      "Stage": "Stable",
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>.PipelineName { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>.Services { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Resilience.IResiliencePipelineProvider",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Polly.IAsyncPolicy<TResult> Microsoft.Extensions.Resilience.IResiliencePipelineProvider.GetPipeline<TResult>(string pipelineName);",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.IAsyncPolicy<TResult> Microsoft.Extensions.Resilience.IResiliencePipelineProvider.GetPipeline<TResult>(string pipelineName, string pipelineKey);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.FaultInjection.LatencyPolicyOptions : Microsoft.Extensions.Resilience.FaultInjection.ChaosPolicyOptionsBase",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.FaultInjection.LatencyPolicyOptions.LatencyPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.TimeSpan Microsoft.Extensions.Resilience.FaultInjection.LatencyPolicyOptions.Latency { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Resilience.PollyServiceCollectionExtensions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Resilience.PollyServiceCollectionExtensions.ConfigureFailureResultContext<TResult>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<TResult, Microsoft.Extensions.Resilience.FailureResultContext> configure);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.ResetActionArguments : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.ResetActionArguments.ResetActionArguments(Polly.Context context, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.ResetActionArguments.ResetActionArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.ResetActionArguments.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.ResetActionArguments.Context { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Resilience.ResilienceDimensions",
      "Stage": "Experimental",
      "Fields": [
        {
          "Member": "const string Microsoft.Extensions.Resilience.ResilienceDimensions.DependencyName",
          "Stage": "Experimental",
          "Value": "dep_name"
        },
        {
          "Member": "const string Microsoft.Extensions.Resilience.ResilienceDimensions.EventName",
          "Stage": "Experimental",
          "Value": "event_name"
        },
        {
          "Member": "const string Microsoft.Extensions.Resilience.ResilienceDimensions.FailureReason",
          "Stage": "Experimental",
          "Value": "failure_reason"
        },
        {
          "Member": "const string Microsoft.Extensions.Resilience.ResilienceDimensions.FailureSource",
          "Stage": "Experimental",
          "Value": "failure_source"
        },
        {
          "Member": "const string Microsoft.Extensions.Resilience.ResilienceDimensions.FailureSummary",
          "Stage": "Experimental",
          "Value": "failure_summary"
        },
        {
          "Member": "const string Microsoft.Extensions.Resilience.ResilienceDimensions.PipelineKey",
          "Stage": "Experimental",
          "Value": "pipeline_key"
        },
        {
          "Member": "const string Microsoft.Extensions.Resilience.ResilienceDimensions.PipelineName",
          "Stage": "Experimental",
          "Value": "pipeline_name"
        },
        {
          "Member": "const string Microsoft.Extensions.Resilience.ResilienceDimensions.PolicyName",
          "Stage": "Experimental",
          "Value": "policy_name"
        },
        {
          "Member": "const string Microsoft.Extensions.Resilience.ResilienceDimensions.RequestName",
          "Stage": "Experimental",
          "Value": "req_name"
        },
        {
          "Member": "const string Microsoft.Extensions.Resilience.ResilienceDimensions.ResultType",
          "Stage": "Experimental",
          "Value": "result_type"
        }
      ],
      "Properties": [
        {
          "Member": "static System.Collections.Generic.IReadOnlyList<string> Microsoft.Extensions.Resilience.ResilienceDimensions.DimensionNames { get; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddBulkheadPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddBulkheadPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, System.Action<Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddBulkheadPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Configuration.IConfigurationSection section);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddBulkheadPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Configuration.IConfigurationSection section, System.Action<Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddCircuitBreakerPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddCircuitBreakerPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, System.Action<Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddCircuitBreakerPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Configuration.IConfigurationSection section);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddCircuitBreakerPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Configuration.IConfigurationSection section, System.Action<Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddFallbackPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider<TResult> provider);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddFallbackPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider<TResult> provider, System.Action<Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddFallbackPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider<TResult> provider, Microsoft.Extensions.Configuration.IConfigurationSection section);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddFallbackPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider<TResult> provider, Microsoft.Extensions.Configuration.IConfigurationSection section, System.Action<Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddHedgingPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Resilience.HedgedTaskProvider<TResult> provider);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddHedgingPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Resilience.HedgedTaskProvider<TResult> provider, System.Action<Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddHedgingPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Resilience.HedgedTaskProvider<TResult> provider, Microsoft.Extensions.Configuration.IConfigurationSection section);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddHedgingPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Resilience.HedgedTaskProvider<TResult> provider, Microsoft.Extensions.Configuration.IConfigurationSection section, System.Action<Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddRetryPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddRetryPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, System.Action<Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddRetryPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Configuration.IConfigurationSection section);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddRetryPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Configuration.IConfigurationSection section, System.Action<Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddTimeoutPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddTimeoutPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, System.Action<Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions> configure);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddTimeoutPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Configuration.IConfigurationSection section);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddTimeoutPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult> builder, string policyName, Microsoft.Extensions.Configuration.IConfigurationSection section, System.Action<Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions> configure);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Resilience.ResilienceWrapperAttribute : System.Attribute",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.ResilienceWrapperAttribute.ResilienceWrapperAttribute();",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.RetryActionArguments : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.RetryActionArguments.RetryActionArguments(System.Exception exception, Polly.Context context, System.TimeSpan waitingTimeInterval, int attemptNumber, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.RetryActionArguments.RetryActionArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "int Microsoft.Extensions.Resilience.Options.RetryActionArguments.AttemptNumber { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.RetryActionArguments.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.RetryActionArguments.Context { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Exception Microsoft.Extensions.Resilience.Options.RetryActionArguments.Exception { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.TimeSpan Microsoft.Extensions.Resilience.Options.RetryActionArguments.WaitingTimeInterval { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult> : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments<TResult>, Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.RetryActionArguments(Polly.DelegateResult<TResult> result, Polly.Context context, System.TimeSpan waitingTimeInterval, int attemptNumber, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.RetryActionArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "int Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.AttemptNumber { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.Context { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.DelegateResult<TResult> Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.Result { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.TimeSpan Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.WaitingTimeInterval { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult> : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments<TResult>, Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>.RetryDelayArguments(Polly.DelegateResult<TResult> result, Polly.Context context, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>.RetryDelayArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>.Context { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.DelegateResult<TResult> Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>.Result { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.Options.RetryPolicyOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.RetryPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Fields": [
        {
          "Member": "const int Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.InfiniteRetry",
          "Stage": "Stable",
          "Value": "-1"
        }
      ],
      "Properties": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.BackoffType Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.BackoffType { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.TimeSpan Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.BaseDelay { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Func<Microsoft.Extensions.Resilience.Options.RetryActionArguments, System.Threading.Tasks.Task> Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.OnRetryAsync { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "int Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.RetryCount { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Predicate<System.Exception> Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.ShouldHandleException { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult> : Microsoft.Extensions.Resilience.Options.RetryPolicyOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>.RetryPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Func<Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>, System.Threading.Tasks.Task> Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>.OnRetryAsync { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Func<Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>, System.TimeSpan>? Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>.RetryDelayGenerator { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Predicate<TResult> Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>.ShouldHandleResultAsError { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Resilience.RetryPolicyOptionsExtensions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "static System.Collections.Generic.IEnumerable<System.TimeSpan> Microsoft.Extensions.Resilience.RetryPolicyOptionsExtensions.GetDelays(this Microsoft.Extensions.Resilience.Options.RetryPolicyOptions options);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Resilience.ServiceCollectionExtensions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "static Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TPolicyResult> Microsoft.Extensions.Resilience.ServiceCollectionExtensions.AddResiliencePipeline<TPolicyResult>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string pipelineName);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions.TimeoutPolicyOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Func<Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments, System.Threading.Tasks.Task> Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions.OnTimedOutAsync { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.TimeSpan Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions.TimeoutInterval { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Timeout.TimeoutStrategy Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions.TimeoutStrategy { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments : Microsoft.Extensions.Resilience.Options.IPolicyEventArguments",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments.TimeoutTaskArguments(Polly.Context context, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments.TimeoutTaskArguments();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Threading.CancellationToken Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments.CancellationToken { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "Polly.Context Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments.Context { get; }",
          "Stage": "Stable"
        }
      ]
    }
  ]
}