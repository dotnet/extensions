Microsoft.Extensions.Resilience.Resilience.ResilienceContextExtensions
Microsoft.Extensions.Resilience.ResilienceServiceCollectionExtensions
static Microsoft.Extensions.Resilience.Resilience.ResilienceContextExtensions.GetRequestMetadata(this Polly.ResilienceContext! context) -> Microsoft.Extensions.Http.Telemetry.RequestMetadata?
static Microsoft.Extensions.Resilience.Resilience.ResilienceContextExtensions.SetRequestMetadata(this Polly.ResilienceContext! context, Microsoft.Extensions.Http.Telemetry.RequestMetadata! requestMetadata) -> void
static Microsoft.Extensions.Resilience.ResilienceServiceCollectionExtensions.AddResilienceEnrichment(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.Resilience.ResilienceServiceCollectionExtensions.ConfigureFailureResultContext<TResult>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<TResult, Microsoft.Extensions.Resilience.FailureResultContext>! configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
*REMOVED*const Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.InfiniteRetry = -1 -> int
*REMOVED*const Microsoft.Extensions.Resilience.ResilienceDimensions.DependencyName = "dep_name" -> string!
*REMOVED*const Microsoft.Extensions.Resilience.ResilienceDimensions.EventName = "event_name" -> string!
*REMOVED*const Microsoft.Extensions.Resilience.ResilienceDimensions.FailureReason = "failure_reason" -> string!
*REMOVED*const Microsoft.Extensions.Resilience.ResilienceDimensions.FailureSource = "failure_source" -> string!
*REMOVED*const Microsoft.Extensions.Resilience.ResilienceDimensions.FailureSummary = "failure_summary" -> string!
*REMOVED*const Microsoft.Extensions.Resilience.ResilienceDimensions.PipelineKey = "pipeline_key" -> string!
*REMOVED*const Microsoft.Extensions.Resilience.ResilienceDimensions.PipelineName = "pipeline_name" -> string!
*REMOVED*const Microsoft.Extensions.Resilience.ResilienceDimensions.PolicyName = "policy_name" -> string!
*REMOVED*const Microsoft.Extensions.Resilience.ResilienceDimensions.RequestName = "req_name" -> string!
*REMOVED*const Microsoft.Extensions.Resilience.ResilienceDimensions.ResultType = "result_type" -> string!
*REMOVED*Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider
*REMOVED*Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider<TResult>
*REMOVED*Microsoft.Extensions.Resilience.HedgedTaskProvider
*REMOVED*Microsoft.Extensions.Resilience.HedgedTaskProvider<TResult>
*REMOVED*Microsoft.Extensions.Resilience.HedgingTaskProviderArguments
*REMOVED*Microsoft.Extensions.Resilience.HedgingTaskProviderArguments.AttemptNumber.get -> int
*REMOVED*Microsoft.Extensions.Resilience.HedgingTaskProviderArguments.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.HedgingTaskProviderArguments.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.HedgingTaskProviderArguments.HedgingTaskProviderArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.HedgingTaskProviderArguments.HedgingTaskProviderArguments(Polly.Context! context, int attemptNumber, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>
*REMOVED*Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>.PipelineName.get -> string!
*REMOVED*Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
*REMOVED*Microsoft.Extensions.Resilience.IResiliencePipelineProvider
*REMOVED*Microsoft.Extensions.Resilience.IResiliencePipelineProvider.GetPipeline<TResult>(string! pipelineName) -> Polly.IAsyncPolicy<TResult>!
*REMOVED*Microsoft.Extensions.Resilience.IResiliencePipelineProvider.GetPipeline<TResult>(string! pipelineName, string! pipelineKey) -> Polly.IAsyncPolicy<TResult>!
*REMOVED*Microsoft.Extensions.Resilience.Options.BackoffType
*REMOVED*Microsoft.Extensions.Resilience.Options.BackoffType.Constant = 1 -> Microsoft.Extensions.Resilience.Options.BackoffType
*REMOVED*Microsoft.Extensions.Resilience.Options.BackoffType.ExponentialWithJitter = 0 -> Microsoft.Extensions.Resilience.Options.BackoffType
*REMOVED*Microsoft.Extensions.Resilience.Options.BackoffType.Linear = 2 -> Microsoft.Extensions.Resilience.Options.BackoffType
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments.BreakActionArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments.BreakActionArguments(System.Exception! exception, Polly.Context! context, System.TimeSpan breakDuration, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments.BreakDuration.get -> System.TimeSpan
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments.Exception.get -> System.Exception!
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.BreakActionArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.BreakActionArguments(Polly.DelegateResult<TResult>! result, Polly.Context! context, System.TimeSpan breakDuration, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.BreakDuration.get -> System.TimeSpan
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>.Result.get -> Polly.DelegateResult<TResult>!
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions.BulkheadPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions.MaxConcurrency.get -> int
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions.MaxConcurrency.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions.MaxQueuedActions.get -> int
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions.MaxQueuedActions.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions.OnBulkheadRejectedAsync.get -> System.Func<Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments, System.Threading.Tasks.Task!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions.OnBulkheadRejectedAsync.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments.BulkheadTaskArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments.BulkheadTaskArguments(Polly.Context! context, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.BulkheadTaskArguments.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.BreakDuration.get -> System.TimeSpan
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.BreakDuration.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.CircuitBreakerPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.FailureThreshold.get -> double
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.FailureThreshold.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.MinimumThroughput.get -> int
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.MinimumThroughput.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.OnCircuitBreak.get -> System.Action<Microsoft.Extensions.Resilience.Options.BreakActionArguments>!
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.OnCircuitBreak.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.OnCircuitReset.get -> System.Action<Microsoft.Extensions.Resilience.Options.ResetActionArguments>!
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.OnCircuitReset.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.SamplingDuration.get -> System.TimeSpan
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.SamplingDuration.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.ShouldHandleException.get -> System.Predicate<System.Exception!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions.ShouldHandleException.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>.CircuitBreakerPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>.OnCircuitBreak.get -> System.Action<Microsoft.Extensions.Resilience.Options.BreakActionArguments<TResult>>!
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>.OnCircuitBreak.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>.ShouldHandleResultAsError.get -> System.Predicate<TResult>!
*REMOVED*Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>.ShouldHandleResultAsError.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions.FallbackPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions.OnFallbackAsync.get -> System.Func<Microsoft.Extensions.Resilience.Options.FallbackTaskArguments, System.Threading.Tasks.Task!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions.OnFallbackAsync.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions.ShouldHandleException.get -> System.Predicate<System.Exception!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions.ShouldHandleException.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>.FallbackPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>.OnFallbackAsync.get -> System.Func<Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>, System.Threading.Tasks.Task!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>.OnFallbackAsync.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>.ShouldHandleResultAsError.get -> System.Predicate<TResult>!
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>.ShouldHandleResultAsError.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments.FallbackScenarioTaskArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackScenarioTaskArguments.FallbackScenarioTaskArguments(Polly.Context! context, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments.Exception.get -> System.Exception!
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments.FallbackTaskArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments.FallbackTaskArguments(System.Exception! exception, Polly.Context! context, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>.FallbackTaskArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>.FallbackTaskArguments(Polly.DelegateResult<TResult>! result, Polly.Context! context, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.FallbackTaskArguments<TResult>.Result.get -> Polly.DelegateResult<TResult>!
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingDelayArguments
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingDelayArguments.AttemptNumber.get -> int
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingDelayArguments.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingDelayArguments.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingDelayArguments.HedgingDelayArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingDelayArguments.HedgingDelayArguments(Polly.Context! context, int attemptNumber, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelay.get -> System.TimeSpan
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelay.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelayGenerator.get -> System.Func<Microsoft.Extensions.Resilience.Options.HedgingDelayArguments, System.TimeSpan>?
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingDelayGenerator.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.HedgingPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.MaxHedgedAttempts.get -> int
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.MaxHedgedAttempts.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.OnHedgingAsync.get -> System.Func<Microsoft.Extensions.Resilience.Options.HedgingTaskArguments, System.Threading.Tasks.Task!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.OnHedgingAsync.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.ShouldHandleException.get -> System.Predicate<System.Exception!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.ShouldHandleException.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>.HedgingPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>.OnHedgingAsync.get -> System.Func<Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>, System.Threading.Tasks.Task!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>.OnHedgingAsync.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>.ShouldHandleResultAsError.get -> System.Predicate<TResult>!
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>.ShouldHandleResultAsError.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.AttemptNumber.get -> int
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.Exception.get -> System.Exception!
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.HedgingTaskArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments.HedgingTaskArguments(System.Exception! exception, Polly.Context! context, int attemptNumber, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.AttemptNumber.get -> int
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.HedgingTaskArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.HedgingTaskArguments(Polly.DelegateResult<TResult>! result, Polly.Context! context, int attemptNumber, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.HedgingTaskArguments<TResult>.Result.get -> Polly.DelegateResult<TResult>!
*REMOVED*Microsoft.Extensions.Resilience.Options.ResetActionArguments
*REMOVED*Microsoft.Extensions.Resilience.Options.ResetActionArguments.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.ResetActionArguments.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.ResetActionArguments.ResetActionArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.ResetActionArguments.ResetActionArguments(Polly.Context! context, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments.AttemptNumber.get -> int
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments.Exception.get -> System.Exception!
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments.RetryActionArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments.RetryActionArguments(System.Exception! exception, Polly.Context! context, System.TimeSpan waitingTimeInterval, int attemptNumber, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments.WaitingTimeInterval.get -> System.TimeSpan
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.AttemptNumber.get -> int
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.Result.get -> Polly.DelegateResult<TResult>!
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.RetryActionArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.RetryActionArguments(Polly.DelegateResult<TResult>! result, Polly.Context! context, System.TimeSpan waitingTimeInterval, int attemptNumber, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>.WaitingTimeInterval.get -> System.TimeSpan
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>.Result.get -> Polly.DelegateResult<TResult>!
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>.RetryDelayArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>.RetryDelayArguments(Polly.DelegateResult<TResult>! result, Polly.Context! context, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.BackoffType.get -> Microsoft.Extensions.Resilience.Options.BackoffType
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.BackoffType.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.BaseDelay.get -> System.TimeSpan
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.BaseDelay.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.OnRetryAsync.get -> System.Func<Microsoft.Extensions.Resilience.Options.RetryActionArguments, System.Threading.Tasks.Task!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.OnRetryAsync.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.RetryCount.get -> int
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.RetryCount.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.RetryPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.ShouldHandleException.get -> System.Predicate<System.Exception!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions.ShouldHandleException.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>.OnRetryAsync.get -> System.Func<Microsoft.Extensions.Resilience.Options.RetryActionArguments<TResult>, System.Threading.Tasks.Task!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>.OnRetryAsync.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>.RetryDelayGenerator.get -> System.Func<Microsoft.Extensions.Resilience.Options.RetryDelayArguments<TResult>, System.TimeSpan>?
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>.RetryDelayGenerator.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>.RetryPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>.ShouldHandleResultAsError.get -> System.Predicate<TResult>!
*REMOVED*Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>.ShouldHandleResultAsError.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions.OnTimedOutAsync.get -> System.Func<Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments, System.Threading.Tasks.Task!>!
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions.OnTimedOutAsync.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions.TimeoutInterval.get -> System.TimeSpan
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions.TimeoutInterval.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions.TimeoutPolicyOptions() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions.TimeoutStrategy.get -> Polly.Timeout.TimeoutStrategy
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions.TimeoutStrategy.set -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments.CancellationToken.get -> System.Threading.CancellationToken
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments.Context.get -> Polly.Context!
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments.TimeoutTaskArguments() -> void
*REMOVED*Microsoft.Extensions.Resilience.Options.TimeoutTaskArguments.TimeoutTaskArguments(Polly.Context! context, System.Threading.CancellationToken cancellationToken) -> void
*REMOVED*Microsoft.Extensions.Resilience.PollyServiceCollectionExtensions
*REMOVED*Microsoft.Extensions.Resilience.ResilienceDimensions
*REMOVED*Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions
*REMOVED*Microsoft.Extensions.Resilience.ResilienceWrapperAttribute
*REMOVED*Microsoft.Extensions.Resilience.ResilienceWrapperAttribute.ResilienceWrapperAttribute() -> void
*REMOVED*Microsoft.Extensions.Resilience.RetryPolicyOptionsExtensions
*REMOVED*Microsoft.Extensions.Resilience.ServiceCollectionExtensions
*REMOVED*static Microsoft.Extensions.Resilience.PollyServiceCollectionExtensions.ConfigureFailureResultContext<TResult>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Func<TResult, Microsoft.Extensions.Resilience.FailureResultContext>! configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
*REMOVED*static Microsoft.Extensions.Resilience.ResilienceDimensions.DimensionNames.get -> System.Collections.Generic.IReadOnlyList<string!>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddBulkheadPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddBulkheadPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddBulkheadPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Configuration.IConfigurationSection! section, System.Action<Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddBulkheadPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, System.Action<Microsoft.Extensions.Resilience.Options.BulkheadPolicyOptions!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddCircuitBreakerPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddCircuitBreakerPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddCircuitBreakerPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Configuration.IConfigurationSection! section, System.Action<Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddCircuitBreakerPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, System.Action<Microsoft.Extensions.Resilience.Options.CircuitBreakerPolicyOptions<TResult>!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddFallbackPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider<TResult>! provider) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddFallbackPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider<TResult>! provider, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddFallbackPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider<TResult>! provider, Microsoft.Extensions.Configuration.IConfigurationSection! section, System.Action<Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddFallbackPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Resilience.FallbackScenarioTaskProvider<TResult>! provider, System.Action<Microsoft.Extensions.Resilience.Options.FallbackPolicyOptions<TResult>!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddHedgingPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Resilience.HedgedTaskProvider<TResult>! provider) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddHedgingPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Resilience.HedgedTaskProvider<TResult>! provider, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddHedgingPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Resilience.HedgedTaskProvider<TResult>! provider, Microsoft.Extensions.Configuration.IConfigurationSection! section, System.Action<Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddHedgingPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Resilience.HedgedTaskProvider<TResult>! provider, System.Action<Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions<TResult>!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddRetryPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddRetryPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddRetryPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Configuration.IConfigurationSection! section, System.Action<Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddRetryPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, System.Action<Microsoft.Extensions.Resilience.Options.RetryPolicyOptions<TResult>!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddTimeoutPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddTimeoutPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddTimeoutPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, Microsoft.Extensions.Configuration.IConfigurationSection! section, System.Action<Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.ResiliencePipelineBuilderExtensions.AddTimeoutPolicy<TResult>(this Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>! builder, string! policyName, System.Action<Microsoft.Extensions.Resilience.Options.TimeoutPolicyOptions!>! configure) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TResult>!
*REMOVED*static Microsoft.Extensions.Resilience.RetryPolicyOptionsExtensions.GetDelays(this Microsoft.Extensions.Resilience.Options.RetryPolicyOptions! options) -> System.Collections.Generic.IEnumerable<System.TimeSpan>!
*REMOVED*static Microsoft.Extensions.Resilience.ServiceCollectionExtensions.AddResiliencePipeline<TPolicyResult>(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, string! pipelineName) -> Microsoft.Extensions.Resilience.IResiliencePipelineBuilder<TPolicyResult>!
*REMOVED*static readonly Microsoft.Extensions.Resilience.Options.HedgingPolicyOptions.InfiniteHedgingDelay -> System.TimeSpan
