
#nullable enable
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector.Clear() -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector.Count.get -> int
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector.FakeLogCollector() -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector.FakeLogCollector(Microsoft.Extensions.Options.IOptions<Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions!>! options) -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector.GetSnapshot(bool clear = false) -> System.Collections.Generic.IReadOnlyList<Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord!>!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector.LatestRecord.get -> Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.CollectRecordsForDisabledLogLevels.get -> bool
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.CollectRecordsForDisabledLogLevels.set -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.FakeLogCollectorOptions() -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.FilteredCategories.get -> System.Collections.Generic.ISet<string!>!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.FilteredCategories.set -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.FilteredLevels.get -> System.Collections.Generic.ISet<Microsoft.Extensions.Logging.LogLevel>!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.FilteredLevels.set -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.OutputFormatter.get -> System.Func<Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord!, string!>!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.OutputFormatter.set -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.OutputSink.get -> System.Action<string!>?
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.OutputSink.set -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.TimeProvider.get -> System.TimeProvider!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions.TimeProvider.set -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.BeginScope<TState>(TState state) -> System.IDisposable?
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.Category.get -> string?
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.Collector.get -> Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.ControlLevel(Microsoft.Extensions.Logging.LogLevel logLevel, bool enabled) -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.FakeLogger(Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector? collector = null, string? category = null) -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.FakeLogger(System.Action<string!>! outputSink, string? category = null) -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel logLevel) -> bool
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.LatestRecord.get -> Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger.Log<TState>(Microsoft.Extensions.Logging.LogLevel logLevel, Microsoft.Extensions.Logging.EventId eventId, TState state, System.Exception? exception, System.Func<TState, System.Exception?, string!>! formatter) -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger<T>
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger<T>.FakeLogger(Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector? collector = null) -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger<T>.FakeLogger(System.Action<string!>! outputSink) -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerProvider
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerProvider.~FakeLoggerProvider() -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerProvider.Collector.get -> Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerProvider.CreateLogger(string? categoryName) -> Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogger!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerProvider.Dispose() -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerProvider.FakeLoggerProvider(Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector? collector = null) -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerProvider.SetScopeProvider(Microsoft.Extensions.Logging.IExternalScopeProvider! scopeProvider) -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Category.get -> string?
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Exception.get -> System.Exception?
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.FakeLogRecord(Microsoft.Extensions.Logging.LogLevel level, Microsoft.Extensions.Logging.EventId id, object? state, System.Exception? exception, string! message, System.Collections.Generic.IReadOnlyList<object?>! scopes, string? category, bool enabled, System.DateTimeOffset timestamp) -> void
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Id.get -> Microsoft.Extensions.Logging.EventId
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Level.get -> Microsoft.Extensions.Logging.LogLevel
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.LevelEnabled.get -> bool
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Message.get -> string!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Scopes.get -> System.Collections.Generic.IReadOnlyList<object?>!
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.State.get -> object?
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.StructuredState.get -> System.Collections.Generic.IReadOnlyList<System.Collections.Generic.KeyValuePair<string!, string?>>?
Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.Timestamp.get -> System.DateTimeOffset
Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>
Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>.ContainsTags(params string![]! tags) -> bool
Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>.ContainsTags(params System.Collections.Generic.KeyValuePair<string!, object?>[]! tags) -> bool
Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>.MatchesTags(params string![]! tags) -> bool
Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>.MatchesTags(params System.Collections.Generic.KeyValuePair<string!, object?>[]! tags) -> bool
Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>.Tags.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object?>!
Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>.Timestamp.get -> System.DateTimeOffset
Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>.Value.get -> T
Microsoft.Extensions.Telemetry.Testing.Metering.MeasurementExtensions
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.Clear() -> void
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.Dispose() -> void
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.GetMeasurementSnapshot(bool clear = false) -> System.Collections.Generic.IReadOnlyList<Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>!>!
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.Instrument.get -> System.Diagnostics.Metrics.Instrument?
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.LastMeasurement.get -> Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>?
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.MetricCollector(object? meterScope, string! meterName, string! instrumentName, System.TimeProvider? timeProvider = null) -> void
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.MetricCollector(System.Diagnostics.Metrics.Instrument<T>! instrument, System.TimeProvider? timeProvider = null) -> void
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.MetricCollector(System.Diagnostics.Metrics.Meter! meter, string! instrumentName, System.TimeProvider? timeProvider = null) -> void
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.MetricCollector(System.Diagnostics.Metrics.ObservableInstrument<T>! instrument, System.TimeProvider? timeProvider = null) -> void
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.RecordObservableInstruments() -> void
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.WaitForMeasurementsAsync(int numMeasurements) -> System.Threading.Tasks.Task!
Microsoft.Extensions.Telemetry.Testing.Metering.MetricCollector<T>.WaitForMeasurementsAsync(int numMeasurements, System.TimeSpan timeout, System.TimeProvider? timeProvider = null) -> System.Threading.Tasks.Task!
override Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogRecord.ToString() -> string!
static Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector.Create(Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions! options) -> Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector!
static Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services, System.Action<Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions!>! configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
static Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(this Microsoft.Extensions.Logging.ILoggingBuilder! builder) -> Microsoft.Extensions.Logging.ILoggingBuilder!
static Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(this Microsoft.Extensions.Logging.ILoggingBuilder! builder, Microsoft.Extensions.Configuration.IConfigurationSection! section) -> Microsoft.Extensions.Logging.ILoggingBuilder!
static Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.AddFakeLogging(this Microsoft.Extensions.Logging.ILoggingBuilder! builder, System.Action<Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollectorOptions!>! configure) -> Microsoft.Extensions.Logging.ILoggingBuilder!
static Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerExtensions.GetFakeLogCollector(this System.IServiceProvider! services) -> Microsoft.Extensions.Telemetry.Testing.Logging.FakeLogCollector!
static Microsoft.Extensions.Telemetry.Testing.Metering.MeasurementExtensions.ContainsTags<T>(this System.Collections.Generic.IEnumerable<Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>!>! measurements, params string![]! tags) -> System.Collections.Generic.IEnumerable<Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>!>!
static Microsoft.Extensions.Telemetry.Testing.Metering.MeasurementExtensions.ContainsTags<T>(this System.Collections.Generic.IEnumerable<Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>!>! measurements, params System.Collections.Generic.KeyValuePair<string!, object?>[]! tags) -> System.Collections.Generic.IEnumerable<Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>!>!
static Microsoft.Extensions.Telemetry.Testing.Metering.MeasurementExtensions.EvaluateAsCounter<T>(this System.Collections.Generic.IEnumerable<Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>!>! measurements) -> T
static Microsoft.Extensions.Telemetry.Testing.Metering.MeasurementExtensions.MatchesTags<T>(this System.Collections.Generic.IEnumerable<Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>!>! measurements, params string![]! tags) -> System.Collections.Generic.IEnumerable<Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>!>!
static Microsoft.Extensions.Telemetry.Testing.Metering.MeasurementExtensions.MatchesTags<T>(this System.Collections.Generic.IEnumerable<Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>!>! measurements, params System.Collections.Generic.KeyValuePair<string!, object?>[]! tags) -> System.Collections.Generic.IEnumerable<Microsoft.Extensions.Telemetry.Testing.Metering.CollectedMeasurement<T>!>!
virtual Microsoft.Extensions.Telemetry.Testing.Logging.FakeLoggerProvider.Dispose(bool disposing) -> void
