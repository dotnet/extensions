// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Diagnostics;

namespace Microsoft.Extensions.EnumStrings;

/// <summary>
/// Provides information to guide the production of an extension method to efficiently convert an enum value into string form.
/// </summary>
[AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Enum, AllowMultiple = true)]
[Conditional("CODE_GENERATION_ATTRIBUTES")]
public sealed class EnumStringsAttribute : Attribute
{
    /// <summary>
    /// Initializes a new instance of the <see cref="EnumStringsAttribute"/> class.
    /// </summary>
    /// <remarks>
    /// Use this overload when directly annotating an enum type.
    /// </remarks>
    public EnumStringsAttribute()
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="EnumStringsAttribute"/> class.
    /// </summary>
    /// <param name="enumType">The type of the enum to work with.</param>
    /// <remarks>
    /// Use this overload when applying the attribute at the assembly level when working with an enum declared in a
    /// different assembly.
    /// </remarks>
    /// <example>
    /// <code>
    /// [assembly: EnumStrings(typeof(System.ConsoleKey))]
    /// </code>
    /// </example>
    public EnumStringsAttribute(Type enumType)
    {
        EnumType = enumType;
    }

    /// <summary>
    /// Gets the type of the enum to annotate.
    /// </summary>
    /// <remarks>
    /// This is <see langword="null" /> when the attribute is applied directly to an enum type.
    /// </remarks>
    public Type? EnumType { get; }

    /// <summary>
    /// Gets or sets the namespace of the generated class.
    /// </summary>
    /// <value>The default is <see langword="null" />.</value>
    /// <remarks>
    /// If <see langword="null"/>, then the class is generated in the same namespace as the enum.
    /// </remarks>
    public string? ExtensionNamespace { get; set; }

    /// <summary>
    /// Gets or sets the name of the generated class.
    /// </summary>
    /// <value>The default is <see langword="null"/>.</value>
    /// <remarks>
    /// If <see langword="null"/>, then the class name is generated by appending <c>Extensions</c> to the enum type name.
    /// </remarks>
    public string? ExtensionClassName { get; set; }

    /// <summary>
    /// Gets or sets the name of the generated extension method.
    /// </summary>
    /// <value>The default is <c>ToInvariantString</c>.</value>
    public string ExtensionMethodName { get; set; } = "ToInvariantString";

    /// <summary>
    /// Gets or sets the modifiers to apply to the generated class.
    /// </summary>
    /// <value>The default is <c>internal static</c>.</value>
    public string ExtensionClassModifiers { get; set; } = "internal static";
}
