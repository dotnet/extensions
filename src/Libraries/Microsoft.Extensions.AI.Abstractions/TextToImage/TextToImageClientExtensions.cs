// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Shared.Diagnostics;

namespace Microsoft.Extensions.AI;

/// <summary>Extensions for <see cref="ITextToImageClient"/>.</summary>
[Experimental("MEAI001")]
public static class TextToImageClientExtensions
{
    /// <summary>Asks the <see cref="ITextToImageClient"/> for an object of type <typeparamref name="TService"/>.</summary>
    /// <typeparam name="TService">The type of the object to be retrieved.</typeparam>
    /// <param name="client">The client.</param>
    /// <param name="serviceKey">An optional key that can be used to help identify the target service.</param>
    /// <returns>The found object, otherwise <see langword="null"/>.</returns>
    /// <exception cref="ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
    /// <remarks>
    /// The purpose of this method is to allow for the retrieval of strongly typed services that may be provided by the <see cref="ITextToImageClient"/>,
    /// including itself or any services it might be wrapping.
    /// </remarks>
    public static TService? GetService<TService>(this ITextToImageClient client, object? serviceKey = null)
    {
        _ = Throw.IfNull(client);

        return (TService?)client.GetService(typeof(TService), serviceKey);
    }

    /// <summary>
    /// Generates a new image based on a single original image and the specified prompt.
    /// </summary>
    /// <param name="client">The text-to-image client.</param>
    /// <param name="originalImage">The single image to base edits on.</param>
    /// <param name="prompt">The prompt to guide the image generation.</param>
    /// <param name="options">The text to image options to configure the request.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <exception cref="ArgumentNullException"><paramref name="client"/>, <paramref name="originalImage"/>, or <paramref name="prompt"/> are <see langword="null"/>.</exception>
    /// <returns>The images generated by the client.</returns>
    public static Task<TextToImageResponse> EditImageAsync(
        this ITextToImageClient client,
        DataContent originalImage,
        string prompt,
        TextToImageOptions? options = null,
        CancellationToken cancellationToken = default)
    {
        _ = Throw.IfNull(client);
        _ = Throw.IfNull(originalImage);
        _ = Throw.IfNull(prompt);

        return client.EditImagesAsync([originalImage], prompt, options, cancellationToken);
    }

    /// <summary>
    /// Generates a new image based on a single original image byte array and the specified prompt.
    /// </summary>
    /// <param name="client">The text-to-image client.</param>
    /// <param name="originalImageData">The byte array containing the image data to base edits on.</param>
    /// <param name="fileName">The filename for the image data.</param>
    /// <param name="prompt">The prompt to guide the image generation.</param>
    /// <param name="options">The text to image options to configure the request.</param>
    /// <param name="cancellationToken">The <see cref="CancellationToken"/> to monitor for cancellation requests. The default is <see cref="CancellationToken.None"/>.</param>
    /// <exception cref="ArgumentNullException">
    /// <paramref name="client"/>, <paramref name="originalImageData"/>, <paramref name="fileName"/>, 
    /// or <paramref name="prompt"/> are <see langword="null"/>.
    /// </exception>
    /// <returns>The images generated by the client.</returns>
    public static Task<TextToImageResponse> EditImageAsync(
        this ITextToImageClient client,
        byte[] originalImageData,
        string fileName,
        string prompt,
        TextToImageOptions? options = null,
        CancellationToken cancellationToken = default)
    {
        _ = Throw.IfNull(client);
        _ = Throw.IfNull(originalImageData);
        _ = Throw.IfNull(fileName);
        _ = Throw.IfNull(prompt);

        // Infer media type from file extension
        string mediaType = GetMediaTypeFromFileName(fileName);

        var dataContent = new DataContent(originalImageData, mediaType) { Name = fileName };
        return client.EditImagesAsync([dataContent], prompt, options, cancellationToken);
    }

    /// <summary>
    /// Gets the media type based on the file extension.
    /// </summary>
    /// <param name="fileName">The filename to extract the media type from.</param>
    /// <returns>The inferred media type.</returns>
    private static string GetMediaTypeFromFileName(string fileName)
    {
        string extension = Path.GetExtension(fileName).ToUpperInvariant();
        return extension switch
        {
            ".PNG" => "image/png",
            ".JPG" or ".JPEG" => "image/jpeg",
            ".WEBP" => "image/webp",
            ".GIF" => "image/gif",
            ".BMP" => "image/bmp",
            ".TIFF" or ".TIF" => "image/tiff",
            _ => "image/png" // Default to PNG if unknown
        };
    }
}
