<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <RootNamespace>Microsoft.Extensions.Telemetry</RootNamespace>
    <Description>Common abstractions for high-level telemetry primitives.</Description>
    <Workstream>Telemetry</Workstream>
  </PropertyGroup>

  <PropertyGroup>
    <InjectExperimentalAttributeOnLegacy>true</InjectExperimentalAttributeOnLegacy>
    <InjectSharedDiagnosticIds>true</InjectSharedDiagnosticIds>
    <InjectSharedPools>true</InjectSharedPools>
    <DisableSourceGeneratorPropertyName>DisableMicrosoftExtensionsTelemetrySourceGeneration</DisableSourceGeneratorPropertyName>
    <BuildAnalyzerReferences>true</BuildAnalyzerReferences>
  </PropertyGroup>

  <PropertyGroup>
    <Stage>normal</Stage>
    <MinCodeCoverage>100</MinCodeCoverage>
    <MinMutationScore>100</MinMutationScore>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\Microsoft.Extensions.Compliance.Abstractions\Microsoft.Extensions.Compliance.Abstractions.csproj" />
  </ItemGroup>

  <!--
    The .NET pre-defined props/targets that disable the Microsoft.Extensions.Logging.Abstractions source generator.
    This is needed because there are several ways Microsoft.Extensions.Logging.Abstractions source generator can be
    referenced in a .NET application (whether it's a console app or an ASP.NET Core app).

    For net462 we auto-generate the targets, see below and refer to eng/MSBuild/Packaging.targets for more details.
   -->
  <ItemGroup>
    <None Include="buildTransitive\**\*" CopyToOutputDirectory="PreserveNewest" Pack="true" PackagePath="buildTransitive\%(RecursiveDir)%(Filename)%(Extension)" />
  </ItemGroup>

  <!-- 
    For net462 we automatically add package buildtransitive target files, so we need to include
    the code that will disable the Microsoft.Extensions.Logging.Abstractions source generator.
    There's only one way how the generator can get referenced in net462, so there's no need for
    additional logic that's requires for .NET scenarios.

    For .NET we have pre-defined props/targets, see above.
   -->
  <PropertyGroup>
    <_AdditionalNETStandardCompatErrorFileContents>
<![CDATA[
  <!-- This package should replace the Microsoft.Extensions.Logging.Abstractions source generator, so we set the property to remove the source generator from the project. -->
  <PropertyGroup>
    <DisableMicrosoftExtensionsLoggingSourceGenerator>true</DisableMicrosoftExtensionsLoggingSourceGenerator>
  </PropertyGroup>
]]>
    </_AdditionalNETStandardCompatErrorFileContents>
  </PropertyGroup>

  <ItemGroup>
    <AnalyzerReference Include="..\..\Generators\Microsoft.Gen.Logging\Microsoft.Gen.Logging.csproj" />
    <AnalyzerReference Include="..\..\Generators\Microsoft.Gen.Metrics\Microsoft.Gen.Metrics.csproj" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Options" />
    <PackageReference Include="Microsoft.Extensions.Logging.Abstractions" />
    <PackageReference Include="System.Diagnostics.DiagnosticSource" />
    <PackageReference Include="Microsoft.Bcl.HashCode" Condition="!$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net6.0'))" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleToTest Include="$(AssemblyName).Tests" />
  </ItemGroup>

  <Target Name="_VerifyBuildTransitiveFolderName" BeforeTargets="Compile">
    <Error Text="'buildTransitive\$(MinimumSupportedTfmForPackaging)' does not exist" Condition="!Exists('$(MSBuildThisFileDirectory)\buildTransitive\$(MinimumSupportedTfmForPackaging)\$(AssemblyName).props')" />
  </Target>
</Project>
