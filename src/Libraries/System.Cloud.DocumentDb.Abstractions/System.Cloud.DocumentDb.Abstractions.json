{
  "Name": "System.Cloud.DocumentDb.Abstractions, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
  "Types": [
    {
      "Type": "readonly struct System.Cloud.DocumentDb.BatchItem<T>",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.BatchItem<T>.BatchItem(System.Cloud.DocumentDb.BatchOperation operation, T? item = default(T?), string? id = null, string? itemVersion = null);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.BatchItem<T>.BatchItem();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "string? System.Cloud.DocumentDb.BatchItem<T>.Id { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "T? System.Cloud.DocumentDb.BatchItem<T>.Item { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.BatchItem<T>.ItemVersion { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.BatchOperation System.Cloud.DocumentDb.BatchItem<T>.Operation { get; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "enum System.Cloud.DocumentDb.BatchOperation",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.BatchOperation.BatchOperation();",
          "Stage": "Experimental"
        }
      ],
      "Fields": [
        {
          "Member": "const System.Cloud.DocumentDb.BatchOperation System.Cloud.DocumentDb.BatchOperation.Create",
          "Stage": "Experimental",
          "Value": "0"
        },
        {
          "Member": "const System.Cloud.DocumentDb.BatchOperation System.Cloud.DocumentDb.BatchOperation.Delete",
          "Stage": "Experimental",
          "Value": "3"
        },
        {
          "Member": "const System.Cloud.DocumentDb.BatchOperation System.Cloud.DocumentDb.BatchOperation.Read",
          "Stage": "Experimental",
          "Value": "1"
        },
        {
          "Member": "const System.Cloud.DocumentDb.BatchOperation System.Cloud.DocumentDb.BatchOperation.Replace",
          "Stage": "Experimental",
          "Value": "2"
        },
        {
          "Member": "const System.Cloud.DocumentDb.BatchOperation System.Cloud.DocumentDb.BatchOperation.Upsert",
          "Stage": "Experimental",
          "Value": "4"
        }
      ]
    },
    {
      "Type": "enum System.Cloud.DocumentDb.ConsistencyLevel",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.ConsistencyLevel.ConsistencyLevel();",
          "Stage": "Experimental"
        }
      ],
      "Fields": [
        {
          "Member": "const System.Cloud.DocumentDb.ConsistencyLevel System.Cloud.DocumentDb.ConsistencyLevel.BoundedStaleness",
          "Stage": "Experimental",
          "Value": "1"
        },
        {
          "Member": "const System.Cloud.DocumentDb.ConsistencyLevel System.Cloud.DocumentDb.ConsistencyLevel.ConsistentPrefix",
          "Stage": "Experimental",
          "Value": "4"
        },
        {
          "Member": "const System.Cloud.DocumentDb.ConsistencyLevel System.Cloud.DocumentDb.ConsistencyLevel.Eventual",
          "Stage": "Experimental",
          "Value": "3"
        },
        {
          "Member": "const System.Cloud.DocumentDb.ConsistencyLevel System.Cloud.DocumentDb.ConsistencyLevel.Session",
          "Stage": "Experimental",
          "Value": "2"
        },
        {
          "Member": "const System.Cloud.DocumentDb.ConsistencyLevel System.Cloud.DocumentDb.ConsistencyLevel.Strong",
          "Stage": "Experimental",
          "Value": "0"
        }
      ]
    },
    {
      "Type": "class System.Cloud.DocumentDb.DatabaseClientException : System.Cloud.DocumentDb.DatabaseException",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.DatabaseClientException.DatabaseClientException();",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseClientException.DatabaseClientException(string message);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseClientException.DatabaseClientException(string message, System.Exception innerException);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "class System.Cloud.DocumentDb.DatabaseException : System.Exception",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.DatabaseException.DatabaseException();",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseException.DatabaseException(string message);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseException.DatabaseException(string message, System.Exception innerException);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseException.DatabaseException(string message, int statusCode, int subStatusCode, System.Cloud.DocumentDb.RequestInfo requestInfo);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseException.DatabaseException(string message, System.Exception innerException, int statusCode, int subStatusCode, System.Cloud.DocumentDb.RequestInfo requestInfo);",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "System.Net.HttpStatusCode System.Cloud.DocumentDb.DatabaseException.HttpStatusCode { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.RequestInfo System.Cloud.DocumentDb.DatabaseException.RequestInfo { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "int System.Cloud.DocumentDb.DatabaseException.StatusCode { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "int System.Cloud.DocumentDb.DatabaseException.SubStatusCode { get; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "class System.Cloud.DocumentDb.DatabaseOptions",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.DatabaseOptions.DatabaseOptions();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "string System.Cloud.DocumentDb.DatabaseOptions.DatabaseName { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.DatabaseOptions.DefaultRegionalDatabaseName { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Uri? System.Cloud.DocumentDb.DatabaseOptions.Endpoint { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Collections.Generic.IList<string> System.Cloud.DocumentDb.DatabaseOptions.FailoverRegions { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.TimeSpan? System.Cloud.DocumentDb.DatabaseOptions.IdleTcpConnectionTimeout { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Text.Json.JsonSerializerOptions System.Cloud.DocumentDb.DatabaseOptions.JsonSerializerOptions { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "bool System.Cloud.DocumentDb.DatabaseOptions.OverrideSerialization { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.DatabaseOptions.PrimaryKey { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Collections.Generic.IDictionary<string, System.Cloud.DocumentDb.RegionalDatabaseOptions> System.Cloud.DocumentDb.DatabaseOptions.RegionalDatabaseOptions { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.Throughput System.Cloud.DocumentDb.DatabaseOptions.Throughput { get; set; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "class System.Cloud.DocumentDb.DatabaseRetryableException : System.Cloud.DocumentDb.DatabaseException",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.DatabaseRetryableException.DatabaseRetryableException();",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseRetryableException.DatabaseRetryableException(string message);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseRetryableException.DatabaseRetryableException(string message, System.Exception innerException);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseRetryableException.DatabaseRetryableException(string message, System.Exception innerException, int statusCode, int subStatusCode, System.TimeSpan? retryAfter, System.Cloud.DocumentDb.RequestInfo requestInfo);",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "System.TimeSpan System.Cloud.DocumentDb.DatabaseRetryableException.RetryAfter { get; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "class System.Cloud.DocumentDb.DatabaseServerException : System.Cloud.DocumentDb.DatabaseException",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.DatabaseServerException.DatabaseServerException();",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseServerException.DatabaseServerException(string message);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseServerException.DatabaseServerException(string message, System.Exception innerException);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseServerException.DatabaseServerException(string message, System.Exception innerException, int statusCode, int subStatusCode, System.Cloud.DocumentDb.RequestInfo requestInfo);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.DatabaseServerException.DatabaseServerException(string message, int statusCode, int subStatusCode, System.Cloud.DocumentDb.RequestInfo requestInfo);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "enum System.Cloud.DocumentDb.FetchMode",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.FetchMode.FetchMode();",
          "Stage": "Experimental"
        }
      ],
      "Fields": [
        {
          "Member": "const System.Cloud.DocumentDb.FetchMode System.Cloud.DocumentDb.FetchMode.FetchAll",
          "Stage": "Experimental",
          "Value": "0"
        },
        {
          "Member": "const System.Cloud.DocumentDb.FetchMode System.Cloud.DocumentDb.FetchMode.FetchMaxResults",
          "Stage": "Experimental",
          "Value": "2"
        },
        {
          "Member": "const System.Cloud.DocumentDb.FetchMode System.Cloud.DocumentDb.FetchMode.FetchSinglePage",
          "Stage": "Experimental",
          "Value": "1"
        }
      ]
    },
    {
      "Type": "interface System.Cloud.DocumentDb.IDatabaseResponse",
      "Stage": "Experimental",
      "Properties": [
        {
          "Member": "string? System.Cloud.DocumentDb.IDatabaseResponse.ContinuationToken { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "int System.Cloud.DocumentDb.IDatabaseResponse.ItemCount { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.IDatabaseResponse.ItemVersion { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.RequestInfo System.Cloud.DocumentDb.IDatabaseResponse.RequestInfo { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "int System.Cloud.DocumentDb.IDatabaseResponse.Status { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "bool System.Cloud.DocumentDb.IDatabaseResponse.Succeeded { get; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface System.Cloud.DocumentDb.IDatabaseResponse<out T> : System.Cloud.DocumentDb.IDatabaseResponse where T : notnull",
      "Stage": "Experimental",
      "Properties": [
        {
          "Member": "T? System.Cloud.DocumentDb.IDatabaseResponse<T>.Item { get; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface System.Cloud.DocumentDb.IDocumentDatabase",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Threading.Tasks.Task System.Cloud.DocumentDb.IDocumentDatabase.ConnectAsync(bool createIfNotExists, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<System.Cloud.DocumentDb.TableOptions>> System.Cloud.DocumentDb.IDocumentDatabase.CreateTableAsync(System.Cloud.DocumentDb.TableOptions tableOptions, System.Cloud.DocumentDb.RequestOptions requestOptions, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<bool>> System.Cloud.DocumentDb.IDocumentDatabase.DeleteDatabaseAsync(System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<System.Cloud.DocumentDb.TableOptions>> System.Cloud.DocumentDb.IDocumentDatabase.DeleteTableAsync(System.Cloud.DocumentDb.TableOptions tableOptions, System.Cloud.DocumentDb.RequestOptions requestOptions, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.IDocumentReader<TDocument> System.Cloud.DocumentDb.IDocumentDatabase.GetDocumentReader<TDocument>(System.Cloud.DocumentDb.TableOptions options);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.IDocumentWriter<TDocument> System.Cloud.DocumentDb.IDocumentDatabase.GetDocumentWriter<TDocument>(System.Cloud.DocumentDb.TableOptions options);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<System.Cloud.DocumentDb.TableOptions>> System.Cloud.DocumentDb.IDocumentDatabase.ReadTableSettingsAsync(System.Cloud.DocumentDb.TableOptions tableOptions, System.Cloud.DocumentDb.RequestOptions requestOptions, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<bool>> System.Cloud.DocumentDb.IDocumentDatabase.UpdateTableSettingsAsync(System.Cloud.DocumentDb.TableOptions tableOptions, System.Cloud.DocumentDb.RequestOptions requestOptions, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface System.Cloud.DocumentDb.IDocumentDatabase<TContext> : System.Cloud.DocumentDb.IDocumentDatabase where TContext : class",
      "Stage": "Experimental"
    },
    {
      "Type": "interface System.Cloud.DocumentDb.IDocumentReader<TDocument> where TDocument : notnull",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<int>> System.Cloud.DocumentDb.IDocumentReader<TDocument>.CountDocumentsAsync(System.Cloud.DocumentDb.QueryRequestOptions<TDocument> options, System.Func<System.Linq.IQueryable<TDocument>, System.Linq.IQueryable<TDocument>>? condition, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<System.Collections.Generic.IReadOnlyList<TOutputDocument>>> System.Cloud.DocumentDb.IDocumentReader<TDocument>.FetchDocumentsAsync<TOutputDocument>(System.Cloud.DocumentDb.QueryRequestOptions<TDocument> options, System.Func<System.Linq.IQueryable<TDocument>, System.Linq.IQueryable<TOutputDocument>>? condition, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<System.Collections.Generic.IReadOnlyList<TDocument>>> System.Cloud.DocumentDb.IDocumentReader<TDocument>.QueryDocumentsAsync(System.Cloud.DocumentDb.QueryRequestOptions<TDocument> options, System.Cloud.DocumentDb.Query query, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<TDocument>> System.Cloud.DocumentDb.IDocumentReader<TDocument>.ReadDocumentAsync(System.Cloud.DocumentDb.RequestOptions<TDocument> requestOptions, string id, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface System.Cloud.DocumentDb.IDocumentWriter<TDocument> where TDocument : notnull",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<TDocument>> System.Cloud.DocumentDb.IDocumentWriter<TDocument>.CreateDocumentAsync(System.Cloud.DocumentDb.RequestOptions<TDocument> options, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<bool>> System.Cloud.DocumentDb.IDocumentWriter<TDocument>.DeleteDocumentAsync(System.Cloud.DocumentDb.RequestOptions<TDocument> options, string id, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<System.Collections.Generic.IReadOnlyList<System.Cloud.DocumentDb.IDatabaseResponse<TDocument>>>> System.Cloud.DocumentDb.IDocumentWriter<TDocument>.ExecuteTransactionalBatchAsync(System.Cloud.DocumentDb.RequestOptions<TDocument> requestOptions, System.Collections.Generic.IReadOnlyList<System.Cloud.DocumentDb.BatchItem<TDocument>> itemsToPerformTransactionalBatch, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<TDocument>> System.Cloud.DocumentDb.IDocumentWriter<TDocument>.InsertOrUpdateDocumentAsync(System.Cloud.DocumentDb.RequestOptions<TDocument> options, string id, System.Func<TDocument, TDocument> conflictResolveFunc, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<TDocument>> System.Cloud.DocumentDb.IDocumentWriter<TDocument>.PatchDocumentAsync(System.Cloud.DocumentDb.RequestOptions<TDocument> options, string id, System.Collections.Generic.IReadOnlyList<System.Cloud.DocumentDb.PatchOperation> patchOperations, string? filter, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<TDocument>> System.Cloud.DocumentDb.IDocumentWriter<TDocument>.ReplaceDocumentAsync(System.Cloud.DocumentDb.RequestOptions<TDocument> options, string id, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Threading.Tasks.Task<System.Cloud.DocumentDb.IDatabaseResponse<TDocument>> System.Cloud.DocumentDb.IDocumentWriter<TDocument>.UpsertDocumentAsync(System.Cloud.DocumentDb.RequestOptions<TDocument> options, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "interface System.Cloud.DocumentDb.ITableLocator",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.TableInfo? System.Cloud.DocumentDb.ITableLocator.LocateTable(in System.Cloud.DocumentDb.TableInfo options, System.Cloud.DocumentDb.RequestOptions request);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "readonly struct System.Cloud.DocumentDb.PatchOperation",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.PatchOperation.PatchOperation();",
          "Stage": "Experimental"
        },
        {
          "Member": "static System.Cloud.DocumentDb.PatchOperation System.Cloud.DocumentDb.PatchOperation.Add<T>(string path, T value);",
          "Stage": "Experimental"
        },
        {
          "Member": "static System.Cloud.DocumentDb.PatchOperation System.Cloud.DocumentDb.PatchOperation.Increment(string path, long value);",
          "Stage": "Experimental"
        },
        {
          "Member": "static System.Cloud.DocumentDb.PatchOperation System.Cloud.DocumentDb.PatchOperation.Increment(string path, double value);",
          "Stage": "Experimental"
        },
        {
          "Member": "static System.Cloud.DocumentDb.PatchOperation System.Cloud.DocumentDb.PatchOperation.Remove(string path);",
          "Stage": "Experimental"
        },
        {
          "Member": "static System.Cloud.DocumentDb.PatchOperation System.Cloud.DocumentDb.PatchOperation.Replace<T>(string path, T value);",
          "Stage": "Experimental"
        },
        {
          "Member": "static System.Cloud.DocumentDb.PatchOperation System.Cloud.DocumentDb.PatchOperation.Set<T>(string path, T value);",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "System.Cloud.DocumentDb.PatchOperationType System.Cloud.DocumentDb.PatchOperation.OperationType { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string System.Cloud.DocumentDb.PatchOperation.Path { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "object System.Cloud.DocumentDb.PatchOperation.Value { get; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "enum System.Cloud.DocumentDb.PatchOperationType",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.PatchOperationType.PatchOperationType();",
          "Stage": "Experimental"
        }
      ],
      "Fields": [
        {
          "Member": "const System.Cloud.DocumentDb.PatchOperationType System.Cloud.DocumentDb.PatchOperationType.Add",
          "Stage": "Experimental",
          "Value": "0"
        },
        {
          "Member": "const System.Cloud.DocumentDb.PatchOperationType System.Cloud.DocumentDb.PatchOperationType.Increment",
          "Stage": "Experimental",
          "Value": "4"
        },
        {
          "Member": "const System.Cloud.DocumentDb.PatchOperationType System.Cloud.DocumentDb.PatchOperationType.Remove",
          "Stage": "Experimental",
          "Value": "1"
        },
        {
          "Member": "const System.Cloud.DocumentDb.PatchOperationType System.Cloud.DocumentDb.PatchOperationType.Replace",
          "Stage": "Experimental",
          "Value": "2"
        },
        {
          "Member": "const System.Cloud.DocumentDb.PatchOperationType System.Cloud.DocumentDb.PatchOperationType.Set",
          "Stage": "Experimental",
          "Value": "3"
        }
      ]
    },
    {
      "Type": "readonly struct System.Cloud.DocumentDb.Query",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.Query.Query(string queryText, System.Collections.Generic.IReadOnlyDictionary<string, string> parameters);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.Query.Query(string queryText);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.Query.Query();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "System.Collections.Generic.IReadOnlyDictionary<string, string> System.Cloud.DocumentDb.Query.Parameters { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string System.Cloud.DocumentDb.Query.QueryText { get; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "class System.Cloud.DocumentDb.QueryRequestOptions<TDocument> : System.Cloud.DocumentDb.RequestOptions<TDocument> where TDocument : notnull",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.QueryRequestOptions<TDocument>.QueryRequestOptions();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "string? System.Cloud.DocumentDb.QueryRequestOptions<TDocument>.ContinuationToken { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "bool? System.Cloud.DocumentDb.QueryRequestOptions<TDocument>.EnableLowPrecisionOrderBy { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "bool? System.Cloud.DocumentDb.QueryRequestOptions<TDocument>.EnableScan { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.FetchMode System.Cloud.DocumentDb.QueryRequestOptions<TDocument>.FetchCondition { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "int? System.Cloud.DocumentDb.QueryRequestOptions<TDocument>.MaxBufferedItemCount { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "int? System.Cloud.DocumentDb.QueryRequestOptions<TDocument>.MaxConcurrency { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "int? System.Cloud.DocumentDb.QueryRequestOptions<TDocument>.MaxResults { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "int? System.Cloud.DocumentDb.QueryRequestOptions<TDocument>.ResponseContinuationTokenLimitInKb { get; set; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "class System.Cloud.DocumentDb.RegionalDatabaseOptions",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.RegionalDatabaseOptions.RegionalDatabaseOptions();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "string? System.Cloud.DocumentDb.RegionalDatabaseOptions.DatabaseName { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Uri? System.Cloud.DocumentDb.RegionalDatabaseOptions.Endpoint { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Collections.Generic.IList<string> System.Cloud.DocumentDb.RegionalDatabaseOptions.FailoverRegions { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.RegionalDatabaseOptions.PrimaryKey { get; set; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "readonly struct System.Cloud.DocumentDb.RequestInfo",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.RequestInfo.RequestInfo(string? region = null, string? tableName = null, double? cost = null, System.Uri? endpoint = null);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.RequestInfo.RequestInfo();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "double? System.Cloud.DocumentDb.RequestInfo.Cost { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Uri? System.Cloud.DocumentDb.RequestInfo.Endpoint { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.RequestInfo.Region { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.RequestInfo.TableName { get; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "class System.Cloud.DocumentDb.RequestOptions<TDocument> : System.Cloud.DocumentDb.RequestOptions where TDocument : notnull",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.RequestOptions<TDocument>.RequestOptions();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "TDocument? System.Cloud.DocumentDb.RequestOptions<TDocument>.Document { get; set; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "class System.Cloud.DocumentDb.RequestOptions",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.RequestOptions.RequestOptions();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "System.Cloud.DocumentDb.ConsistencyLevel? System.Cloud.DocumentDb.RequestOptions.ConsistencyLevel { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "bool System.Cloud.DocumentDb.RequestOptions.ContentResponseOnWrite { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.RequestOptions.ItemVersion { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Collections.Generic.IReadOnlyList<object?>? System.Cloud.DocumentDb.RequestOptions.PartitionKey { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.RequestOptions.Region { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.RequestOptions.SessionToken { get; set; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "readonly struct System.Cloud.DocumentDb.TableInfo",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.TableInfo.TableInfo(System.Cloud.DocumentDb.TableOptions options);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.TableInfo.TableInfo(in System.Cloud.DocumentDb.TableInfo info, string? tableNameOverride = null, bool? isRegionalOverride = null);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.TableInfo.TableInfo();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "bool System.Cloud.DocumentDb.TableInfo.IsLocatorRequired { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "bool System.Cloud.DocumentDb.TableInfo.IsRegional { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.TableInfo.PartitionIdPath { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string System.Cloud.DocumentDb.TableInfo.TableName { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.Throughput System.Cloud.DocumentDb.TableInfo.Throughput { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.TimeSpan System.Cloud.DocumentDb.TableInfo.TimeToLive { get; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "class System.Cloud.DocumentDb.TableOptions",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.TableOptions.TableOptions();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "bool System.Cloud.DocumentDb.TableOptions.IsLocatorRequired { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "bool System.Cloud.DocumentDb.TableOptions.IsRegional { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? System.Cloud.DocumentDb.TableOptions.PartitionIdPath { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string System.Cloud.DocumentDb.TableOptions.TableName { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.Throughput System.Cloud.DocumentDb.TableOptions.Throughput { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.TimeSpan System.Cloud.DocumentDb.TableOptions.TimeToLive { get; set; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "readonly struct System.Cloud.DocumentDb.Throughput",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "System.Cloud.DocumentDb.Throughput.Throughput(int? throughput);",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Cloud.DocumentDb.Throughput.Throughput();",
          "Stage": "Experimental"
        }
      ],
      "Fields": [
        {
          "Member": "static readonly System.Cloud.DocumentDb.Throughput System.Cloud.DocumentDb.Throughput.Unlimited",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "int? System.Cloud.DocumentDb.Throughput.Value { get; }",
          "Stage": "Experimental"
        }
      ]
    }
  ]
}