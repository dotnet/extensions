<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <SuppressFinalPackageVersion>true</SuppressFinalPackageVersion>

    <!-- Used for incremental builds. When versions or dependencies of templates change, this file is updated and causes a re-build. -->
    <_GeneratedContentPropertiesHashFile>$(IntermediateOutputPath)$(MSBuildProjectName).content.g.cache</_GeneratedContentPropertiesHashFile>
  </PropertyGroup>

  <ItemGroup>
    <!-- Provides the GenerateFileFromTemplate task. -->
    <PackageReference
      Include="Microsoft.DotNet.Build.Tasks.Templating"
      Version="$(MicrosoftDotNetBuildTasksTemplatingVersion)"
      AllowExplicitReference="true"
      PrivateAssets="All"
      IsImplicitlyDefined="true" />
  </ItemGroup>

  <!--
    Computes package version variables for projects defined in this repo that get
    referenced in generated template content.
    Instead of manually reproducing version values, it extracts the package version
    directly from each project.
  -->
  <Target Name="_GetPackageVersionVariables"
          DependsOnTargets="ComputePackageVersionVariableReferences">
    <MSBuild Projects="@(PackageVersionVariableReference)"
             BuildInParallel="true"
             Targets="_GetPackageVersionInfo">
      <Output TaskParameter="TargetOutputs" ItemName="_ResolvedPackageVersionInfo" />
    </MSBuild>

    <ItemGroup>
      <_ResolvedPackageVersionVariableReference Include="@(_ResolvedPackageVersionInfo)">
        <VersionVariableName>TemplatePackageVersion_$([System.String]::Copy('%(PackageId)').Replace('.', ''))</VersionVariableName>
      </_ResolvedPackageVersionVariableReference>
    </ItemGroup>

    <PropertyGroup>
      <GeneratedContentProperties>
        $(GeneratedContentProperties);
        <!-- Converts each package reference into a property assignment in the format 'TemplatePackageVersion_PackageName=Version'. -->
        @(_ResolvedPackageVersionVariableReference->'%(VersionVariableName)=%(PackageVersion)')
      </GeneratedContentProperties>
    </PropertyGroup>
  </Target>

  <!--
    Computes a hash from the properties passed through to the GenerateFileFromTemplate task
    in the _GenerateContent target.
    This hash is used to determine if the generated content needs to be re-generated.
  -->
  <Target Name="_ComputeGeneratedContentPropertiesHash"
          DependsOnTargets="ComputeGeneratedContentProperties;_GetPackageVersionVariables">
    <Hash ItemsToHash="$(GeneratedContentProperties)">
      <Output TaskParameter="HashResult" PropertyName="_GeneratedContentPropertiesHash" />
    </Hash>

    <WriteLinesToFile
      Overwrite="true"
      Lines="$(_GeneratedContentPropertiesHash)"
      File="$(_GeneratedContentPropertiesHashFile)"
      WriteOnlyWhenDifferent="true" />
  </Target>

  <!--
    Generates content files from template files specified via the GeneratedContent item group.
  -->
  <Target Name="_GenerateContent"
          DependsOnTargets="_ComputeGeneratedContentPropertiesHash"
          BeforeTargets="PrepareForBuild"
          Inputs="$(MSBuildAllProjects);$(_GeneratedContentPropertiesHashFile);@(GeneratedContent)"
          Outputs="@(GeneratedContent->'%(OutputPath)')">

    <ItemGroup>
      <GeneratedContent Remove="@(GeneratedContentToDelete)" />
    </ItemGroup>

    <Delete Files="@(GeneratedContentToDelete->'%(OutputPath)')" />

    <GenerateFileFromTemplate
      TemplateFile="%(GeneratedContent.Identity)"
      Properties="$(GeneratedContentProperties);%(GeneratedContent.AdditionalProperties)"
      OutputPath="%(GeneratedContent.OutputPath)">

      <Output TaskParameter="ResolvedOutputPath" ItemName="FileWrites" />
      <Output TaskParameter="ResolvedOutputPath" ItemName="Content" />
    </GenerateFileFromTemplate>
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)..\GeneratedContent.targets" />

</Project>
