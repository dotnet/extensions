using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using ModelContextProtocol.Server;
using System.ComponentModel;

var builder = Host.CreateApplicationBuilder(args);

if (args.Length == 0 || args[0] != "start-mcp")
{
    Console.Error.WriteLine("Error: invalid command. Use the 'start-mcp' command-line argument to start the MCP server.");
    return 1;
}

var maxNumberEnv = Environment.GetEnvironmentVariable("MAX_RANDOM_NUMBER");
if (!int.TryParse(maxNumberEnv, out var maxNumber) || maxNumber <= 0)
{
    Console.Error.WriteLine("Error: you must set the MAX_RANDOM_NUMBER environment variable to a positive integer.");
    return 1;
}

builder.Logging.AddConsole(consoleLogOptions =>
{
    // Configure all logs to go to stderr (stdout is used for the MCP protocol messages).
    consoleLogOptions.LogToStandardErrorThreshold = LogLevel.Trace;
});

// add the MCP services, discover tools from the current assembly
builder.Services
    .AddMcpServer()
    .WithStdioServerTransport()
    .WithTools<RandomNumberTool>();

// add dependencies for the MCP server tools
builder.Services.AddSingleton(_ => new RandomNumberService(maxNumber));

await builder.Build().RunAsync();
return 0;

public class RandomNumberService(int max)
{
    public int Max => max;
    public int GetRandomNumber() => Random.Shared.Next(1, max + 1);
}

public class RandomNumberTool(RandomNumberService service)
{
    [McpServerTool, Description("Returns the maximum random number that can be generated by the tool.")]
    public int MaxRandomNumber()
    {
        return service.Max;
    }

    [McpServerTool, Description("Returns a random number between 1 and the maximum number allowed by the tool.")]
    public int GetRandomNumber()
    {
        return service.GetRandomNumber();
    }
}
