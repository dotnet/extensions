@inject IJSRuntime JS

<div class="message-list-container">
    <chat-messages class="page-width message-list" in-progress="@isInProgress">
        @foreach (var message in Messages)
        {
            <ChatMessageItem @key="@message" Message="@message" />
        }

        @if (isInProgress)
        {
            foreach (var content in inProgressContents)
            {
                <ChatAssistantContentItem Content="@content" />
            }

            if (inProgressText is { Length: > 0 })
            {
                <ChatAssistantContentItem Text="@inProgressText" />
            }

            <LoadingSpinner />
        }
        else if (IsEmpty)
        {
            <div class="no-messages">@NoMessagesContent</div>
        }
    </chat-messages>
</div>

@code {
    private readonly List<AIContent> inProgressContents = new();
    private string? inProgressText;
    private bool isInProgress;

    [Parameter, EditorRequired]
    public required IEnumerable<ChatMessage> Messages { get; set; }

    [Parameter]
    public RenderFragment? NoMessagesContent { get; set; }

    private bool IsEmpty => !Messages.Any(m => (m.Role == ChatRole.User || m.Role == ChatRole.Assistant) && !string.IsNullOrEmpty(m.Text));

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Activates the auto-scrolling behavior
            await JS.InvokeVoidAsync("import", "./Components/Pages/Chat/ChatMessageList.razor.js");
        }
    }

    public void AddStreamingResponseUpdate(ChatResponseUpdate update)
    {
        isInProgress = true;

        foreach (var content in update.Contents)
        {
            if (content is not TextContent)
            {
                inProgressContents.Add(content);
            }
        }

        inProgressText += update.Text;

        StateHasChanged();
    }

    public void ClearStreamingResponseUpdates()
    {
        isInProgress = false;
        inProgressContents.Clear();
        inProgressText = null;

        StateHasChanged();
    }
}
