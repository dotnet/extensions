<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorApiMethodMoreThanOneAttributeMessage" xml:space="preserve">
    <value>An API method must not contain more than one REST method attribute</value>
  </data>
  <data name="ErrorApiMethodMoreThanOneAttributeTitle" xml:space="preserve">
    <value>An API method must not contain more than one REST method attribute</value>
  </data>
  <data name="ErrorClientMustNotBeNestedMessage" xml:space="preserve">
    <value>API client interfaces must not be nested types</value>
  </data>
  <data name="ErrorClientMustNotBeNestedTitle" xml:space="preserve">
    <value>API client interfaces must not be nested types</value>
  </data>
  <data name="ErrorDuplicateBodyMessage" xml:space="preserve">
    <value>A Body is already defined for this method</value>
  </data>
  <data name="ErrorDuplicateBodyTitle" xml:space="preserve">
    <value>Duplicate body attribute</value>
  </data>
  <data name="ErrorDuplicateCancellationTokenMessage" xml:space="preserve">
    <value>A REST API method must not receive more than one cancellation token</value>
  </data>
  <data name="ErrorDuplicateCancellationTokenTitle" xml:space="preserve">
    <value>REST API method has more than one cancellation token</value>
  </data>
  <data name="ErrorDuplicateRequestNameMessage" xml:space="preserve">
    <value>The request name '{0}' is already in use within this REST API client.</value>
  </data>
  <data name="ErrorDuplicateRequestNameTitle" xml:space="preserve">
    <value>A REST API method's request name must be unique</value>
  </data>
  <data name="ErrorInterfaceIsGenericMessage" xml:space="preserve">
    <value>The API interface cannot be generic</value>
  </data>
  <data name="ErrorInterfaceIsGenericTitle" xml:space="preserve">
    <value>The API interface cannot be generic</value>
  </data>
  <data name="ErrorInterfaceNameMessage" xml:space="preserve">
    <value>Invalid API interface name. It should start with an 'I'</value>
  </data>
  <data name="ErrorInterfaceNameTitle" xml:space="preserve">
    <value>Invalid API interface name</value>
  </data>
  <data name="ErrorInvalidDependencyNameMessage" xml:space="preserve">
    <value>An unsupported character was used in the dependency name</value>
  </data>
  <data name="ErrorInvalidDependencyNameTitle" xml:space="preserve">
    <value>Invalid dependency name</value>
  </data>
  <data name="ErrorInvalidHeaderNameMessage" xml:space="preserve">
    <value>An unsupported character was used in the header name</value>
  </data>
  <data name="ErrorInvalidHeaderNameTitle" xml:space="preserve">
    <value>Invalid header name</value>
  </data>
  <data name="ErrorInvalidHeaderValueMessage" xml:space="preserve">
    <value>An unsupported character was used in the header value</value>
  </data>
  <data name="ErrorInvalidHeaderValueTitle" xml:space="preserve">
    <value>Invalid header value</value>
  </data>
  <data name="ErrorInvalidHttpClientNameMessage" xml:space="preserve">
    <value>An unsupported character was used in the HttpClient name</value>
  </data>
  <data name="ErrorInvalidHttpClientNameTitle" xml:space="preserve">
    <value>Invalid HttpClient name</value>
  </data>
  <data name="ErrorInvalidMethodNameMessage" xml:space="preserve">
    <value>API method names cannot start with _</value>
  </data>
  <data name="ErrorInvalidMethodNameTitle" xml:space="preserve">
    <value>API method names can't start with an underscore</value>
  </data>
  <data name="ErrorInvalidParameterNameMessage" xml:space="preserve">
    <value>API parameter names cannot start with _</value>
  </data>
  <data name="ErrorInvalidParameterNameTitle" xml:space="preserve">
    <value>API parameter names can't start with an underscore</value>
  </data>
  <data name="ErrorInvalidPathMessage" xml:space="preserve">
    <value>An unsupported character was used in the REST method path</value>
  </data>
  <data name="ErrorInvalidPathTitle" xml:space="preserve">
    <value>Invalid REST method path</value>
  </data>
  <data name="ErrorInvalidRequestNameMessage" xml:space="preserve">
    <value>An unsupported character was used in the request name</value>
  </data>
  <data name="ErrorInvalidRequestNameTitle" xml:space="preserve">
    <value>Invalid request name</value>
  </data>
  <data name="ErrorInvalidReturnTypeMessage" xml:space="preserve">
    <value>An API method return type must be of type Task&lt;T&gt;. T must not be nullable.</value>
  </data>
  <data name="ErrorInvalidReturnTypeTitle" xml:space="preserve">
    <value>Invalid API method return type</value>
  </data>
  <data name="ErrorMethodIsGenericMessage" xml:space="preserve">
    <value>API methods cannot be generic</value>
  </data>
  <data name="ErrorMethodIsGenericTitle" xml:space="preserve">
    <value>API methods can't be generic</value>
  </data>
  <data name="ErrorMissingCancellationTokenMessage" xml:space="preserve">
    <value>A REST API method must receive a CancellationToken parameter</value>
  </data>
  <data name="ErrorMissingCancellationTokenTitle" xml:space="preserve">
    <value>Missing CancellationToken from REST API method</value>
  </data>
  <data name="ErrorMissingMethodAttributeMessage" xml:space="preserve">
    <value>An HTTP method is missing for this API method</value>
  </data>
  <data name="ErrorMissingMethodAttributeTitle" xml:space="preserve">
    <value>HTTP method missing</value>
  </data>
  <data name="ErrorMissingParameterUrlMessage" xml:space="preserve">
    <value>The parameter '{0}' is missing in the URL</value>
  </data>
  <data name="ErrorMissingParameterUrlTitle" xml:space="preserve">
    <value>URL parameter missing from path</value>
  </data>
  <data name="ErrorPathWithQueryMessage" xml:space="preserve">
    <value>An API method path must not contain '?'. Queries should be defined using the [Query] attribute.</value>
  </data>
  <data name="ErrorPathWithQueryTitle" xml:space="preserve">
    <value>API method path should not contain query</value>
  </data>
  <data name="ErrorStaticMethodMessage" xml:space="preserve">
    <value>API methods must not be static</value>
  </data>
  <data name="ErrorStaticMethodTitle" xml:space="preserve">
    <value>API methods must not be static</value>
  </data>
  <data name="ErrorUnsupportedMethodBodyMessage" xml:space="preserve">
    <value>The '{0}' HTTP method does not support the body tag</value>
  </data>
  <data name="ErrorUnsupportedMethodBodyTitle" xml:space="preserve">
    <value>The current HTTP method does not support the body tag</value>
  </data>
  <data name="WarningRestClientWithoutRestMethodsMessage" xml:space="preserve">
    <value>REST API client does not have methods defined. This will render the client class useless.</value>
  </data>
  <data name="WarningRestClientWithoutRestMethodsTitle" xml:space="preserve">
    <value>REST API client does not have methods defined</value>
  </data>
</root>
