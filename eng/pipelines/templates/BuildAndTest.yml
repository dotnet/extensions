parameters:
  - name: buildScript
    type: string
  - name: buildConfig
    type: string
  - name: repoLogPath
    type: string
  - name: repoTestResultsPath
    type: string
  - name: isWindows
    type: string
  - name: skipTests
    type: boolean
    default: false
  - name: skipQualityGates
    type: boolean
    default: false
  - name: warnAsError
    type: number
    default: 1

steps:
  - task: PowerShell@2
    displayName: Setup Private Feeds Credentials
    condition: eq(variables['Agent.OS'], 'Windows_NT')
    inputs:
      filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.ps1
      arguments: -ConfigFile $(Build.SourcesDirectory)/NuGet.config -Password $Env:Token
    env:
      Token: $(dn-bot-dnceng-artifact-feeds-rw)

  - task: Bash@3
    displayName: Setup Private Feeds Credentials
    inputs:
      filePath: $(Build.SourcesDirectory)/eng/common/SetupNugetSources.sh
      arguments: $(Build.SourcesDirectory)/NuGet.config $Token
    condition: ne(variables['Agent.OS'], 'Windows_NT')
    env:
      Token: $(dn-bot-dnceng-artifact-feeds-rw)

  - script: ${{ parameters.buildScript }}
            -restore
            /bl:${{ parameters.repoLogPath }}/restore.binlog
    displayName: Restore

  - pwsh: |
        $(Build.SourcesDirectory)/scripts/Slngen.ps1 -All -NoLaunch
    displayName: Create solution

  - script: ${{ parameters.buildScript }}
            -restore
            /bl:${{ parameters.repoLogPath }}/restore2.binlog
    displayName: Restore solution

  - script: ${{ parameters.buildScript }}
            -build
            -configuration ${{ parameters.buildConfig }}
            -warnAsError ${{ parameters.warnAsError }}
            /bl:${{ parameters.repoLogPath }}/build.binlog
            $(_OfficialBuildIdArgs)
    displayName: Build

  - ${{ if ne(parameters.skipTests, 'true') }}:
    - script: $(Build.SourcesDirectory)/.dotnet/dotnet dotnet-coverage collect
              --settings $(Build.SourcesDirectory)/eng/CodeCoverage.config
              --output ${{ parameters.repoTestResultsPath }}/$(Agent.Os)_$(Agent.JobName).cobertura.xml
              "${{ parameters.buildScript }} -test -configuration ${{ parameters.buildConfig }} /bl:${{ parameters.repoLogPath }}/tests.binlog $(_OfficialBuildIdArgs)"
      displayName: Run tests

    - pwsh: |
        Get-ChildItem ${{ parameters.repoTestResultsPath }} -Include "*_hangdump.dmp","Sequence_*.xml" -Recurse | `
            ForEach-Object {
                $sourceFolder = $_.Directory.Name;
                # The folder must be a GUID, see https://learn.microsoft.com/dotnet/core/tools/dotnet-test#options
                $not_used = [System.Guid]::Empty;
                if ([System.Guid]::TryParse($sourceFolder, [System.Management.Automation.PSReference]$not_used)) {
                    $destinationFolder = $(New-Item -Path ${{ parameters.repoLogPath }} -Name $sourceFolder -ItemType "Directory" -Force).FullName;
                    $destination = "$destinationFolder\$($_.Name)";
                    Copy-Item -Path $_.FullName -Destination $destination -Force;
                }
            }
      displayName: Copy crash results to logs
      condition: always()
      continueOnError: true

    - ${{ if ne(parameters.skipQualityGates, 'true') }}:
      - task: PublishBuildArtifacts@1
        displayName: Publish coverage results (cobertura.xml)
        inputs:
          PathtoPublish: '${{ parameters.repoTestResultsPath }}/$(Agent.Os)_$(Agent.JobName).cobertura.xml'
          PublishLocation: Container
          ArtifactName: CodeCoverageResults

  - ${{ if eq(parameters.isWindows, 'true') }}:
    - script: ${{ parameters.buildScript }}
              -projects $(Build.SourcesDirectory)/src/Packages/Microsoft.Internal.Extensions.DotNetApiDocs.Transport/Microsoft.Internal.Extensions.DotNetApiDocs.Transport.proj
              -restore -build
              -pack
              -publish $(_PublishArgs)
              -configuration ${{ parameters.buildConfig }}
              /bl:${{ parameters.repoLogPath }}/transport.binlog
              $(_OfficialBuildIdArgs)
      displayName: Build and publish docs transport package

    - script: ${{ parameters.buildScript }}
              -pack
              -sign $(_SignArgs)
              -publish $(_PublishArgs)
              -configuration ${{ parameters.buildConfig }}
              -warnAsError 1
              /bl:${{ parameters.repoLogPath }}/pack.binlog
              /p:Restore=false /p:Build=false
              $(_OfficialBuildIdArgs)
      displayName: Pack, sign, and publish
