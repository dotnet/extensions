Origin:
  AssemblyName: SonarAnalyzer.CSharp
  Version: 9.12.0.78982
Diagnostics:
  S100:
    Metadata:
      Category: Minor Code Smell
      Title: Methods and properties should be named in PascalCase
      Description: Shared naming conventions allow teams to collaborate efficiently.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-100
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: IDE1006
  S1006:
    Metadata:
      Category: Critical Code Smell
      Title: Method overrides should not change parameter defaults
      Description: Default arguments are determined by the static type of the object.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1006
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S101:
    Metadata:
      Category: Minor Code Smell
      Title: Types should be named in PascalCase
      Description: Shared naming conventions allow teams to collaborate efficiently.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-101
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: IDE1006
  S103:
    Metadata:
      Category: Major Code Smell
      Title: Lines should not be too long
      Description: Scrolling horizontally to see a full line of code lowers the code readability.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-103
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S104:
    Metadata:
      Category: Major Code Smell
      Title: Files should not have too many lines of code
      Description: When a source file grows too much, it can accumulate numerous responsibilities and become challenging to understand and maintain.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-104
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1048:
    Metadata:
      Category: Blocker Bug
      Title: Finalizers should not throw exceptions
      Description: The finalizers are used to perform any necessary final clean-up when the garbage collector is collecting a class instance. The programmer has no control over when the finalizer is called; the garbage collector decides when to call it.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1048
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1065
  S105:
    Metadata:
      Category: Minor Code Smell
      Title: Tabulation characters should not be used
      Description: The tab width can differ from one development environment to another. Using tabs may require other developers to configure their environment (text editor, preferences, etc.) to read source code.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-105
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: SA1027
  S106:
    Metadata:
      Category: Major Code Smell
      Title: Standard outputs should not be used directly to log anything
      Description: 'When logging a message there are several important requirements which must be fulfilled:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-106
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
      production:
        Severity: Warning
  S1066:
    Metadata:
      Category: Major Code Smell
      Title: Collapsible "if" statements should be merged
      Description: Merging collapsible if statements increases the code’s readability.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1066
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
  S1067:
    Metadata:
      Category: Critical Code Smell
      Title: Expressions should not be too complex
      Description: 'The complexity of an expression is defined by the number of &&, || and condition ? ifTrue : ifFalse operators it contains.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1067
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S107:
    Metadata:
      Category: Major Code Smell
      Title: Methods should not have too many parameters
      Description: Methods with a long parameter list are difficult to use, as maintainers must figure out the role of each parameter and keep track of their position.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-107
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S1075:
    Metadata:
      Category: Minor Code Smell
      Title: URIs should not be hardcoded
      Description: 'Hardcoding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems usually differ from the development environment, …​etc. For all those reasons, a URI should never be hardcoded. Instead, it should be replaced by customizable parameter.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1075
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S108:
    Metadata:
      Category: Major Code Smell
      Title: Nested blocks of code should not be left empty
      Description: An empty code block is confusing. It will require some effort from maintainers to determine if it is intentional or indicates the implementation is incomplete.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-108
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S109:
    Metadata:
      Category: Major Code Smell
      Title: Magic numbers should not be used
      Description: A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the number of iterations of a loop, to test the value of a property, etc.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-109
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S110:
    Metadata:
      Category: Major Code Smell
      Title: Inheritance tree of classes should not be too deep
      Description: Inheritance is one of the most valuable concepts in object-oriented programming. It’s a way to categorize and reuse code by creating collections of attributes and behaviors called classes, which can be based on previously created classes.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-110
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S1104:
    Metadata:
      Category: Minor Code Smell
      Title: Fields should not have public accessibility
      Description: 'Public fields in public classes do not respect the encapsulation principle and has three main disadvantages:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1104
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1051
  S1109:
    Metadata:
      Category: Minor Code Smell
      Title: A close curly brace should be located at the beginning of a line
      Description: Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1109
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: SA1500
  S1110:
    Metadata:
      Category: Major Code Smell
      Title: Redundant pairs of parentheses should be removed
      Description: The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But redundant pairs of parentheses could be misleading, and should be removed.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1110
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: SA1119
  S1116:
    Metadata:
      Category: Minor Code Smell
      Title: Empty statements should be removed
      Description: 'Empty statements, i.e. ;, are usually introduced by mistake, for example because:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1116
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: SA1106
  S1117:
    Metadata:
      Category: Major Code Smell
      Title: Local variables should not shadow class fields or properties
      Description: Overriding or shadowing a field or a property declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code. Developers may mistakenly assume they are modifying or accessing the class field/property when, in fact, they are working with the local variable.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1117
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1118:
    Metadata:
      Category: Major Code Smell
      Title: Utility classes should not have public constructors
      Description: Utility classes, which are collections of static members, are not meant to be instantiated.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1118
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1052
  S112:
    Metadata:
      Category: Major Code Smell
      Title: General exceptions should never be thrown
      Description: Throwing such general exceptions as Exception, SystemException, ApplicationException, IndexOutOfRangeException, NullReferenceException, OutOfMemoryException and ExecutionEngineException prevents calling methods from handling true, system-generated exceptions differently than application-generated errors.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-112
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA2219
  S1121:
    Metadata:
      Category: Major Code Smell
      Title: Assignments should not be made from within sub-expressions
      Description: Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have side-effects.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1121
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1123:
    Metadata:
      Category: Major Code Smell
      Title: '"Obsolete" attributes should include explanations'
      Description: The Obsolete attribute can be applied with or without a message argument. Marking something Obsolete without including advice on why it’s obsolete or what to use instead will lead maintainers to waste time trying to figure those things out.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1123
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1041
  S1125:
    Metadata:
      Category: Minor Code Smell
      Title: Boolean literals should not be redundant
      Description: Redundant Boolean literals should be removed from expressions to improve readability.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1125
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1128:
    Metadata:
      Category: Minor Code Smell
      Title: Unused "using" should be removed
      Description: 'Although unnecessary using won’t change anything to the produced application, removing them:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1128
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S113:
    Metadata:
      Category: Minor Code Smell
      Title: Files should contain an empty newline at the end
      Description: Some tools work better when files end with an empty line.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-113
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
  S1134:
    Metadata:
      Category: Major Code Smell
      Title: Track uses of "FIXME" tags
      Description: FIXME tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1134
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S1135:
    Metadata:
      Category: Info Code Smell
      Title: Track uses of "TODO" tags
      Description: Developers often use TOOO tags to mark areas in the code where additional work or improvements are needed but are not implemented immediately. However, these TODO tags sometimes get overlooked or forgotten, leading to incomplete or unfinished code. This code smell class aims to identify and address such unattended TODO tags to ensure a clean and maintainable codebase. This description will explore why this is a problem and how it can be fixed to improve the overall code quality.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1135
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1144:
    Metadata:
      Category: Major Code Smell
      Title: Unused private types or members should be removed
      Description: 'private or internal types or private members that are never executed or referenced are unused code: unnecessary, inoperative code that should be removed.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1144
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1145:
    Metadata:
      Category: Major Bug
      Title: Useless "if(true) {...}" and "if(false){...}" blocks should be removed
      Description: if statements with conditions that are always false have the effect of making blocks of code non-functional. if statements with conditions that are always true are completely redundant, and make the code less readable.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1145
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1147:
    Metadata:
      Category: Blocker Code Smell
      Title: Exit methods should not be called
      Description: Calling Environment.Exit(exitCode) or Application.Exit() terminates the process and returns an exit code to the operating system..
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1147
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1151:
    Metadata:
      Category: Major Code Smell
      Title: '"switch case" clauses should not have too many lines of code'
      Description: The switch statement should be used only to clearly define some new branches in the control flow. As soon as a case clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the case clause should be extracted into a dedicated method.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1151
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
  S1155:
    Metadata:
      Category: Minor Code Smell
      Title: '"Any()" should be used to test for emptiness'
      Description: 'Using .Count() to test for emptiness works, but using .Any() makes the intent clearer, and the code more readable. However, there are some cases where special attention should be paid:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1155
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S1163:
    Metadata:
      Category: Critical Code Smell
      Title: Exceptions should not be thrown in finally blocks
      Description: If an exception is already being thrown within the try block or caught in a catch block, throwing another exception in the finally block will override the original exception. This means that the original exception’s message and stack trace will be lost, potentially making it challenging to diagnose and troubleshoot the root cause of the problem.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1163
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA2219
  S1168:
    Metadata:
      Category: Major Code Smell
      Title: Empty arrays and collections should be returned instead of null
      Description: Returning null or default instead of an actual collection forces the method callers to explicitly test for null, making the code more complex and less readable.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1168
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1172:
    Metadata:
      Category: Major Code Smell
      Title: Unused method parameters should be removed
      Description: Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1172
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: IDE0060
  S1185:
    Metadata:
      Category: Minor Code Smell
      Title: Overriding members should do more than simply call the same member in the base class
      Description: Overriding a method just to call the same method from the base class without performing any other actions is useless and misleading. The only time this is justified is in sealed overriding methods, where the effect is to lock in the parent class behavior. This rule ignores overrides of Equals and GetHashCode.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1185
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S1186:
    Metadata:
      Category: Critical Code Smell
      Title: Methods should not be empty
      Description: An empty method is generally considered bad practice and can lead to confusion, readability, and maintenance issues. Empty methods bring no functionality and are misleading to others as they might think the method implementation fulfills a specific and identified requirement.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1186
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1192:
    Metadata:
      Category: Minor Code Smell
      Title: String literals should not be duplicated
      Description: Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1192
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Suggestion
  S1199:
    Metadata:
      Category: Minor Code Smell
      Title: Nested code blocks should not be used
      Description: Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1199
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S1200:
    Metadata:
      Category: Major Code Smell
      Title: Classes should not be coupled to too many other classes
      Description: 'According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should have only one responsibility:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1200
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S1206:
    Metadata:
      Category: Minor Bug
      Title: '"Equals(Object)" and "GetHashCode()" should be overridden in pairs'
      Description: Suppose you override Object.Equals in a type, you must also override Object.GetHashCode. If two objects are equal according to the Equals method, then calling GetHashCode on each of them must yield the same integer. If this is not the case, many collections, such as a Hashtable or a Dictionary won’t handle class instances correctly.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1206
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CS0659
  S121:
    Metadata:
      Category: Critical Code Smell
      Title: Control structures should use curly braces
      Description: Control structures are code statements that impact the program’s control flow (e.g., if statements, for loops, etc.)
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-121
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: SA1503
  S1210:
    Metadata:
      Category: Minor Code Smell
      Title: '"Equals" and the comparison operators should be overridden when implementing "IComparable"'
      Description: When you implement IComparable or IComparable<T> on a class you should also override Equals(object) and overload the comparison operators (==, !=, <, <=, >, >=). That’s because the CLR cannot automatically call your CompareTo implementation from Equals(object) or from the base comparison operator implementations. Additionally, it is best practice to override GetHashCode along with Equals.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1210
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1036
  S1215:
    Metadata:
      Category: Critical Code Smell
      Title: '"GC.Collect" should not be called'
      Description: GC.Collect is a method that forces or suggests to the garbage collector to run a collection of objects in the managed heap that are no longer being used and free their memory.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1215
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S122:
    Metadata:
      Category: Major Code Smell
      Title: Statements should be on separate lines
      Description: Putting multiple statements on a single line lowers the code readability and makes debugging the code more complex.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-122
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S1226:
    Metadata:
      Category: Minor Bug
      Title: Method parameters, caught exceptions and foreach variables' initial values should not be ignored
      Description: While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug. Instead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as final, then at least read before reassignment.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1226
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1227:
    Metadata:
      Category: Minor Code Smell
      Title: break statements should not be used except for switch cases
      Description: break; is an unstructured control flow statement which makes code harder to read.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1227
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S1244:
    Metadata:
      Category: Major Bug
      Title: Floating point numbers should not be tested for equality
      Description: Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is not associative; push a float or a double through a series of simple mathematical operations and the answer will be different based on the order of those operation because of the rounding that takes place at each step.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1244
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Error
  S125:
    Metadata:
      Category: Major Code Smell
      Title: Sections of code should not be commented out
      Description: Programmers should not comment out code as it bloats programs and reduces readability.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-125
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S126:
    Metadata:
      Category: Critical Code Smell
      Title: '"if ... else if" constructs should end with "else" clauses'
      Description: This rule applies whenever an if statement is followed by one or more else if statements; the final else if should be followed by an else statement.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-126
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S1264:
    Metadata:
      Category: Minor Code Smell
      Title: A "while" loop should be used instead of a "for" loop
      Description: When only the condition expression is defined in a for loop, and the initialization and increment expressions are missing, a while loop should be used instead to increase readability.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1264
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S127:
    Metadata:
      Category: Major Code Smell
      Title: '"for" loop stop conditions should be invariant'
      Description: A for loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-127
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1301:
    Metadata:
      Category: Minor Code Smell
      Title: '"switch" statements should have at least 3 "case" clauses'
      Description: switch statements and expressions are useful when there are many different cases depending on the value of the same expression.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1301
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
  S1309:
    Metadata:
      Category: Info Code Smell
      Title: Track uses of in-source issue suppressions
      Description: 'This rule allows you to track the usage of the SuppressMessage attributes and #pragma warning disable mechanism.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1309
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: Suppressions are frequently necessary.
  S131:
    Metadata:
      Category: Critical Code Smell
      Title: '"switch/Select" statements should contain a "default/Case Else" clauses'
      Description: The requirement for a final default clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. Even when the switch covers all current values of an enum, a default case should still be used because there is no guarantee that the enum won’t be extended.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-131
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S1313:
    Metadata:
      Category: Major Security Hotspot
      Title: Using hardcoded IP addresses is security-sensitive
      Description: 'Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1313
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S134:
    Metadata:
      Category: Critical Code Smell
      Title: Control flow statements "if", "switch", "for", "foreach", "while", "do"  and "try" should not be nested too deeply
      Description: Nested if, switch, for, foreach, while, do, and try statements are key ingredients for making what’s known as "Spaghetti code".
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-134
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S138:
    Metadata:
      Category: Major Code Smell
      Title: Functions should not have too many lines of code
      Description: A function that grows too large tends to aggregate too many responsibilities.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-138
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
  S1449:
    Metadata:
      Category: Minor Code Smell
      Title: Culture should be specified for "string" operations
      Description: string.ToLower(), ToUpper, IndexOf, LastIndexOf, and Compare are all culture-dependent, as are some (floating point number and DateTime-related) calls to ToString. Fortunately, all have variants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the system default culture, possibly creating problems with international characters.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1449
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1450:
    Metadata:
      Category: Minor Code Smell
      Title: Private fields only used as local variables in methods should become local variables
      Description: When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1450
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1451:
    Metadata:
      Category: Blocker Code Smell
      Title: Track lack of copyright and license headers
      Description: Each source file should start with a header stating file ownership and the license which must be used to distribute the application.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1451
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: IDE0073
  S1479:
    Metadata:
      Category: Major Code Smell
      Title: '"switch" statements should not have too many "case" clauses'
      Description: When switch statements have large sets of case clauses, it is usually an attempt to map two sets of data. A Dictionary should be used instead to make the code more readable and maintainable.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1479
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1481:
    Metadata:
      Category: Minor Code Smell
      Title: Unused local variables should be removed
      Description: If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1481
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CS0168
  S1541:
    Metadata:
      Category: Critical Code Smell
      Title: Methods and properties should not be too complex
      Description: The cyclomatic complexity of methods and properties should not exceed a defined threshold. Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1541
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S1607:
    Metadata:
      Category: Major Code Smell
      Title: Tests should not be ignored
      Description: When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why the test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up polluting their projects.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1607
      CustomTags:
      - C#
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1643:
    Metadata:
      Category: Minor Code Smell
      Title: Strings should not be concatenated using '+' in a loop
      Description: StringBuilder is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1643
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1656:
    Metadata:
      Category: Major Bug
      Title: Variables should not be self-assigned
      Description: 'Re-assigning a variable to itself is a defect as it has no actual effect and indicates meaning to do something else. It usually means that:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1656
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1659:
    Metadata:
      Category: Minor Code Smell
      Title: Multiple variables should not be declared on the same line
      Description: Declaring multiple variable on one line is difficult to read.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1659
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S1694:
    Metadata:
      Category: Minor Code Smell
      Title: An abstract class should have both abstract and concrete methods
      Description: The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1694
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S1696:
    Metadata:
      Category: Major Code Smell
      Title: NullReferenceException should not be caught
      Description: NullReferenceException should be avoided, not caught. Any situation in which NullReferenceException is explicitly caught can easily be converted to a null test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch of the conditional.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1696
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1697:
    Metadata:
      Category: Major Bug
      Title: Short-circuit logic should be used to prevent null pointer dereferences in conditionals
      Description: When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is null, leading to a guaranteed null pointer dereference.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1697
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1698:
    Metadata:
      Category: Minor Code Smell
      Title: '"==" should not be used when "Equals" is overridden'
      Description: Using the equality == and inequality != operators to compare two objects generally works. The operators can be overloaded, and therefore the comparison can resolve to the appropriate method. However, when the operators are used on interface instances, then == resolves to reference equality, which may result in unexpected behavior if implementing classes override Equals. Similarly, when a class overrides Equals, but instances are compared with non-overloaded ==, there is a high chance that value comparison was meant instead of the reference one.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1698
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1699:
    Metadata:
      Category: Critical Code Smell
      Title: Constructors should only call non-overridable methods
      Description: Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the method.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1699
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1751:
    Metadata:
      Category: Major Bug
      Title: Loops with at most one iteration should be refactored
      Description: A loop statement with at most one iteration is equivalent to an if statement; the following block is executed only once.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1751
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1764:
    Metadata:
      Category: Major Bug
      Title: Identical expressions should not be used on both sides of operators
      Description: Using the same value on both sides of certain operators is a code defect. In the case of logical operators, it is either a copy/paste error and, therefore, a bug, or it is simply duplicated code and should be simplified. For bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results and should be simplified as well to avoid further code defects.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1764
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1821:
    Metadata:
      Category: Critical Code Smell
      Title: '"switch" statements should not be nested'
      Description: Nested switch structures are difficult to understand because you can easily confuse the cases of an inner switch as belonging to an outer statement. Therefore nested switch statements should be avoided.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1821
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S1848:
    Metadata:
      Category: Major Bug
      Title: Objects should not be created to be dropped immediately without being used
      Description: Creating objects that are not used is a vulnerability that can lead to unexpected behavior.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1848
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1854:
    Metadata:
      Category: Major Code Smell
      Title: Unused assignments should be removed
      Description: A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it’s not an error, it is at best a waste of resources. Therefore all calculated values should be used.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1854
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: IDE0059
  S1858:
    Metadata:
      Category: Minor Code Smell
      Title: '"ToString()" calls should not be redundant'
      Description: Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. Similarly, explicitly invoking ToString() when the compiler would do it implicitly is also needless code-bloat.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1858
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1862:
    Metadata:
      Category: Major Bug
      Title: Related "if/else if" statements should not have the same condition
      Description: 'A chain of if/else if statements is evaluated from top to bottom. At most, only one branch will be executed: the first statement with a condition that evaluates to true. Therefore, duplicating a condition leads to unreachable code inside the duplicated condition block. Usually, this is due to a copy/paste error.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1862
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1871:
    Metadata:
      Category: Major Code Smell
      Title: Two branches in a conditional structure should not have exactly the same implementation
      Description: Having two cases in the same switch statement or branches in the same if structure with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an if structure they should be combined, or for a switch, one should fall through to the other.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1871
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1905:
    Metadata:
      Category: Minor Code Smell
      Title: Redundant casts should not be used
      Description: Unnecessary casting expressions make the code harder to read and understand.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1905
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: IDE0004
  S1939:
    Metadata:
      Category: Minor Code Smell
      Title: Inheritance list should not be redundant
      Description: 'An inheritance list entry is redundant if:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1939
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1940:
    Metadata:
      Category: Minor Code Smell
      Title: Boolean checks should not be inverted
      Description: It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1940
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S1944:
    Metadata:
      Category: Critical Code Smell
      Title: Invalid casts should be avoided
      Description: A cast is an explicit conversion, which is a way to tell the compiler the intent to convert from one type to another.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1944
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S1994:
    Metadata:
      Category: Critical Code Smell
      Title: "\"for\" loop increment clauses should modify the loops' counters"
      Description: It can be extremely confusing when a for loop’s counter is incremented outside of its increment clause. In such cases, the increment should be moved to the loop’s increment clause if at all possible.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1994
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2053:
    Metadata:
      Category: Critical Vulnerability
      Title: Hashes should include an unpredictable salt
      Description: This vulnerability increases the likelihood that attackers are able to compute the cleartext of password hashes.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2053
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: Analysis is too slow
  S2068:
    Metadata:
      Category: Blocker Security Hotspot
      Title: Hard-coded credentials are security-sensitive
      Description: Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true for applications that are distributed or that are open-source.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2068
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2070:
    Metadata:
      Category: Critical Vulnerability
      Title: SHA-1 and Message-Digest hash algorithms should not be used in secure contexts
      Description: 'The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is, it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2, MD4, MD6.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2070
      CustomTags:
      - C#
      - MainSourceScope
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA5350
  S2077:
    Metadata:
      Category: Major Security Hotspot
      Title: Formatting SQL queries is security-sensitive
      Description: Formatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the query. However, this rule doesn’t detect SQL injections (unlike rule {rule:csharpsquid:S3649}), the goal is only to highlight complex/formatted queries.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2077
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2092:
    Metadata:
      Category: Minor Security Hotspot
      Title: Creating cookies without the "secure" flag is security-sensitive
      Description: When a cookie is protected with the secure attribute set to true it will not be send by the browser over an unencrypted HTTP request and thus cannot be observed by an unauthorized person during a man-in-the-middle attack.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2092
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2114:
    Metadata:
      Category: Major Bug
      Title: Collections should not be passed as arguments to their own methods
      Description: Passing a collection as an argument to the collection’s own method is a code defect. Doing so might either have unexpected side effects or always have the same result.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2114
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2123:
    Metadata:
      Category: Major Bug
      Title: Values should not be uselessly incremented
      Description: When using the postfix increment operator, it is important to know that the result of the expression x++ is the value before the operation x.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2123
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2148:
    Metadata:
      Category: Minor Code Smell
      Title: Underscores should be used to make large numbers readable
      Description: Beginning with C# 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this manner has no semantic meaning, but makes it easier for maintainers to understand the code.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2148
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S2156:
    Metadata:
      Category: Minor Code Smell
      Title: '"sealed" classes should not have "protected" members'
      Description: The difference between private and protected visibility is that child classes can see and use protected members, but they cannot see private ones. Since a sealed class cannot have children, marking its members protected is confusingly pointless.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2156
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2178:
    Metadata:
      Category: Blocker Code Smell
      Title: Short-circuit logic should be used in boolean contexts
      Description: Short-circuit evaluation is an evaluation strategy for Boolean operators, that doesn’t evaluates the second argument of the operator if it is not needed to determine the result of the operation.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2178
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2183:
    Metadata:
      Category: Minor Bug
      Title: Integral numbers should not be shifted by zero or more than their number of bits-1
      Description: The shifting operators are used to do an arithmetic shift to the bits of an integral numeric value, either to the left or the right.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2183
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2184:
    Metadata:
      Category: Minor Bug
      Title: Results of integer division should not be assigned to floating point variables
      Description: When division is performed on ints, the result will always be an int. You can assign that result to a double, float or decimal with automatic type conversion, but having started as an int, the result will likely not be what you expect. If the result of int division is assigned to a floating-point variable, precision will have been lost before the assignment. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2184
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2187:
    Metadata:
      Category: Blocker Code Smell
      Title: Test classes should contain at least one test case
      Description: To ensure proper testing, it is important to include test cases in a test class. If a test class does not have any test cases, it can give the wrong impression that the class being tested has been thoroughly tested, when in reality, it has not.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2187
      CustomTags:
      - C#
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2190:
    Metadata:
      Category: Blocker Bug
      Title: Loops and recursions should not be infinite
      Description: Having an infinite loop or recursion will lead to a program failure or a program never finishing the execution.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2190
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2197:
    Metadata:
      Category: Critical Code Smell
      Title: Modulus results should not be checked for direct equality
      Description: When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for equality with a positive number (or a negative one) could result in unexpected results.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2197
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2201:
    Metadata:
      Category: Major Bug
      Title: Methods without side effects should not have their return values ignored
      Description: When you do not use the return value of a method with no side effects, it indicates that something is wrong. Either this method is unnecessary, or the source code does not behave as expected and could lead to code defects. For example, there are methods, such as DateTime.AddYears, that don’t change the value of the input object, but instead, they return a new object whose value is the result of this operation, and as a result that you will have unexpected effects if you do not use the return value.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2201
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1806
  S2219:
    Metadata:
      Category: Minor Code Smell
      Title: Runtime type checking should be simplified
      Description: 'To check the type of an object there are several options:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2219
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2221:
    Metadata:
      Category: Minor Code Smell
      Title: '"Exception" should not be caught'
      Description: Catching System.Exception seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types, including the ones that were not intended to be caught. To prevent any misunderstandings, the exception filters should be used. Alternatively each exception type should be in a separate catch block.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2221
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S2223:
    Metadata:
      Category: Critical Code Smell
      Title: Non-constant static fields should not be visible
      Description: Unlike instance fields, which can only be accessed by code having a hold on the instance, static fields can be accessed by any code having visibility of the field and its type.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2223
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2225:
    Metadata:
      Category: Major Bug
      Title: '"ToString()" method should not return null'
      Description: Calling ToString() on an object should always return a string. Thus, overriding the ToString method should never return null, as it breaks the method’s implicit contract, and as a result the consumer’s expectations.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2225
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2228:
    Metadata:
      Category: Minor Vulnerability
      Title: Console logging should not be used
      Description: Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you run the risk of inadvertently exposing sensitive information.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2228
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
      production:
        Severity: Warning
  S2234:
    Metadata:
      Category: Major Code Smell
      Title: Arguments should be passed in the same order as the method parameters
      Description: Calling a method with argument variables whose names match the method parameter names but in a different order can cause confusion. It could indicate a mistake in the arguments' order, leading to unexpected results.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2234
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2245:
    Metadata:
      Category: Critical Security Hotspot
      Title: Using pseudorandom number generators (PRNGs) is security-sensitive
      Description: 'Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2245
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2251:
    Metadata:
      Category: Major Bug
      Title: A "for" loop update clause should move the counter in the right direction
      Description: A for loop with a counter that moves in the wrong direction, away from the stop condition, is not an infinite loop. Because of wraparound, the loop will eventually reach its stop condition, but in doing so, it will probably run more times than anticipated, potentially causing unexpected behavior.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2251
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2252:
    Metadata:
      Category: Major Bug
      Title: For-loop conditions should be true at least once
      Description: A for loop is a fundamental programming construct used to execute a block of code repeatedly. However, if the loop’s condition is false before the first iteration, the loop will never execute.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2252
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2255:
    Metadata:
      Category: Minor Security Hotspot
      Title: Writing cookies is security-sensitive
      Description: 'Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2255
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2257:
    Metadata:
      Category: Critical Security Hotspot
      Title: Using non-standard cryptographic algorithms is security-sensitive
      Description: The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Standard algorithms like AES, RSA, SHA, …​ should be used instead.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2257
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2259:
    Metadata:
      Category: Major Bug
      Title: Null pointers should not be dereferenced
      Description: Accessing a null value will always throw a NullReferenceException most likely causing an abrupt program termination.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2259
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: Redundant, covered by modern C# compiler
  S2275:
    Metadata:
      Category: Blocker Bug
      Title: Composite format strings should not lead to unexpected behavior at runtime
      Description: 'Composite format strings in C# are evaluated at runtime, which means they are not verified by the compiler. Introducing an ill-formed format item, or indexing mismatch can lead to unexpected behaviors or runtime errors. The purpose of this rule is to perform static validation on composite format strings used in various string formatting functions to ensure their correct usage. This rule validates the proper behavior of composite formats when invoking the following methods:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2275
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2278:
    Metadata:
      Category: Blocker Vulnerability
      Title: Neither DES (Data Encryption Standard) nor DESede (3DES) should be used
      Description: 'According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2278
      CustomTags:
      - C#
      - MainSourceScope
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2290:
    Metadata:
      Category: Critical Code Smell
      Title: Field-like events should not be virtual
      Description: Field-like events are events that do not have explicit add and remove accessors.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2290
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2291:
    Metadata:
      Category: Critical Code Smell
      Title: Overflow checking should not be disabled for "Enumerable.Sum"
      Description: Enumerable.Sum() always executes addition in a checked context, so an OverflowException will be thrown if the value exceeds MaxValue, even if an unchecked context was specified. Therefore, using this method inside an unchecked context will only make the code more confusing, since the behavior will still be checked.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2291
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2292:
    Metadata:
      Category: Minor Code Smell
      Title: Trivial properties should be auto-implemented
      Description: Trivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented properties, yielding cleaner and more readable code.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2292
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: IDE0032
  S2302:
    Metadata:
      Category: Critical Code Smell
      Title: '"nameof" should be used'
      Description: Because parameter names could be changed during refactoring, they should not be spelled out literally in strings. Instead, use nameof(), and the string that’s output will always be correct.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2302
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2306:
    Metadata:
      Category: Blocker Code Smell
      Title: '"async" and "await" should not be used as identifiers'
      Description: Since C# 5.0, async and await are contextual keywords. Contextual keywords do have a particular meaning in some contexts, but are not reserved and therefore can be used as variable names.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2306
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2325:
    Metadata:
      Category: Minor Code Smell
      Title: Methods and properties that don't access instance data should be static
      Description: Methods and properties that don’t access instance data can be static to prevent any misunderstanding about the contract of the method.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2325
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1822
  S2326:
    Metadata:
      Category: Major Code Smell
      Title: Unused type parameters should be removed
      Description: Type parameters that aren’t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type parameters should be removed.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2326
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: Valid pattern used in a number of places
  S2327:
    Metadata:
      Category: Major Code Smell
      Title: '"try" statements with identical "catch" and/or "finally" blocks should be merged'
      Description: When multiple, adjacent try statements have duplicate catch and/or finally blocks, they should be merged to consolidate the catch/finally logic for cleaner, more readable code. Note that this applies even when there is intervening code outside any try block.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2327
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2328:
    Metadata:
      Category: Minor Bug
      Title: '"GetHashCode" should not reference mutable fields'
      Description: GetHashCode is used to file an object in a Dictionary or Hashtable. If GetHashCode uses non-readonly fields and those fields change after the object is stored, the object immediately becomes mis-filed in the Hashtable. Any subsequent test to see if the object is in the Hashtable will return a false negative.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2328
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2330:
    Metadata:
      Category: Critical Code Smell
      Title: Array covariance should not be used
      Description: Array covariance is the principle that if an implicit or explicit reference conversion exits from type A to B, then the same conversion exists from the array type A[] to B[].
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2330
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2333:
    Metadata:
      Category: Minor Code Smell
      Title: Redundant modifiers should not be used
      Description: 'Unnecessary keywords simply clutter the code and should be removed. Specifically:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2333
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2339:
    Metadata:
      Category: Critical Code Smell
      Title: Public constant members should not be used
      Description: Constant members are copied at compile time to the call sites, instead of being fetched at runtime.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2339
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S2342:
    Metadata:
      Category: Minor Code Smell
      Title: Enumeration types should comply with a naming convention
      Description: Shared naming conventions allow teams to collaborate efficiently. This rule checks that all enum names match a provided regular expression.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2342
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
  S2344:
    Metadata:
      Category: Minor Code Smell
      Title: Enumeration type names should not have "Flags" or "Enum" suffixes
      Description: The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2344
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S2345:
    Metadata:
      Category: Minor Bug
      Title: Flags enumerations should explicitly initialize all their members
      Description: When you annotate an Enum with the Flags attribute, you must not rely on the values that are automatically set by the language to the Enum members, but you should define the enumeration constants in powers of two (1, 2, 4, 8, and so on). Automatic value initialization will set the first member to zero and increment the value by one for each subsequent member. As a result, you won’t be able to use the enum members with bitwise operators.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2345
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2346:
    Metadata:
      Category: Critical Code Smell
      Title: Flags enumerations zero-value members should be named "None"
      Description: 'An enumeration can be decorated with the FlagsAttribute to indicate that it can be used as a bit field: a set of flags, that can be independently set and reset.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2346
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1008
  S2357:
    Metadata:
      Category: Major Code Smell
      Title: Fields should be private
      Description: Fields should not be part of an API, and therefore should always be private. Indeed, they cannot be added to an interface for instance, and validation cannot be added later on without breaking backward compatibility. Instead, developers should encapsulate their fields into properties. Explicit property getters and setters can be introduced for validation purposes or to smooth the transition to a newer system.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2357
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1051
  S2360:
    Metadata:
      Category: Critical Code Smell
      Title: Optional parameters should not be used
      Description: 'The overloading mechanism should be used in place of optional parameters for several reasons:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2360
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S2365:
    Metadata:
      Category: Critical Code Smell
      Title: Properties should not make collection or array copies
      Description: Most developers expect property access to be as efficient as field access. However, if a property returns a copy of an array or collection, it will be much slower than a simple field access, contrary to the caller’s likely expectations. Therefore, such properties should be refactored into methods so that callers are not surprised by the unexpectedly poor performance.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2365
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2368:
    Metadata:
      Category: Blocker Code Smell
      Title: Public methods should not have multidimensional array parameters
      Description: Using multidimensional and jagged arrays as method parameters in C# can be challenging for developers.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2368
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2372:
    Metadata:
      Category: Major Code Smell
      Title: Exceptions should not be thrown from property getters
      Description: Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a method.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2372
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2376:
    Metadata:
      Category: Major Code Smell
      Title: Write-only properties should not be used
      Description: Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or the property should be replaced with a setter method.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2376
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2386:
    Metadata:
      Category: Minor Code Smell
      Title: Mutable fields should not be "public static"
      Description: public static mutable fields of classes which are accessed directly should be protected to the degree possible. This can be done by reducing the accessibility of the field or by changing the return type to an immutable type.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2386
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2387:
    Metadata:
      Category: Blocker Code Smell
      Title: Child class fields should not shadow parent class fields
      Description: Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you’ll get confusion at best, chaos at worst.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2387
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2436:
    Metadata:
      Category: Major Code Smell
      Title: Types and methods should not have too many generic parameters
      Description: A method or class with too many type parameters has likely aggregated too many responsibilities and should be split.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2436
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: CA1005
  S2437:
    Metadata:
      Category: Blocker Code Smell
      Title: Unnecessary bit operations should not be performed
      Description: Certain bitwise operations are not needed and should not be performed because their results are predictable.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2437
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      - Unnecessary
      DefaultSeverity: Suggestion
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2479:
    Metadata:
      Category: Critical Code Smell
      Title: Whitespace and control characters in string literals should be explicit
      Description: 'Non-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either invisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control character use their encoded version:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2479
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2486:
    Metadata:
      Category: Minor Code Smell
      Title: Generic exceptions should not be ignored
      Description: When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2486
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2551:
    Metadata:
      Category: Critical Bug
      Title: Shared resources should not be used for locking
      Description: A shared resource refers to a resource or data that can be accessed or modified by multiple threads or concurrent parts of a program. It could be any piece of data, object, file, database connection, or system resource that needs to be accessed or manipulated by multiple parts of a program concurrently.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2551
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2583:
    Metadata:
      Category: Major Bug
      Title: Conditionally executed code should be reachable
      Description: Conditional expressions which are always true or false can lead to unreachable code.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2583
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1508
  S2589:
    Metadata:
      Category: Major Code Smell
      Title: Boolean expressions should not be gratuitous
      Description: An operand of a boolean expression that never changes the result of the expression might not match the programmer’s intent and can lead to unexpected behavior and potential bugs.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2589
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: Too many false positives.
  S2674:
    Metadata:
      Category: Minor Bug
      Title: The length returned from a stream read should be checked
      Description: You cannot assume that any given stream reading call will fill the byte[] passed in to the method with the number of bytes requested. Instead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce a bug that is both harmful and difficult to reproduce.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2674
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2681:
    Metadata:
      Category: Major Code Smell
      Title: Multiline blocks should be enclosed in curly braces
      Description: Having inconsistent indentation and omitting curly braces from a control structure, such as an if statement or for loop, is misleading and can induce bugs.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2681
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2688:
    Metadata:
      Category: Major Bug
      Title: '"NaN" should not be used in comparisons'
      Description: double.NaN and float.NaN are not equal to anything, not even themselves.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2688
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2692:
    Metadata:
      Category: Critical Code Smell
      Title: '"IndexOf" checks should not be for positive numbers'
      Description: Most checks against an IndexOf value compare it with -1 because 0 is a valid index.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2692
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2696:
    Metadata:
      Category: Critical Code Smell
      Title: Instance members should not write to "static" fields
      Description: This rule raises an issue each time a static field is updated from a non-static method or property.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2696
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2699:
    Metadata:
      Category: Blocker Code Smell
      Title: Tests should include assertions
      Description: The rule targets test methods that lack an assertion and consist solely of an action and, optionally, a setup.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2699
      CustomTags:
      - C#
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2701:
    Metadata:
      Category: Critical Code Smell
      Title: Literal boolean values should not be used in assertions
      Description: There’s no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2701
      CustomTags:
      - C#
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2737:
    Metadata:
      Category: Minor Code Smell
      Title: '"catch" clauses should do more than rethrow'
      Description: A catch clause that only rethrows the caught exception has the same effect as omitting the catch altogether and letting it bubble up automatically.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2737
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2743:
    Metadata:
      Category: Major Code Smell
      Title: Static fields should not be used in generic types
      Description: A static field in a generic type is not shared among instances of different closed constructed types, thus LengthLimitedSingletonCollection<int>.instances and LengthLimitedSingletonCollection<string>.instances will point to different objects, even though instances is seemingly shared among all LengthLimitedSingletonCollection<> generic classes.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2743
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S2755:
    Metadata:
      Category: Blocker Vulnerability
      Title: XML parsers should not be vulnerable to XXE attacks
      Description: This vulnerability allows the usage of external entities in XML.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2755
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2757:
    Metadata:
      Category: Major Bug
      Title: Non-existent operators like "=+" should not be used
      Description: Using operator pairs (=+, =-, or =!) that look like reversed single operators (+=, -= or !=) is confusing. They compile and run but do not produce the same result as their mirrored counterpart.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2757
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2758:
    Metadata:
      Category: Major Bug
      Title: The ternary operator should not return the same value regardless of the condition
      Description: 'When the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the condition. Either the operator itself is pointless, or a mistake was made in coding it. '
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2758
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2760:
    Metadata:
      Category: Minor Code Smell
      Title: Sequential tests should not check the same condition
      Description: When the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition should have been checked in the second test.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2760
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S2761:
    Metadata:
      Category: Major Bug
      Title: Doubled prefix operators "!!" and "~~" should not be used
      Description: The repetition of a prefix operator (!, or ~) is usually a typo. The second operator invalidates the first one.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2761
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2857:
    Metadata:
      Category: Blocker Bug
      Title: SQL keywords should be delimited by whitespace
      Description: When concatenating strings, it is very easy to forget a whitespace.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2857
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2930:
    Metadata:
      Category: Blocker Bug
      Title: '"IDisposables" should be disposed'
      Description: When writing managed code, there is no need to worry about memory allocation or deallocation as it is taken care of by the garbage collector. However, certain objects, such as Bitmap, utilize unmanaged memory for specific purposes like pointer arithmetic. These objects may have substantial unmanaged memory footprints while having minimal managed footprints. Unfortunately, the garbage collector only recognizes the small managed footprint and does not promptly reclaim the corresponding unmanaged memory (by invoking the finalizer method of Bitmap) for efficiency reasons.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2930
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA2000
  S2931:
    Metadata:
      Category: Blocker Bug
      Title: Classes with "IDisposable" members should implement "IDisposable"
      Description: 'An IDisposable object should be disposed (there are some rare exceptions where not disposing is fine, most notably Task). If a class has an IDisposable field, there can be two situations:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2931
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1001
  S2933:
    Metadata:
      Category: Major Code Smell
      Title: Fields that are only assigned in the constructor should be "readonly"
      Description: readonly fields can only be assigned in a class constructor. If a class has a field that’s not marked readonly but is only set in the constructor, it could cause confusion about the field’s intended use. To avoid confusion, such fields should be marked readonly to make their intended use explicit, and to prevent future maintainers from inadvertently changing their use.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2933
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: IDE0044
  S2934:
    Metadata:
      Category: Minor Bug
      Title: Property assignments should not be made for "readonly" fields not constrained to reference types
      Description: While the properties of a readonly reference type field can still be changed after initialization, those of a readonly value type field, such as a struct, cannot.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2934
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2952:
    Metadata:
      Category: Critical Bug
      Title: Classes should "Dispose" of members from the classes' own "Dispose" methods
      Description: It is possible in an IDisposable to call Dispose on class members from any method, but the contract of Dispose is that it will clean up all unmanaged resources. Move disposing of members to some other method, and you risk resource leaks.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2952
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2953:
    Metadata:
      Category: Blocker Code Smell
      Title: Methods named "Dispose" should implement "IDisposable.Dispose"
      Description: IDisposable is an interface implemented by all types which need to provide a mechanism for releasing unmanaged resources.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2953
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2955:
    Metadata:
      Category: Minor Bug
      Title: Generic parameters not constrained to reference types should not be compared to "null"
      Description: When constraints have not been applied to restrict a generic type parameter to be a reference type, then a value type, such as a struct, could also be passed. In such cases, comparing the type parameter to null would always be false, because a struct can be empty, but never null. If a value type is truly what’s expected, then the comparison should use default(). If it’s not, then constraints should be added so that no value type can be passed.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2955
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2971:
    Metadata:
      Category: Major Code Smell
      Title: '"IEnumerable" LINQs should be simplified'
      Description: In the interests of readability, code that can be simplified should be simplified. To that end, there are several ways IEnumerable language integrated queries (LINQ) can be simplified
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2971
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2995:
    Metadata:
      Category: Major Bug
      Title: '"Object.ReferenceEquals" should not be used for value types'
      Description: In C#, the Object.ReferenceEquals method is used to compare two reference type variables. If you use this method to compare two value types, such as int, float, or bool you will not get the expected results because value type variables contain an instance of the type and not a reference to it.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2995
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2996:
    Metadata:
      Category: Major Bug
      Title: '"ThreadStatic" fields should not be initialized'
      Description: When an object has a field annotated with ThreadStatic, that field is shared within a given thread, but unique across threads. Since a class' static initializer is only invoked for the first thread created, it also means that only the first thread will have the expected initial values.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2996
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2997:
    Metadata:
      Category: Major Bug
      Title: '"IDisposables" created in a "using" statement should not be returned'
      Description: When you use a using statement, the goal is to ensure the correct disposal of an IDisposable instance when the control leaves the using statement block.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2997
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3005:
    Metadata:
      Category: Major Bug
      Title: '"ThreadStatic" should not be used on non-static fields'
      Description: When you annotate a field with the ThreadStatic attribute, it is an indication that the value of this field is unique for each thread. But if you don’t mark the field as static, then the ThreadStatic attribute is ignored.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3005
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3010:
    Metadata:
      Category: Major Code Smell
      Title: Static fields should not be updated in constructors
      Description: Assigning a value to a static field in a constructor could cause unreliable behavior at runtime since it will change the value for all instances of the class.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3010
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3011:
    Metadata:
      Category: Major Code Smell
      Title: Reflection should not be used to increase accessibility of classes, methods, or fields
      Description: Altering or bypassing the accessibility of classes, methods, or fields through reflection violates the encapsulation principle. This can break the internal contracts of the accessed target and lead to maintainability issues and runtime errors.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3011
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3052:
    Metadata:
      Category: Minor Code Smell
      Title: Members should not be initialized to default values
      Description: The compiler automatically initializes class fields, auto-properties and events to their default values before setting them with any initialization values, so there is no need to explicitly set a member to its default value. Further, under the logic that cleaner code is better code, it’s considered poor style to do so.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3052
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: CA1805
  S3060:
    Metadata:
      Category: Blocker Code Smell
      Title: '"is" should not be used with "this"'
      Description: 'One of the possible ways of performing type-testing is via the is operator: food is Pizza.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3060
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3168:
    Metadata:
      Category: Major Bug
      Title: '"async" methods should not return "void"'
      Description: An async method with a void return type does not follow the task asynchronous programming (TAP) model since the return type should be Task or Task<TResult>
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3168
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: VSTHRD100
  S3169:
    Metadata:
      Category: Major Code Smell
      Title: Multiple "OrderBy" calls should not be used
      Description: There’s no point in chaining multiple OrderBy calls in a LINQ; only the last one will be reflected in the result because each subsequent call completely reorders the list. Thus, calling OrderBy multiple times is a performance issue as well, because all of the sorting will be executed, but only the result of the last sort will be kept.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3169
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3172:
    Metadata:
      Category: Major Bug
      Title: Delegates should not be subtracted
      Description: In C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3172
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3215:
    Metadata:
      Category: Critical Code Smell
      Title: '"interface" instances should not be cast to concrete types'
      Description: Needing to cast from an interface to a concrete type indicates that something is wrong with the abstractions in use, likely that something is missing from the interface. Instead of casting to a discrete type, the missing functionality should be added to the interface. Otherwise there is a risk of runtime exceptions.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3215
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3216:
    Metadata:
      Category: Critical Code Smell
      Title: '"ConfigureAwait(false)" should be used'
      Description: After an awaited Task has executed, you can continue execution in the original, calling thread or any arbitrary thread. Unless the rest of the code needs the context from which the Task was spawned, Task.ConfigureAwait(false) should be used to keep execution in the Task thread to avoid the need for context switching and the possibility of deadlocks.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3216
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA2007
  S3217:
    Metadata:
      Category: Critical Code Smell
      Title: '"Explicit" conversions of "foreach" loops should not be used'
      Description: The foreach statement was introduced in the C# language prior to generics to make it easier to work with the non-generic collections available at that time such as ArrayList. The foreach statements allow you to downcast elements of a collection of Objects to any other type.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3217
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3218:
    Metadata:
      Category: Critical Code Smell
      Title: Inner class members should not shadow outer class "static" or type members
      Description: Naming the members of an inner class the same as the static members of its enclosing class is possible but generally considered a bad practice. That’s because maintainers may be confused about which members are being used in a given context. Instead the inner class member should be given distinct and descriptive name, and all references to it should be updated accordingly.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3218
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3220:
    Metadata:
      Category: Minor Code Smell
      Title: Method calls should not resolve ambiguously to overloads with "params"
      Description: The rules for method resolution are complex and perhaps not properly understood by all coders. The params keyword can make method declarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different methods.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3220
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3234:
    Metadata:
      Category: Minor Code Smell
      Title: '"GC.SuppressFinalize" should not be invoked for types without destructors'
      Description: GC.SuppressFinalize asks the Common Language Runtime not to call the finalizer of an object. This is useful when implementing the dispose pattern where object finalization is already handled in IDisposable.Dispose. However, it has no effect if there is no finalizer defined in the object’s type, so using it in such cases is just confusing.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3234
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3235:
    Metadata:
      Category: Minor Code Smell
      Title: Redundant parentheses should not be used
      Description: Redundant parentheses are simply wasted keystrokes, and should be removed.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3235
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3236:
    Metadata:
      Category: Minor Code Smell
      Title: Caller information arguments should not be provided explicitly
      Description: 'Caller information attributes: CallerFilePathAttribute, CallerLineNumberAttribute, and CallerArgumentExpressionAttribute provide a way to get information about the caller of a method through optional parameters. But the arguments for these optional parameters are only generated if they are not explicitly defined in the call. Thus, specifying the argument values defeats the purpose of the attributes.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3236
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3237:
    Metadata:
      Category: Blocker Code Smell
      Title: '"value" contextual keyword should be used'
      Description: When you need to get external input for set and init methods defined for properties and indexers or for remove and add methods for events, you should always get this input throught the value contextual keyword.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3237
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3240:
    Metadata:
      Category: Minor Code Smell
      Title: The simplest possible condition syntax should be used
      Description: In the interests of keeping code clean, the simplest possible conditional syntax should be used. That means
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3240
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: IDE0054
  S3241:
    Metadata:
      Category: Minor Code Smell
      Title: Methods should not return values that are never used
      Description: Private methods are intended for use only within their scope. If these methods return values that are not utilized by any calling functions, it indicates that the return operation is unnecessary. Removing such returns can enhance both efficiency and code clarity.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3241
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3242:
    Metadata:
      Category: Minor Code Smell
      Title: Method parameters should be declared with base types
      Description: When a derived type is used as a parameter instead of the base type, it limits the uses of the method. If the additional functionality that is provided in the derived type is not required then that limitation isn’t required, and should be removed.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3242
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Comment: We want to encourage concrete types instead of interface types when possible as it's considerably faster.
  S3244:
    Metadata:
      Category: Major Bug
      Title: Anonymous delegates should not be used to unsubscribe from Events
      Description: When working with anonymous functions, it is important to keep in mind that each time you create one, it is a completely new instance.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3244
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3246:
    Metadata:
      Category: Major Code Smell
      Title: Generic type parameters should be co/contravariant when possible
      Description: In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the out and in modifiers when possible to make the interfaces and delegates covariant and contravariant, respectively.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3246
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3247:
    Metadata:
      Category: Minor Code Smell
      Title: Duplicate casts should not be made
      Description: Because the is operator performs a cast if the object is not null, using is to check type and then casting the same argument to that type, necessarily performs two casts. The same result can be achieved more efficiently with a single cast using as, followed by a null-check.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3247
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3249:
    Metadata:
      Category: Major Bug
      Title: Classes directly extending "object" should not call "base" in "GetHashCode" or "Equals"
      Description: Making a base call when overriding a method is generally a good idea, but not in the case of GetHashCode and Equals for classes that directly extend Object. These methods are based on the object’s reference, meaning that no two objects that use those base methods can be equal or have the same hash.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3249
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3251:
    Metadata:
      Category: Minor Code Smell
      Title: Implementations should be provided for "partial" methods
      Description: partial methods allow an increased degree of flexibility in programming a system. Hooks can be added to generated code by invoking methods that define their signature, but might not have an implementation yet. But if the implementation is still missing when the code makes it to production, the compiler silently removes the call. In the best case scenario, such calls simply represent cruft, but in they worst case they are critical, missing functionality, the loss of which will lead to unexpected results at runtime.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3251
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3253:
    Metadata:
      Category: Minor Code Smell
      Title: Constructor and destructor declarations should not be redundant
      Description: Since the compiler will automatically invoke the base type’s no-argument constructor, there’s no need to specify its invocation explicitly. Also, when only a single public parameterless constructor is defined in a class, then that constructor can be removed because the compiler would generate it automatically. Similarly, empty static constructors and empty destructors are also wasted keystrokes.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3253
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3254:
    Metadata:
      Category: Minor Code Smell
      Title: Default parameter values should not be passed as arguments
      Description: Specifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3254
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3256:
    Metadata:
      Category: Minor Code Smell
      Title: '"string.IsNullOrEmpty" should be used'
      Description: Using string.Equals to determine if a string is empty is significantly slower than using string.IsNullOrEmpty() or checking for string.Length == 0. string.IsNullOrEmpty() is both clear and concise, and therefore preferred to laborious, error-prone, manual null- and emptiness-checking.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3256
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3257:
    Metadata:
      Category: Minor Code Smell
      Title: Declarations and initializations should be as concise as possible
      Description: Unnecessarily verbose declarations and initializations make it harder to read the code, and should be simplified.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3257
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Comment: Too many false positives
  S3261:
    Metadata:
      Category: Minor Code Smell
      Title: Namespaces should not be empty
      Description: Namespaces with no lines of code clutter a project and should be removed.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3261
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3262:
    Metadata:
      Category: Major Code Smell
      Title: '"params" should be used on overrides'
      Description: Overriding methods automatically inherit the params behavior. To ease readability, this modifier should be explicitly used in the overriding method as well.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3262
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3263:
    Metadata:
      Category: Major Bug
      Title: 'Static fields should appear in the order they must be initialized '
      Description: Static field initializers are executed in the order in which they appear in the class from top to bottom. Thus, placing a static field in a class above the field or fields required for its initialization will yield unexpected results.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3263
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3264:
    Metadata:
      Category: Major Code Smell
      Title: Events should be invoked
      Description: Events that are not invoked anywhere are dead code, and there’s no good reason to keep them in the source.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3264
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3265:
    Metadata:
      Category: Critical Code Smell
      Title: Non-flags enums should not be used in bitwise operations
      Description: Enumerations are commonly used to identify distinct elements from a set of values.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3265
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3329:
    Metadata:
      Category: Critical Vulnerability
      Title: Cipher Block Chaining IVs should be unpredictable
      Description: This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3329
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: Analysis is too slow
  S3330:
    Metadata:
      Category: Minor Security Hotspot
      Title: Creating cookies without the "HttpOnly" flag is security-sensitive
      Description: When a cookie is configured with the HttpOnly attribute set to true, the browser guaranties that no client-side script will be able to read it. In most cases, when a cookie is created, the default value of HttpOnly is false and it’s up to the developer to decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target the theft of session-cookies, the HttpOnly attribute can help to reduce their impact as it won’t be possible to exploit the XSS vulnerability to steal session-cookies.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3330
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3343:
    Metadata:
      Category: Major Bug
      Title: Caller information parameters should come at the end of the parameter list
      Description: Caller information attributes provide a way to get information about the caller of a method through optional parameters. But they only work right if their values aren’t provided explicitly. So if you define a method with caller info attributes in the middle of the parameter list, the caller is forced to use named arguments if they want to use the method properly.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3343
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3346:
    Metadata:
      Category: Major Bug
      Title: Expressions used in "Debug.Assert" should not produce side effects
      Description: An assertion is a piece of code that’s used during development when the compilation debug mode is activated. It allows a program to check itself as it runs. When an assertion is true, that means everything is operating as expected.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3346
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3353:
    Metadata:
      Category: Critical Code Smell
      Title: Unchanged local variables should be "const"
      Description: Marking a variable that is unchanged after initialization const is an indication to future maintainers that "no this isn’t updated, and it’s not supposed to be". const should be used in these situations in the interests of code clarity.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3353
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3358:
    Metadata:
      Category: Major Code Smell
      Title: Ternary operators should not be nested
      Description: Nested ternaries are hard to read and can make the order of operations complex to understand.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3358
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3366:
    Metadata:
      Category: Major Code Smell
      Title: '"this" should not be exposed from constructors'
      Description: In single-threaded environments, the use of this in constructors is normal, and expected. But in multi-threaded environments, it could expose partially-constructed objects to other threads, and should be used with caution.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3366
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3376:
    Metadata:
      Category: Minor Code Smell
      Title: Attribute, EventArgs, and Exception type names should end with the type being extended
      Description: 'Adherence to the standard naming conventions makes your code not only more readable, but more usable. For instance, class FirstAttribute : Attribute can be used simply with First, but you must use the full name for class AttributeOne : Attribute.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3376
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1710
  S3397:
    Metadata:
      Category: Minor Bug
      Title: '"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"'
      Description: object.Equals() overrides can be optimized by checking first for reference equality between this and the parameter. This check can be implemented by calling object.ReferenceEquals() or base.Equals(), where base is object. However, using base.Equals() is a maintenance hazard because while it works if you extend Object directly, if you introduce a new base class that overrides Equals, it suddenly stops working.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3397
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3400:
    Metadata:
      Category: Minor Code Smell
      Title: Methods should not return constants
      Description: There’s no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a method call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3400
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3415:
    Metadata:
      Category: Major Code Smell
      Title: Assertion arguments should be passed in the correct order
      Description: The standard assertions library methods such as AreEqual and AreSame in MSTest and NUnit, or Equal and Same in XUnit, expect the first argument to be the expected value and the second argument to be the actual value. Swap them, and your test will still have the same outcome (succeed/fail when it should) but the error messages will be confusing.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3415
      CustomTags:
      - C#
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3427:
    Metadata:
      Category: Blocker Code Smell
      Title: Method overloads with default parameter values should not overlap
      Description: The rules for method resolution can be complex and may not be fully understood by all developers. The situation becomes even more challenging when dealing with method overloads that have optional parameter values.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3427
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3431:
    Metadata:
      Category: Major Code Smell
      Title: '"[ExpectedException]" should not be used'
      Description: It should be clear to a casual reader what code a test is testing and what results are expected. Unfortunately, that’s not usually the case with the ExpectedException attribute since an exception could be thrown from almost any line in the method.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3431
      CustomTags:
      - C#
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3433:
    Metadata:
      Category: Blocker Code Smell
      Title: Test method signatures should be correct
      Description: 'A method is identified as a test method if it is marked with one of the following attributes:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3433
      CustomTags:
      - C#
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3440:
    Metadata:
      Category: Minor Code Smell
      Title: Variables should not be checked against the values they're about to be assigned
      Description: There’s no point in checking a variable against the value you’re about to assign it. Save the cycles and lines of code, and simply perform the assignment.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3440
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3441:
    Metadata:
      Category: Minor Code Smell
      Title: Redundant property names should be omitted in anonymous classes
      Description: When an anonymous type’s properties are copied from properties or variables with the same names, it yields cleaner code to omit the new type’s property name and the assignment operator.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3441
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3442:
    Metadata:
      Category: Major Code Smell
      Title: '"abstract" classes should not have "public" constructors'
      Description: The abstract modifier in a class declaration is used to indicate that a class is intended only to be a base class of other classes, not instantiated on its own.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3442
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3443:
    Metadata:
      Category: Blocker Code Smell
      Title: Type should not be examined on "System.Type" instances
      Description: Calling GetType on a Type variable will always return the System.Type representation, which is equivalent to typeof(System.Type). This also applies to passing a Type argument to IsInstanceOfType which always returns false.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3443
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3444:
    Metadata:
      Category: Minor Code Smell
      Title: Interfaces should not simply inherit from base interfaces with colliding members
      Description: When an interface inherits from two interfaces that both define a member with the same name, trying to access that member through the derived interface will result in the compiler error CS0229 Ambiguity between 'IBase1.SomeProperty' and 'IBase2.SomeProperty'.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3444
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3445:
    Metadata:
      Category: Major Code Smell
      Title: Exceptions should not be explicitly rethrown
      Description: 'In C#, the throw statement can be used in two different ways:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3445
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3447:
    Metadata:
      Category: Critical Code Smell
      Title: '"[Optional]" should not be used on "ref" or "out" parameters'
      Description: The use of ref or out in combination with Optional attribute is both confusing and contradictory. [Optional] indicates that the parameter doesn’t have to be provided, while out and ref mean that the parameter will be used to return data to the caller (ref additionally indicates that the parameter may also be used to pass data into the method).
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3447
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3449:
    Metadata:
      Category: Critical Bug
      Title: Right operands of shift operators should be integers
      Description: Numbers can be shifted with the << and >> operators, but the right operand of the operation needs to be an int or a type that has an implicit conversion to int. However, when the left operand is dynamic, the compiler’s type checking is turned off, so you can pass anything to the right of a shift operator and have it compile. And if the argument can’t be implicitly converted to int at runtime, then a RuntimeBinderException will be raised.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3449
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3450:
    Metadata:
      Category: Minor Code Smell
      Title: Parameters with "[DefaultParameterValue]" attributes should also be marked "[Optional]"
      Description: There is no point in providing a default value for a parameter if callers are required to provide a value for it anyway. Thus, [DefaultParameterValue] should always be used in conjunction with [Optional].
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3450
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3451:
    Metadata:
      Category: Critical Code Smell
      Title: '"[DefaultValue]" should not be used when "[DefaultParameterValue]" is meant'
      Description: DefaultValue does not make the compiler set the default value, as its name may suggest. What you probably wanted to use is DefaultParameterValue.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3451
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3453:
    Metadata:
      Category: Major Bug
      Title: Classes should not have only "private" constructors
      Description: When a class has only a private constructor, it can’t be instantiated except within the class itself. Such classes can be considered dead code and should be fixed
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3453
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3456:
    Metadata:
      Category: Minor Bug
      Title: '"string.ToCharArray()" and "ReadOnlySpan<T>.ToArray()" should not be called redundantly'
      Description: The string type offers an indexer property that allows you to treat it as a char array. Therefore, if you just need to access a specific character or iterate over all of them, the ToCharArray call should be omitted. For these cases, not omitting makes the code harder to read and less efficient as ToCharArray copies the characters from the string object into a new Unicode character array.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3456
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3457:
    Metadata:
      Category: Major Code Smell
      Title: Composite format strings should be used correctly
      Description: Because composite format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that lead to unexpected behaviors or runtime errors. This rule statically validates the good behavior of composite formats when calling the methods of String.Format, StringBuilder.AppendFormat, Console.Write, Console.WriteLine, TextWriter.Write, TextWriter.WriteLine, Debug.WriteLine(String, Object[]), Trace.TraceError(String, Object[]), Trace.TraceInformation(String, Object[]), Trace.TraceWarning(String, Object[]) and TraceSource.TraceInformation(String, Object[]).
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3457
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3458:
    Metadata:
      Category: Minor Code Smell
      Title: Empty "case" clauses that fall through to the "default" should be omitted
      Description: Empty case clauses that fall through to the default are useless. Whether or not such a case is present, the default clause will be invoked. Such cases simply clutter the code, and should be removed.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3458
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3459:
    Metadata:
      Category: Minor Code Smell
      Title: Unassigned members should be removed
      Description: Fields and auto-properties that are never assigned to hold the default values for their types. They are either pointless code or, more likely, mistakes.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3459
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3464:
    Metadata:
      Category: Blocker Bug
      Title: Type inheritance should not be recursive
      Description: Recursion is a technique used to define a problem in terms of the problem itself, usually in terms of a simpler version of the problem itself.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3464
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3466:
    Metadata:
      Category: Major Bug
      Title: Optional parameters should be passed to "base" calls
      Description: When optional parameter values are not passed to base method calls, the value passed in by the caller is ignored. This can cause the function to behave differently than expected, leading to errors and making the code difficult to debug.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3466
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3532:
    Metadata:
      Category: Minor Code Smell
      Title: Empty "default" clauses should be removed
      Description: The default clause should take appropriate action. Having an empty default is a waste of keystrokes.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3532
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3597:
    Metadata:
      Category: Major Code Smell
      Title: '"ServiceContract" and "OperationContract" attributes should be used together'
      Description: The ServiceContract attribute specifies that a class or interface defines the communication contract of a Windows Communication Foundation (WCF) service. The service operations of this class or interface are defined by OperationContract attributes added to methods. It doesn’t make sense to define a contract without any service operations; thus, in a ServiceContract class or interface at least one method should be annotated with OperationContract. Similarly, WCF only serves OperationContract methods that are defined inside ServiceContract classes or interfaces; thus, this rule also checks that ServiceContract is added to the containing type of OperationContract methods.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3597
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3598:
    Metadata:
      Category: Major Bug
      Title: One-way "OperationContract" methods should have "void" return type
      Description: When declaring a Windows Communication Foundation (WCF) OperationContract method as one-way, that service method won’t return any result, not even an underlying empty confirmation message. These are fire-and-forget methods that are useful in event-like communication. Therefore, specifying a return type has no effect and can confuse readers.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3598
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3600:
    Metadata:
      Category: Critical Code Smell
      Title: '"params" should not be introduced on overrides'
      Description: Adding params to a method override has no effect. The compiler accepts it, but the callers won’t be able to benefit from the added modifier.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3600
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3603:
    Metadata:
      Category: Major Bug
      Title: 'Methods with "Pure" attribute should return a value '
      Description: Marking a method with the Pure attribute indicates that the method doesn’t make any visible state changes. Therefore, a Pure method should return a result otherwise it indicates a no-operation call.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3603
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3604:
    Metadata:
      Category: Minor Code Smell
      Title: Member initializer values should not be redundant
      Description: Fields, properties and events can be initialized either inline or in the constructor. Initializing them inline and in the constructor at the same time is redundant; the inline initialization will be overridden.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3604
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3610:
    Metadata:
      Category: Major Bug
      Title: Nullable type comparison should not be redundant
      Description: Calling GetType() on a nullable value type object returns the underlying value type. Therefore, comparing the returned Type object to typeof(Nullable<SomeType>) will either throw an NullReferenceException or the result will always be true or false and can be known at compile time.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3610
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3626:
    Metadata:
      Category: Minor Code Smell
      Title: Jump statements should not be redundant
      Description: Jump statements, such as return, yield break, goto, and continue let you change the default flow of program execution, but jump statements that direct the control flow to the original direction are just a waste of keystrokes.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3626
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3655:
    Metadata:
      Category: Major Bug
      Title: Empty nullable value should not be accessed
      Description: Nullable value types can hold either a value or null.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3655
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3693:
    Metadata:
      Category: Blocker Bug
      Title: Exception constructors should not throw exceptions
      Description: It may be a good idea to raise an exception in a constructor if you're unable to fully flesh the object in question, but not in an exception constructor. If you do, you'll interfere with the exception that was originally being thrown. Further, it is highly unlikely that an exception raised in the creation of an exception will be properly handled in the calling code, and the unexpected, unhandled exception will lead to program termination.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3693
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3717:
    Metadata:
      Category: Minor Code Smell
      Title: Track use of "NotImplementedException"
      Description: NotImplementedException is often used to mark methods which must be implemented for the overall functionality to be complete, but which the developer wants to implement later. That’s as opposed to the NotSupportedException which is thrown by methods which are required by base classes or interfaces, but which are not appropriate to the current class.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3717
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3776:
    Metadata:
      Category: Critical Code Smell
      Title: Cognitive Complexity of methods should not be too high
      Description: Cognitive Complexity Complexity is a measure of how hard the control flow of a method is to understand.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3776
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Comment: Code gets complicated
  S3869:
    Metadata:
      Category: Blocker Bug
      Title: '"SafeHandle.DangerousGetHandle" should not be called'
      Description: The SafeHandle.DangerousGetHandle method poses significant risks and should be used carefully. This method carries the inherent danger of potentially returning an invalid handle, which can result in resource leaks and security vulnerabilities. Although it is technically possible to utilize this method without encountering issues, doing so correctly requires a high level of expertise. Therefore, it is recommended to avoid using this method altogether.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3869
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3871:
    Metadata:
      Category: Critical Code Smell
      Title: Exception types should be "public"
      Description: The point of having custom exception types is to convey more information than is available in standard types. But custom exception types must be public for that to work.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3871
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1064
  S3872:
    Metadata:
      Category: Minor Code Smell
      Title: Parameter names should not duplicate the names of their methods
      Description: The name of a method should communicate what it does, and the names of its parameters should indicate how they’re used. If a method and its parameter have the same name it is an indication that one of these rules of thumb has been broken, if not both. Even if by some trick of language that’s not the case, it is still likely to confuse callers and maintainers.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3872
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3874:
    Metadata:
      Category: Critical Code Smell
      Title: '"out" and "ref" parameters should not be used'
      Description: Passing a parameter by reference, which is what happens when you use the out or ref parameter modifiers, means that the method will receive a pointer to the argument, rather than the argument itself. If the argument was a value type, the method will be able to change the argument’s values. If it was a reference type, then the method receives a pointer to a pointer, which is usually not what was intended. Even when it is what was intended, this is the sort of thing that’s difficult to get right, and should be used with caution.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3874
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1021
  S3875:
    Metadata:
      Category: Blocker Code Smell
      Title: '"operator==" should not be overloaded on reference types'
      Description: The use of == to compare two objects is expected to do a reference comparison. That is, it is expected to return true if and only if they are the same object instance. Overloading the operator to do anything else will inevitably lead to the introduction of bugs by callers.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3875
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3876:
    Metadata:
      Category: Minor Code Smell
      Title: Strings or integral types should be used for indexers
      Description: Strings and integral types are typically used as indexers. When some other type is required, it typically indicates design problems, and potentially a situation where a method should be used instead.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3876
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3877:
    Metadata:
      Category: Blocker Code Smell
      Title: Exceptions should not be thrown from unexpected methods
      Description: The rule is reporting when an exception is thrown from certain methods and constructors. These methods are expected to behave in a specific way and throwing an exception from them can lead to unexpected behavior and break the calling code.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3877
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      production:
        Severity: Warning
  S3880:
    Metadata:
      Category: Major Code Smell
      Title: Finalizers should not be empty
      Description: Finalizers come with a performance cost due to the overhead of tracking the life cycle of objects. An empty one is consequently costly with no benefit or justification.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3880
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3881:
    Metadata:
      Category: Major Code Smell
      Title: '"IDisposable" should be implemented correctly'
      Description: The IDisposable interface is a mechanism to release unmanaged resources, if not implemented correctly this could result in resource leaks or more severe bugs.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3881
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S3884:
    Metadata:
      Category: Blocker Vulnerability
      Title: '"CoSetProxyBlanket" and "CoInitializeSecurity" should not be used'
      Description: This rule is deprecated, and will eventually be removed.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3884
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3885:
    Metadata:
      Category: Major Code Smell
      Title: '"Assembly.Load" should be used'
      Description: The parameter to Assembly.Load includes the full specification of the dll to be loaded. Use another method, and you might end up with a dll other than the one you expected.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3885
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3887:
    Metadata:
      Category: Minor Bug
      Title: Mutable, non-private fields should not be "readonly"
      Description: Using the readonly keyword on a field means it can’t be changed after initialization. However, that’s only partly true when applied to collections or arrays. The readonly keyword enforces that another instance can’t be assigned to the field, but it cannot keep the contents from being updated. In practice, the field value can be changed, and the use of readonly on such a field is misleading, and you’re likely not getting the behavior you expect.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3887
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3889:
    Metadata:
      Category: Blocker Bug
      Title: '"Thread.Resume" and "Thread.Suspend" should not be used'
      Description: Thread.Suspend and Thread.Resume can give unpredictable results, and both methods have been deprecated. Indeed, if Thread.Suspend is not used very carefully, a thread can be suspended while holding a lock, thus leading to a deadlock.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3889
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3897:
    Metadata:
      Category: Minor Code Smell
      Title: Classes that provide "Equals(<T>)" should implement "IEquatable<T>"
      Description: 'The IEquatable<T> interface has only one method in it: Equals(<T>). If you’ve already written Equals(T), there’s no reason not to explicitly implement IEquatable<T>. Doing so expands the utility of your class by allowing it to be used where an IEquatable is called for.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3897
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3898:
    Metadata:
      Category: Major Code Smell
      Title: Value types should implement "IEquatable<T>"
      Description: If you’re using a struct, it is likely because you’re interested in performance. But by failing to implement IEquatable<T> you’re loosing performance when comparisons are made because without IEquatable<T>, boxing and reflection are used to make comparisons.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3898
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S3900:
    Metadata:
      Category: Major Code Smell
      Title: Arguments of public methods should be validated against null
      Description: Methods declared as public, protected, or protected internal can be accessed from other assemblies, which means you should validate parameters to be within the expected constraints. In general, checking against null is recommended in defensive programming.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3900
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1062
  S3902:
    Metadata:
      Category: Major Code Smell
      Title: '"Assembly.GetExecutingAssembly" should not be called'
      Description: Using Type.Assembly to get the current assembly is nearly free in terms of performance; it’s a simple property access. On the other hand, Assembly.GetExecutingAssembly() can take up to 30 times as long because it walks up the call stack to find the assembly.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3902
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3903:
    Metadata:
      Category: Major Bug
      Title: Types should be defined in named namespaces
      Description: Types are declared in namespaces in order to prevent name collisions and as a way to organize them into the object hierarchy. Types that are defined outside any named namespace are in a global namespace that cannot be referenced in code.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3903
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: Doesn't work with file-scoped namespaces, so disabling for now.
  S3904:
    Metadata:
      Category: Critical Code Smell
      Title: Assemblies should have version information
      Description: The AssemblyVersion attribute is used to specify the version number of an assembly. An assembly is a compiled unit of code, which can be marked with a version number by applying the attribute to an assembly’s source code file.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3904
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3906:
    Metadata:
      Category: Major Code Smell
      Title: Event Handlers should have the correct signature
      Description: 'Delegate event handlers (i.e. delegates used as type of an event) should have a very specific signature:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3906
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3908:
    Metadata:
      Category: Major Code Smell
      Title: Generic event handlers should be used
      Description: Since .Net Framework version 2.0 it is not necessary to declare a delegate that specifies a class derived from System.EventArgs. The System.EventHandler<TEventArgs> delegate mechanism should be used instead as it allows any class derived from EventArgs to be used with that handler.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3908
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3909:
    Metadata:
      Category: Major Code Smell
      Title: Collections should implement the generic interface
      Description: The NET Framework 2.0 introduced the generic interface System.Collections.Generic.IEnumerable<T> and it should be preferred over the older, non generic, interfaces.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3909
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1010
  S3923:
    Metadata:
      Category: Major Bug
      Title: All branches in a conditional structure should not have exactly the same implementation
      Description: Having all branches of a switch or if chain with the same implementation indicates a problem.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3923
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3925:
    Metadata:
      Category: Major Code Smell
      Title: '"ISerializable" should be implemented correctly'
      Description: The ISerializable interface is the mechanism to control the type serialization process. If not implemented correctly this could result in an invalid serialization and hard-to-detect bugs.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3925
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: TODO - is ISerializable still relevant?
  S3926:
    Metadata:
      Category: Major Bug
      Title: Deserialization methods should be provided for "OptionalField" members
      Description: Fields marked with System.Runtime.Serialization.OptionalFieldAttribute are serialized just like any other field. But such fields are ignored on deserialization, and retain the default values associated with their types. Therefore, deserialization event handlers should be declared to set such fields during the deserialization process.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3926
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3927:
    Metadata:
      Category: Major Bug
      Title: Serialization event handlers should be implemented correctly
      Description: Serialization event handlers that don’t have the correct signature will not be called, bypassing augmentations to the automated de/serialization.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3927
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3928:
    Metadata:
      Category: Major Code Smell
      Title: 'Parameter names used into ArgumentException constructors should match an existing one '
      Description: 'Some constructors of the ArgumentException, ArgumentNullException, ArgumentOutOfRangeException and DuplicateWaitObjectException classes must be fed with a valid parameter name. This rule raises an issue in two cases:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3928
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      production:
        Severity: Warning
  S3937:
    Metadata:
      Category: Critical Code Smell
      Title: Number patterns should be regular
      Description: The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus 1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3937
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3949:
    Metadata:
      Category: Major Bug
      Title: Calculations should not overflow
      Description: Numbers are infinite, but the types that hold them are not. Each numeric type has hard upper and lower bounds. Try to calculate or assign numbers beyond those bounds, and the result will be a value that has silently wrapped around from the expected positive value to a negative one, or vice versa.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3949
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Suggestion
  S3956:
    Metadata:
      Category: Major Code Smell
      Title: '"Generic.List" instances should not be part of public APIs'
      Description: 'System.Collections.Generic.List<T> is a generic collection that is designed for performance and not inheritance. For example, it does not contain virtual members that make it easier to change the behavior of an inherited class. That means that future attempts to expand the behavior will be spoiled because the extension points simply aren’t there. Instead, one of the following generic collections should be used:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3956
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1002
  S3962:
    Metadata:
      Category: Minor Code Smell
      Title: '"static readonly" constants should be "const" instead'
      Description: The value of a static readonly field is computed at runtime while the value of a const field is calculated at compile time, which improves performance.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3962
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1802
  S3963:
    Metadata:
      Category: Minor Code Smell
      Title: '"static" fields should be initialized inline'
      Description: When a static constructor serves no other purpose that initializing static fields, it comes with an unnecessary performance cost because the compiler generates a check before each static method or instance constructor invocation.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3963
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1810 and CA2207
  S3966:
    Metadata:
      Category: Major Code Smell
      Title: Objects should not be disposed more than once
      Description: Disposing an object twice in the same method, either with the using keyword or by calling Dispose directly, is confusing and error-prone. For example, another developer might try to use an already-disposed object, or there can be runtime errors for specific paths in the code.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3966
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3967:
    Metadata:
      Category: Minor Code Smell
      Title: Multidimensional arrays should not be used
      Description: A jagged array is an array whose elements are arrays. It is recommended over a multidimensional array because the arrays that make up the elements can be of different sizes, which avoids wasting memory space.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3967
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3971:
    Metadata:
      Category: Major Code Smell
      Title: '"GC.SuppressFinalize" should not be called'
      Description: GC.SuppressFinalize requests that the system not call the finalizer for the specified object. This should only be done when implementing Dispose as part of the Dispose Pattern.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3971
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3972:
    Metadata:
      Category: Critical Code Smell
      Title: Conditionals should start on new lines
      Description: Placing an if statement on the same line as the closing } from a preceding if, else, or else if block can lead to confusion and potential errors. It may indicate a missing else statement or create ambiguity for maintainers who might fail to understand that the two statements are unconnected.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3972
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3973:
    Metadata:
      Category: Critical Code Smell
      Title: A conditionally executed single line should be denoted by indentation
      Description: When the line immediately after conditional statements has neither curly braces nor indentation, the intent of the code is unclear and perhaps not executed as expected. Additionally, such code is confusing to maintainers.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3973
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3981:
    Metadata:
      Category: Major Bug
      Title: Collection sizes and array length comparisons should make sense
      Description: The size of a collection and the length of an array are always greater than or equal to zero. Testing it doesn’t make sense, since the result is always true.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3981
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3984:
    Metadata:
      Category: Major Bug
      Title: Exceptions should not be created without being thrown
      Description: Creating a new Exception without actually throwing does not achieve the intended purpose.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3984
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3990:
    Metadata:
      Category: Major Code Smell
      Title: Assemblies should be marked as CLS compliant
      Description: Assemblies should conform with the Common Language Specification (CLS) in order to be usable across programming languages. To be compliant an assembly has to indicate it with System.CLSCompliantAttribute.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3990
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: CA1014
  S3992:
    Metadata:
      Category: Major Code Smell
      Title: Assemblies should explicitly specify COM visibility
      Description: Assemblies should explicitly indicate whether they are meant to be COM visible or not. If the ComVisibleAttribute is not present, the default is to make the content of the assembly visible to COM clients.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3992
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: CA1017
  S3993:
    Metadata:
      Category: Major Code Smell
      Title: Custom attributes should be marked with "System.AttributeUsageAttribute"
      Description: When defining custom attributes, System.AttributeUsageAttribute must be used to indicate where the attribute can be applied. This will determine its valid locations in the code.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3993
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1018
  S3994:
    Metadata:
      Category: Major Code Smell
      Title: URI Parameters should not be strings
      Description: String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred. At minimum, an overload of the method taking a System.Uri as a parameter should be provided in each class that contains a method with an apparent Uri passed as a string.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3994
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
  S3995:
    Metadata:
      Category: Major Code Smell
      Title: URI return values should not be strings
      Description: String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3995
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3996:
    Metadata:
      Category: Major Code Smell
      Title: URI properties should not be strings
      Description: String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3996
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S3997:
    Metadata:
      Category: Major Code Smell
      Title: String URI overloads should call "System.Uri" overloads
      Description: String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3997
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S3998:
    Metadata:
      Category: Critical Code Smell
      Title: Threads should not lock on objects with weak identity
      Description: Objects that can be accessed across application domain boundaries are said to have weak identity. This means that these objects can be considered shared resources outside of the domain, which can be lead to them being accessed or modified by multiple threads or concurrent parts of a program, outside of the domain.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3998
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4000:
    Metadata:
      Category: Critical Code Smell
      Title: Pointers to unmanaged memory should not be visible
      Description: Pointer and unmanaged function pointer types such as IntPtr, UIntPtr, int* etc. are used to access unmanaged memory, usually in order to use C or C++ libraries. If such a pointer is not secured by making it private, internal or readonly, it can lead to a vulnerability allowing access to arbitrary locations.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4000
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4002:
    Metadata:
      Category: Major Code Smell
      Title: Disposable types should declare finalizers
      Description: 'This rule raises an issue when a disposable type contains fields of the following types and does not implement a finalizer:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4002
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4004:
    Metadata:
      Category: Major Code Smell
      Title: Collection properties should be readonly
      Description: A writable collection property can be replaced by a completely different collection. Making it readonly prevents that while still allowing individual members to be set. If you want to allow the replacement of the whole collection the recommended pattern is to implement a method to remove all the elements (e.g. System.Collections.List<T>.Clear) and a method to populate the collection (e.g. System.Collections.List<T>.AddRange).
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4004
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA2227
  S4005:
    Metadata:
      Category: Major Code Smell
      Title: '"System.Uri" arguments should be used instead of strings'
      Description: String representations of URIs or URLs are prone to parsing and encoding errors which can lead to vulnerabilities. The System.Uri class is a safe alternative and should be preferred.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4005
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: CA2234
  S4015:
    Metadata:
      Category: Critical Code Smell
      Title: Inherited member visibility should not be decreased
      Description: Decreasing the accessibility level of an inherited method that is not overridable to private will shadow the name of the base method and can lead to confusion.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4015
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4016:
    Metadata:
      Category: Major Code Smell
      Title: Enumeration members should not be named "Reserved"
      Description: If an enum member’s name contains the word "reserved" it implies it is not currently used and will be change in the future. However changing an enum member is a breaking change and can create significant problems. There is no need to reserve an enum member since a new member can be added in the future, and such an addition will usually not be a breaking change.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4016
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4017:
    Metadata:
      Category: Major Code Smell
      Title: Method signatures should not contain nested generic types
      Description: A nested type is a type argument that is also a generic type. Calling a method with such a nested type argument requires complicated and confusing code. It should be avoided as much as possible.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4017
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S4018:
    Metadata:
      Category: Minor Code Smell
      Title: All type parameters should be used in the parameter list to enable type inference
      Description: Type inference enables the call of a generic method without explicitly specifying its type arguments. This is not possible when a parameter type is missing from the argument list.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4018
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S4019:
    Metadata:
      Category: Critical Code Smell
      Title: Base class methods should not be hidden
      Description: 'When a method in a derived class has:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4019
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4022:
    Metadata:
      Category: Minor Code Smell
      Title: Enumerations should have "Int32" storage
      Description: By default the storage type of an enum is Int32. In most cases it is not necessary to change this. In particular you will not achieve any performance gain by using a smaller data type (e.g. Byte) and may limit future uses.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4022
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4023:
    Metadata:
      Category: Minor Code Smell
      Title: Interfaces should not be empty
      Description: Empty interfaces should be avoided as they do not provide any functional requirements for implementing classes.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4023
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
      api:
        Severity: Suggestion
  S4025:
    Metadata:
      Category: Critical Code Smell
      Title: Child class fields should not differ from parent class fields only by capitalization
      Description: Having a field in a child class with a name that differs from a parent class' field only by capitalization is sure to cause confusion. Such child class fields should be renamed.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4025
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4026:
    Metadata:
      Category: Minor Code Smell
      Title: Assemblies should be marked with "NeutralResourcesLanguageAttribute"
      Description: It is important to inform the ResourceManager of the language used to display the resources of the neutral culture for an assembly. This improves lookup performance for the first resource loaded.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4026
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S4027:
    Metadata:
      Category: Minor Code Smell
      Title: Exceptions should provide standard constructors
      Description: 'Exceptions types should provide the following constructors:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4027
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1032
  S4035:
    Metadata:
      Category: Major Code Smell
      Title: Classes implementing "IEquatable<T>" should be sealed
      Description: When a class implements the IEquatable<T> interface, it enters a contract that, in effect, states "I know how to compare two instances of type T or any type derived from T for equality.". However if that class is derived, it is very unlikely that the base class will know how to make a meaningful comparison. Therefore that implicit contract is now broken.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4035
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4036:
    Metadata:
      Category: Minor Security Hotspot
      Title: Searching OS commands in PATH is security-sensitive
      Description: When executing an OS command and unless you specify the full path to the executable, then the locations in your application’s PATH environment variable will be searched for the executable. That search could leave an opening for an attacker if one of the elements in PATH is a directory under his control.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4036
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4039:
    Metadata:
      Category: Critical Code Smell
      Title: Interface methods should be callable by derived types
      Description: When a base type explicitly implements a public interface method, that method is only accessible in derived types through a reference to the current instance (namely this). If the derived type explicitly overrides that interface method, the base implementation becomes inaccessible.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4039
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4040:
    Metadata:
      Category: Minor Code Smell
      Title: Strings should be normalized to uppercase
      Description: Certain characters, once normalized to lowercase, cannot make a round trip. That is, they can not be converted from one locale to another and then accurately restored to their original characters.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4040
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1308
  S4041:
    Metadata:
      Category: Minor Code Smell
      Title: Type names should not match namespaces
      Description: When a type name matches the name of a publicly defined namespace, for instance one in the .NET framework class library, it leads to confusion and makes the library that much harder to use.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4041
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4047:
    Metadata:
      Category: Minor Code Smell
      Title: Generics should be used when appropriate
      Description: When a reference parameter (keyword ref) is used, the passed argument type must exactly match the reference parameter type. This means that to be able to pass a derived type, it must be cast and assigned to a variable of the proper type. Use of generic methods eliminates that cumbersome down casting and should therefore be preferred.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4047
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4049:
    Metadata:
      Category: Minor Code Smell
      Title: Properties should be preferred
      Description: Properties are accessed like fields which makes them easier to use.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4049
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1024
  S4050:
    Metadata:
      Category: Major Code Smell
      Title: Operators should be overloaded consistently
      Description: When implementing operator overloads, it is very important to make sure that all related operators and methods are consistent in their implementation.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4050
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4052:
    Metadata:
      Category: Minor Code Smell
      Title: Types should not extend outdated base types
      Description: With the advent of .NET framework version 2, certain practices have become obsolete.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4052
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S4055:
    Metadata:
      Category: Major Code Smell
      Title: Literals should not be passed as localized parameters
      Description: String literals embedded in the source code will not be localized properly.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4055
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S4056:
    Metadata:
      Category: Minor Code Smell
      Title: Overloads with a "CultureInfo" or an "IFormatProvider" parameter should be used
      Description: When a System.Globalization.CultureInfo or IFormatProvider object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4056
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1305
  S4057:
    Metadata:
      Category: Major Code Smell
      Title: Locales should be set for data types
      Description: When you create a DataTable or DataSet, you should set the locale explicitly. By default, the locale for these types is the current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant culture (CultureInfo.InvariantCulture).
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4057
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4058:
    Metadata:
      Category: Minor Code Smell
      Title: Overloads with a "StringComparison" parameter should be used
      Description: Many string operations, the Compare and Equals methods in particular, provide an overload that accepts a StringComparison enumeration value as a parameter. Calling these overloads and explicitly providing this parameter makes your code clearer and easier to maintain.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4058
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1310
  S4059:
    Metadata:
      Category: Major Code Smell
      Title: Property names should not match get methods
      Description: Properties and Get method should have names that makes them clearly distinguishable.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4059
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4060:
    Metadata:
      Category: Minor Code Smell
      Title: Non-abstract attributes should be sealed
      Description: The .NET framework class library provides methods for retrieving custom attributes. Sealing the attribute eliminates the search through the inheritance hierarchy, and can improve performance.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4060
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: CA1813
  S4061:
    Metadata:
      Category: Minor Code Smell
      Title: '"params" should be used instead of "varargs"'
      Description: A method using the VarArgs calling convention is not Common Language Specification (CLS) compliant and might not be accessible across programming languages, while the params keyword works the same way and is CLS compliant.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4061
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4069:
    Metadata:
      Category: Minor Code Smell
      Title: Operator overloads should have named alternatives
      Description: 'Operator overloading is convenient but unfortunately not portable across languages. To be able to access the same functionality from another language you need to provide an alternate named method following the convention:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4069
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
        Redundant: CA2225
  S4070:
    Metadata:
      Category: Major Code Smell
      Title: Non-flags enums should not be marked with "FlagsAttribute"
      Description: This rule raises an issue when an externally visible enumeration is marked with FlagsAttribute and one, or more, of its values is not a power of 2 or a combination of the other defined values.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4070
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA2217
  S4136:
    Metadata:
      Category: Minor Code Smell
      Title: Method overloads should be grouped together
      Description: For clarity, all overloads of the same method should be grouped together. That lets both users and maintainers quickly understand all the current available options.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4136
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Warning
  S4142:
    Metadata:
      Category: Major Code Smell
      Title: Duplicate values should not be passed as arguments
      Description: There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was intended for one of the arguments.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4142
      CustomTags:
      - C#
      - MainSourceScope
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4143:
    Metadata:
      Category: Major Bug
      Title: Collection elements should not be replaced unconditionally
      Description: Storing a value inside a collection at a given key or index and then unconditionally overwriting it without reading the initial value is a case of a "dead store".
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4143
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4144:
    Metadata:
      Category: Major Code Smell
      Title: Methods should not have identical implementations
      Description: Two methods having the same implementation are suspicious. It might be that something else was intended. Or the duplication is intentional, which becomes a maintenance burden.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4144
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4158:
    Metadata:
      Category: Minor Bug
      Title: Empty collections should not be accessed or iterated
      Description: When a collection is empty, iterating it has no effect. Doing so anyway is likely a bug; either population was accidentally omitted, or the iteration needs to be revised.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4158
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Comment: Too many false positives
  S4159:
    Metadata:
      Category: Blocker Bug
      Title: Classes should implement their "ExportAttribute" interfaces
      Description: The Attributed Programming Model, also known as Attribute-oriented programming (@OP), is a programming model used to embed attributes within codes.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4159
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4200:
    Metadata:
      Category: Major Code Smell
      Title: Native methods should be wrapped
      Description: Native methods are functions that reside in libraries outside the .NET runtime. Calling them is helpful for interoperability with applications and libraries written in other programming languages, mainly when performing platform-specific operations. However, doing so comes with additional risks since it means stepping out of the memory-safety model of the runtime. It is therefore highly recommended to take extra steps, like input validation, when invoking native methods. Making the native method private and providing a wrapper that performs these additional steps is the best way to do so.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4200
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4201:
    Metadata:
      Category: Minor Code Smell
      Title: Null checks should not be used with "is"
      Description: There’s no need to null test in conjunction with an is test. null is not an instance of anything, so a null check is redundant.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4201
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4210:
    Metadata:
      Category: Major Bug
      Title: Windows Forms entry points should be marked with STAThread
      Description: When an assembly uses Windows Forms (classes and interfaces from the System.Windows.Forms namespace) its entry point should be marked with the STAThreadAttribute to indicate that the threading model should be "Single-Threaded Apartment" (STA) which is the only one supported by Windows Forms.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4210
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4211:
    Metadata:
      Category: Major Vulnerability
      Title: Members should not have conflicting transparency annotations
      Description: Transparency attributes, SecurityCriticalAttribute and SecuritySafeCriticalAttribute are used to identify code that performs security-critical operations. The second one indicates that it is safe to call this code from transparent, while the first one does not. Since the transparency attributes of code elements with larger scope take precedence over transparency attributes of code elements that are contained in the first element a class, for instance, with a SecurityCriticalAttribute can not contain a method with a SecuritySafeCriticalAttribute.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4211
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4212:
    Metadata:
      Category: Major Vulnerability
      Title: Serialization constructors should be secured
      Description: Because serialization constructors allocate and initialize objects, security checks that are present on regular constructors must also be present on a serialization constructor. Failure to do so would allow callers that could not otherwise create an instance to use the serialization constructor to do this.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4212
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4214:
    Metadata:
      Category: Major Code Smell
      Title: '"P/Invoke" methods should not be visible'
      Description: This rule is deprecated; use {rule:csharpsquid:S4200} instead.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4214
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4220:
    Metadata:
      Category: Major Code Smell
      Title: Events should have proper arguments
      Description: 'When raising an event, two arguments are expected by the EventHandler delegate: Sender and event-data. There are three guidelines regarding these parameters:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4220
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4225:
    Metadata:
      Category: Minor Code Smell
      Title: Extension methods should not extend "object"
      Description: ﻿Creating an extension method that extends object is not recommended because it makes the method available on every type. Extensions should be applied at the most specialized level possible, and that is very unlikely to be object.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4225
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4226:
    Metadata:
      Category: Minor Code Smell
      Title: Extensions should be in separate namespaces
      Description: It makes little sense to create an extension method when it is possible to just add that method to the class itself.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4226
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: None
  S4260:
    Metadata:
      Category: Major Bug
      Title: '"ConstructorArgument" parameters should exist in constructors'
      Description: When creating a custom Markup Extension that accepts parameters in WPF, the ConstructorArgument markup must be used to identify the discrete properties that match these parameters. However since this is done via a string, the compiler won’t give you any warning in case there are typos.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4260
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4261:
    Metadata:
      Category: Minor Code Smell
      Title: Methods should be named according to their synchronicities
      Description: According to the Task-based Asynchronous Pattern (TAP), methods returning either a System.Threading.Tasks.Task or a System.Threading.Tasks.Task<TResult> are considered "asynchronous". Such methods should use the Async suffix. Conversely methods which do not return such Tasks should not have an "Async" suffix in their names.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4261
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S4275:
    Metadata:
      Category: Critical Bug
      Title: Getters and setters should access the expected fields
      Description: Properties provide a way to enforce encapsulation by providing accessors that give controlled access to private fields. However, in classes with multiple fields, it is not unusual that copy-and-paste is used to quickly create the needed properties, which can result in the wrong field being accessed by a getter or setter.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4275
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4277:
    Metadata:
      Category: Critical Bug
      Title: '"Shared" parts should not be created with "new"'
      Description: Marking a class with PartCreationPolicy(CreationPolicy.Shared), which is part of Managed Extensibility Framework (MEF), means that a single, shared instance of the exported object will be created. Therefore it doesn’t make sense to create new instances using the constructor and it will most likely result in unexpected behaviours.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4277
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4423:
    Metadata:
      Category: Critical Vulnerability
      Title: Weak SSL/TLS protocols should not be used
      Description: This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4423
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4426:
    Metadata:
      Category: Critical Vulnerability
      Title: Cryptographic keys should be robust
      Description: This vulnerability exposes encrypted data to attacks whose goal is to recover the plaintext.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4426
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4428:
    Metadata:
      Category: Major Bug
      Title: '"PartCreationPolicyAttribute" should be used with "ExportAttribute"'
      Description: To customize the default behavior for an export in the Managed Extensibility Framework (MEF), applying the PartCreationPolicyAttribute is necessary. For the PartCreationPolicyAttribute to be meaningful in the context of an export, it is required to also annotate the class with the ExportAttribute.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4428
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4432:
    Metadata:
      Category: Critical Vulnerability
      Title: AES encryption algorithm should be used with secured mode
      Description: 'Encryption algorithms can be used with various modes. Some combinations are not secured:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4432
      CustomTags:
      - C#
      - MainSourceScope
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4433:
    Metadata:
      Category: Critical Vulnerability
      Title: LDAP connections should be authenticated
      Description: 'Lightweight Directory Access Protocol (LDAP) servers provide two main authentication methods: the SASL and Simple ones. The Simple Authentication method also breaks down into three different mechanisms:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4433
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4456:
    Metadata:
      Category: Major Code Smell
      Title: Parameter validation in yielding methods should be wrapped
      Description: Because of the way yield methods are rewritten by the compiler (they become lazily evaluated state machines) any exceptions thrown during the parameters check will happen only when the collection is iterated over. That could happen far away from the source of the buggy code.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4456
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4457:
    Metadata:
      Category: Major Code Smell
      Title: Parameter validation in "async"/"await" methods should be wrapped
      Description: Because of the way async/await methods are rewritten by the compiler, any exceptions thrown during the parameters check will happen only when the task is observed. That could happen far away from the source of the buggy code or never happen for fire-and-forget tasks.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4457
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4462:
    Metadata:
      Category: Blocker Code Smell
      Title: Calls to "async" methods should not be blocking
      Description: Making blocking calls to async methods transforms code that was intended to be asynchronous into a blocking operation. Doing so can cause deadlocks and unexpected blocking of context threads.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4462
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: VSTHRD002
  S4487:
    Metadata:
      Category: Critical Code Smell
      Title: Unread "private" fields should be removed
      Description: Private fields which are written but never read are a case of "dead store". Changing the value of such a field is useless and most probably indicates an error in the code.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4487
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: IDE0052
  S4507:
    Metadata:
      Category: Minor Security Hotspot
      Title: Delivering code in production with debug features activated is security-sensitive
      Description: Development tools and frameworks usually have options to make debugging easier for developers. Although these features are useful during development, they should never be enabled for applications deployed in production. Debug instructions or error messages can leak detailed information about the system, like the application’s path or file names.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4507
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4524:
    Metadata:
      Category: Critical Code Smell
      Title: '"default" clauses should be first or last'
      Description: The switch statement is a conditional statement that executes a sequence of instructions based on patterns matching the provided value.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4524
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4564:
    Metadata:
      Category: Major Vulnerability
      Title: ASP.NET HTTP request validation feature should not be disabled
      Description: ASP.Net has a feature to validate HTTP requests to prevent potentially dangerous content to perform a cross-site scripting (XSS) attack. There is no reason to disable this mechanism even if other checks to prevent XXS attacks are in place.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4564
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4581:
    Metadata:
      Category: Major Code Smell
      Title: '"new Guid()" should not be used'
      Description: 'When the syntax new Guid() (i.e. parameterless instantiation) is used, it must be that one of three things is wanted:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4581
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4583:
    Metadata:
      Category: Critical Bug
      Title: Calls to delegate's method "BeginInvoke" should be paired with calls to "EndInvoke"
      Description: When calling the BeginInvoke method of a delegate, resources are allocated that are only freed up when EndInvoke is called. Failing to pair BeginInvoke with EndInvoke can lead to resource leaks and incomplete asynchronous calls.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4583
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4586:
    Metadata:
      Category: Critical Bug
      Title: Non-async "Task/Task<T>" methods should not return null
      Description: Returning null from a non-async Task/Task<TResult> method will cause a NullReferenceException at runtime if the method is awaited. This problem can be avoided by returning Task.CompletedTask or Task.FromResult<TResult>(null) respectively.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4586
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4635:
    Metadata:
      Category: Critical Code Smell
      Title: Start index should be used instead of calling Substring
      Description: 'It is important to be careful when searching for characters within a substring. Let’s consider the following example:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4635
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4784:
    Metadata:
      Category: Critical Security Hotspot
      Title: Using regular expressions is security-sensitive
      Description: 'Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4784
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4787:
    Metadata:
      Category: Critical Security Hotspot
      Title: Encrypting data is security-sensitive
      Description: 'Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4787
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4790:
    Metadata:
      Category: Critical Security Hotspot
      Title: Using weak hashing algorithms is security-sensitive
      Description: Cryptographic hash algorithms such as MD2, MD4, MD5, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160 and SHA-1 are no longer considered secure, because it is possible to have collisions (little computational effort is enough to find two or more different inputs that produce the same hash).
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4790
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4792:
    Metadata:
      Category: Critical Security Hotspot
      Title: Configuring loggers is security-sensitive
      Description: 'Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4792
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4818:
    Metadata:
      Category: Critical Security Hotspot
      Title: Using Sockets is security-sensitive
      Description: 'Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4818
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4823:
    Metadata:
      Category: Critical Security Hotspot
      Title: Using command line arguments is security-sensitive
      Description: 'Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4823
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4829:
    Metadata:
      Category: Critical Security Hotspot
      Title: Reading the Standard Input is security-sensitive
      Description: 'Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4829
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S4830:
    Metadata:
      Category: Critical Vulnerability
      Title: Server certificates should be verified during SSL/TLS connections
      Description: This vulnerability makes it possible that an encrypted communication is intercepted.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4830
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA5359
  S4834:
    Metadata:
      Category: Minor Security Hotspot
      Title: Controlling permissions is security-sensitive
      Description: 'The access control of an application must be properly implemented in order to restrict access to resources to authorized entities otherwise this could lead to vulnerabilities:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4834
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S5034:
    Metadata:
      Category: Critical Code Smell
      Title: '"ValueTask" should be consumed correctly'
      Description: ValueTask<TResult> provides a value type that wraps a Task<TResult> and the corresponding TResult. It was introduced in .NET Core 2.0 to optimize memory allocation when functions return their results synchronously.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5034
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5042:
    Metadata:
      Category: Critical Security Hotspot
      Title: Expanding archive files without controlling resource consumption is security-sensitive
      Description: 'Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can lead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of uncompressed data. To achieve this extreme compression ratio, attackers will compress irrelevant data (eg: a long string of repeated bytes).'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5042
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5332:
    Metadata:
      Category: Critical Security Hotspot
      Title: Using clear-text protocols is security-sensitive
      Description: 'Clear-text protocols such as ftp, telnet, or http lack encryption of transported data, as well as the capability to build an authenticated connection. It means that an attacker able to sniff traffic from the network can read, modify, or corrupt the transported content. These protocols are not secure as they expose applications to an extensive range of risks:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5332
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5542:
    Metadata:
      Category: Critical Vulnerability
      Title: Encryption algorithms should be used with secure mode and padding scheme
      Description: This vulnerability exposes encrypted data to a number of attacks whose goal is to recover the plaintext.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5542
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5547:
    Metadata:
      Category: Critical Vulnerability
      Title: Cipher algorithms should be robust
      Description: This vulnerability makes it possible that the cleartext of the encrypted message might be recoverable without prior knowledge of the key.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5547
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5659:
    Metadata:
      Category: Critical Vulnerability
      Title: JWT should be signed and verified with strong cipher algorithms
      Description: This vulnerability allows forging of JSON Web Tokens to impersonate other users.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5659
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5753:
    Metadata:
      Category: Major Security Hotspot
      Title: Disabling ASP.NET "Request Validation" feature is security-sensitive
      Description: ASP.NET 1.1+ comes with a feature called Request Validation, preventing the server to accept content containing un-encoded HTML. This feature comes as a first protection layer against Cross-Site Scripting (XSS) attacks and act as a simple Web Application Firewall (WAF) rejecting requests potentially containing malicious content.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5753
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5766:
    Metadata:
      Category: Major Security Hotspot
      Title: Deserializing objects without performing data validation is security-sensitive
      Description: Deserialization process extracts data from the serialized representation of an object and reconstruct it directly, without calling constructors. Thus, data validation implemented in constructors can be bypassed if serialized objects are controlled by an attacker.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5766
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5773:
    Metadata:
      Category: Major Vulnerability
      Title: Types allowed to be deserialized should be restricted
      Description: Deserialization is the process of converting serialized data (such as objects or data structures) back into their original form. Types allowed to be unserialized should be strictly controlled.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5773
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S818:
    Metadata:
      Category: Minor Code Smell
      Title: Literal suffixes should be upper case
      Description: Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-818
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S881:
    Metadata:
      Category: Major Code Smell
      Title: Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression
      Description: 'The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-881
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Suggestion
  S907:
    Metadata:
      Category: Major Code Smell
      Title: '"goto" statement should not be used'
      Description: goto is an unstructured control flow statement. It makes code less readable and maintainable. Structured control flow statements such as if, for, while, continue or break should be used instead.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-907
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S927:
    Metadata:
      Category: Critical Code Smell
      Title: Parameter names should match base declaration and other partial definitions
      Description: Parameters are part of the method signature and its identity.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-927
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: CA1725
  S9999-cpd:
    Metadata:
      Category: ''
      Title: Copy-paste token calculator
      Description: ''
      CustomTags:
      - MainSourceScope
      - TestSourceScope
      - Utility
      - NotConfigurable
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S9999-metadata:
    Metadata:
      Category: ''
      Title: File metadata generator
      Description: ''
      CustomTags:
      - MainSourceScope
      - TestSourceScope
      - Utility
      - NotConfigurable
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S9999-metrics:
    Metadata:
      Category: ''
      Title: Metrics calculator
      Description: ''
      CustomTags:
      - MainSourceScope
      - TestSourceScope
      - Utility
      - NotConfigurable
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S9999-symbolRef:
    Metadata:
      Category: ''
      Title: Symbol reference calculator
      Description: ''
      CustomTags:
      - MainSourceScope
      - TestSourceScope
      - Utility
      - NotConfigurable
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S9999-token-type:
    Metadata:
      Category: ''
      Title: Token type calculator
      Description: ''
      CustomTags:
      - MainSourceScope
      - TestSourceScope
      - Utility
      - NotConfigurable
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2612:
    Metadata:
      Category: Major Security Hotspot
      Title: Setting loose file permissions is security-sensitive
      Description: In Unix, "others" class refers to all users except the owner of the file and the members of the group assigned to this file.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2612
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5443:
    Metadata:
      Category: Critical Security Hotspot
      Title: Using publicly writable directories is security-sensitive
      Description: 'Operating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like /tmp in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious user can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed, modified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5443
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S5693:
    Metadata:
      Category: Major Security Hotspot
      Title: Allowing requests with excessive content length is security-sensitive
      Description: Rejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in order to prevents DoS attacks.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5693
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5445:
    Metadata:
      Category: Critical Vulnerability
      Title: Insecure temporary file creation methods should not be used
      Description: Temporary files are considered insecurely created when the file existence check is performed separately from the actual file creation. Such a situation can occur when creating temporary files using normal file handling functions or when using dedicated temporary file handling functions that are not atomic.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5445
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S2115:
    Metadata:
      Category: Blocker Vulnerability
      Title: A secure password should be used when connecting to a database
      Description: When accessing a database, an empty password should be avoided as it introduces a weakness.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2115
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S4502:
    Metadata:
      Category: Critical Security Hotspot
      Title: Disabling CSRF protections is security-sensitive
      Description: A cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive actions that he didn’t intend, such as updating his profile or sending a message, more generally anything that can change the state of the application.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4502
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5122:
    Metadata:
      Category: Minor Security Hotspot
      Title: Having a permissive Cross-Origin Resource Sharing policy is security-sensitive
      Description: 'Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5122
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S9999-log:
    Metadata:
      Category: ''
      Title: Log generator
      Description: ''
      CustomTags:
      - MainSourceScope
      - TestSourceScope
      - Utility
      - NotConfigurable
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S3267:
    Metadata:
      Category: Minor Code Smell
      Title: Loops should be simplified with "LINQ" expressions
      Description: When a loop is filtering, selecting or aggregating, those functions can be handled with a clearer, more concise LINQ expression instead.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3267
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
  S3260:
    Metadata:
      Category: Minor Code Smell
      Title: Non-derived "private" classes and records should be "sealed"
      Description: Classes and records with either private or file access modifiers aren’t visible outside of their assemblies or files, so if they’re not extended inside their scope, they should be made explicitly non-extensible with the addition of the sealed keyword.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3260
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: None
        Redundant: R9A013
  S3059:
    Metadata:
      Category: Major Code Smell
      Title: Types should not have members with visibility set higher than the type's visibility
      Description: There’s no point in having a public member in a non-public type because objects that can’t access the type will never have the chance to access the member.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3059
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S2222:
    Metadata:
      Category: Critical Bug
      Title: Locks should be released on all paths
      Description: To prevent potential deadlocks in an application, it is crucial to release any locks that are acquired within a method along all possible execution paths.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2222
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S6354:
    Metadata:
      Category: Major Code Smell
      Title: Use a testable date/time provider
      Description: One of the principles of a unit test is that it must have full control of the system under test. This is problematic when production code includes calls to static methods, which cannot be changed or controlled. Date/time functions are usually provided by system libraries as static methods.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6354
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Redundant: R9A022
  S6422:
    Metadata:
      Category: Blocker Code Smell
      Title: Calls to "async" methods should not be blocking in Azure Functions
      Description: Making blocking calls to async methods transforms the code into a synchronous operation. Doing so inside an Azure Function can lead to thread pool exhaustion.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6422
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S6421:
    Metadata:
      Category: Major Code Smell
      Title: Azure Functions should use Structured Error Handling
      Description: The top-most level of an Azure Function code should include a try/catch block to capture and log all errors so you can monitor the health of the application effectively. In case a retry policy has been defined for your Azure Function, you should rethrow any errors that should result in a retry.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6421
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S6423:
    Metadata:
      Category: Major Code Smell
      Title: Azure Functions should log all failures
      Description: Capturing and logging errors is critical to monitoring the health of your Azure Functions application.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6423
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S6420:
    Metadata:
      Category: Major Code Smell
      Title: Client instances should not be recreated on each Azure Function invocation
      Description: 'To avoid holding more connections than necessary and to avoid potentially exhausting the number of available sockets when using HttpClient, DocumentClient, QueueClient, ConnectionMultiplexer or Azure Storage clients, consider:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6420
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S6419:
    Metadata:
      Category: Major Code Smell
      Title: Azure Functions should be stateless
      Description: An Azure Function should be stateless as there’s no control over where and when function instances are provisioned and de-provisioned. Managing and storing data/state between requests can lead to inconsistencies. If, for any reason, you need to have a stateful function, consider using the Durable Functions extension of Azure Functions.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6419
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S6424:
    Metadata:
      Category: Blocker Code Smell
      Title: Interfaces for durable entities should satisfy the restrictions
      Description: The recommended way to access Azure Durable Entities is through generated proxy objects with the help of interfaces.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6424
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 2
    Attributes:
      general:
        Severity: Warning
  S6444:
    Metadata:
      Category: Major Security Hotspot
      Title: Not specifying a timeout for regular expressions is security-sensitive
      Description: Not specifying a timeout for regular expressions can lead to a Denial-of-Service attack. Pass a timeout when using System.Text.RegularExpressions to process untrusted input because a malicious user might craft a value for which the evaluation lasts excessively long.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6444
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      production:
        Severity: Warning
  S6562:
    Metadata:
      Category: Major Code Smell
      Title: Always set the "DateTimeKind" when creating new "DateTime" instances
      Description: Not knowing the Kind of the DateTime object that an application is using can lead to misunderstandings when displaying or comparing them. Explicitly setting the Kind property helps the application to stay consistent, and its maintainers understand what kind of date is being managed. To achieve this, when instantiating a new DateTime object you should always use a constructor overload that allows you to define the Kind property.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6562
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: Noise
  S3878:
    Metadata:
      Category: Minor Code Smell
      Title: Arrays should not be created for params parameters
      Description: There’s no point in creating an array solely for the purpose of passing it to a params parameter. Simply pass the elements directly. They will be consolidated into an array automatically.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3878
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Suggestion
  S2970:
    Metadata:
      Category: Blocker Code Smell
      Title: Assertions should be complete
      Description: 'This rule addresses the issue of incomplete assertions that can occur when using certain test frameworks. Incomplete assertions can lead to tests that do not effectively verify anything. The rule enforces the use of complete assertions in specific cases, namely:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2970
      CustomTags:
      - C#
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S6561:
    Metadata:
      Category: Major Code Smell
      Title: Avoid using "DateTime.Now" for benchmarking or timing operations
      Description: The rule targets the use of DateTime.Now call followed by some arithmetic operation.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6561
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2166:
    Metadata:
      Category: Major Code Smell
      Title: Classes named like "Exception" should extend "Exception" or a subclass
      Description: Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code. Using "exception" in the name of a class that does not extend Exception or one of its subclasses is a clear violation of the expectation that a class' name will indicate what it is and/or does.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2166
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S2094:
    Metadata:
      Category: Minor Code Smell
      Title: Classes should not be empty
      Description: There is no good excuse for an empty class. If it’s being used simply as a common extension point, it should be replaced with an interface. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be eliminated.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2094
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S4663:
    Metadata:
      Category: Minor Code Smell
      Title: Comments should not be empty
      Description: Empty comments like the following don’t improve readability and might indicate an oversight.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4663
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 3
    Attributes:
      general:
        Severity: Suggestion
  S3363:
    Metadata:
      Category: Minor Bug
      Title: Date and time should not be used as a type for primary keys
      Description: You should only set a property of a temporal type (like DateTime or DateTimeOffset) as the primary key of a table if the values are guaranteed to be unique.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3363
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S6585:
    Metadata:
      Category: Minor Code Smell
      Title: Don't hardcode the format when turning dates and times to strings
      Description: Hardcoding the date and time format strings can lead to formats that consumers misunderstand. Also, if the same format is meant to be used in multiple places, it is easier to make a mistake when it’s hardcoded instead of using a format provided by an IFormatProvider or using one of the standard format strings.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6585
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S4545:
    Metadata:
      Category: Major Code Smell
      Title: '"DebuggerDisplayAttribute" strings should reference existing members'
      Description: The DebuggerDisplayAttribute is used to determine how an object is displayed in the debugger window.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-4545
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S6563:
    Metadata:
      Category: Major Code Smell
      Title: Use UTC when recording DateTime instants
      Description: You should avoid recording time instants with the use of property DateTime.Now. The property DateTime.Now returns the current date and time expressed in the machine’s local time without containing any timezone-related information (for example, the offset from Coordinated Universal Time). Not having this information means that if you need to display this DateTime object or use it for computations in another machine placed in a different time zone, you won’t be able to reconstruct it in the second machine’s local time without knowing the origin’s offset. This will likely lead to confusion and potential bugs.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6563
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S6513:
    Metadata:
      Category: Minor Code Smell
      Title: '"ExcludeFromCodeCoverage" attributes should include a justification'
      Description: The ExcludeFromCodeCoverageAttribute is used to exclude portions of code from code coverage reporting. It is a bad practice to retain code that is not covered by unit tests. In .Net 5, the Justification property was added to the ExcludeFromCodeCoverageAttribute as an opportunity to document the rationale for the exclusion. This rule raises an issue when no such justification is given.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6513
      CustomTags:
      - C#
      - MainSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Suggestion
  S6602:
    Metadata:
      Category: Minor Code Smell
      Title: '"Find" method should be used instead of the "FirstOrDefault" extension'
      Description: Both the List.Find method and IEnumerable.FirstOrDefault method can be used to find the first element that satisfies a given condition in a collection. However, List.Find can be faster than IEnumerable.FirstOrDefault for List objects. For small collections, the performance difference may be minor, but for large collections, it can make a noticeable difference. The same applies for ImmutableList and arrays too.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6602
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S6640:
    Metadata:
      Category: Major Security Hotspot
      Title: Using unsafe code blocks is security-sensitive
      Description: Using unsafe code blocks can lead to unintended security or stability risks.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6640
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S6605:
    Metadata:
      Category: Minor Code Smell
      Title: Collection-specific "Exists" method should be used instead of the "Any" extension
      Description: Both the List.Exists method and IEnumerable.Any method can be used to find the first element that satisfies a predicate in a collection. However, List.Exists can be faster than IEnumerable.Any for List objects, as well as requires significantly less memory. For small collections, the performance difference may be negligible, but for large collections, it can be noticeable. The same applies to ImmutableList and arrays too.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6605
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S6617:
    Metadata:
      Category: Minor Code Smell
      Title: '"Contains" should be used instead of "Any" for simple equality checks'
      Description: 'When testing if a collection contains a specific item by simple equality, both ICollection.Contains(T item) and IEnumerable.Any(x ⇒ x == item) can be used. However, Any searches the data structure in a linear manner using a foreach loop, whereas Contains is considerably faster in some collection types, because of the underlying implementation. More specifically:'
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6617
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S6613:
    Metadata:
      Category: Minor Code Smell
      Title: '"First" and "Last" properties of "LinkedList" should be used instead of the "First()" and "Last()" extension methods'
      Description: Both the Enumerable.First extension method and the LinkedList<T>.First property can be used to find the first value in a LinkedList<T>. However, LinkedList<T>.First is much faster than Enumerable.First. For small collections, the performance difference may be minor, but for large collections, it can be noticeable. The same applies for the Last property as well.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6613
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S2445:
    Metadata:
      Category: Major Bug
      Title: Blocks should be synchronized on read-only fields
      Description: Locking on a class field synchronizes not on the field itself, but on the object assigned to it. Thus, there are some good practices to follow to avoid problems related to thread synchronization.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2445
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: Noise
  S6507:
    Metadata:
      Category: Major Bug
      Title: Blocks should not be synchronized on local variables
      Description: Locking on a local variable can undermine synchronization because two different threads running the same method in parallel will potentially lock on different instances of the same object, allowing them to access the synchronized block at the same time.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6507
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: Too many false positives
  S1133:
    Metadata:
      Category: Info Code Smell
      Title: Deprecated code should be removed
      Description: This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-1133
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Suggestion
  S3398:
    Metadata:
      Category: Minor Code Smell
      Title: '"private" methods called only by inner classes should be moved to those classes'
      Description: When a private static method is only invoked by a nested class, there’s no reason not to move it into that class. It will still have the same access to the outer class' static members, but the outer class will be clearer and less cluttered.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3398
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S5856:
    Metadata:
      Category: Critical Bug
      Title: Regular expressions should be syntactically valid
      Description: Regular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if they are given a regular expression that does not conform to that syntax.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-5856
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S6609:
    Metadata:
      Category: Minor Code Smell
      Title: '"Min/Max" properties of "Set" types should be used instead of the "Enumerable" extension methods'
      Description: Both the Enumerable.Max extension method and the SortedSet<T>.Max property can be used to find the maximum value in a SortedSet<T>. However, SortedSet<T>.Max is much faster than Enumerable.Max. For small collections, the performance difference may be minor, but for large collections, it can be noticeable. The same applies for the Min property as well.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6609
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S2925:
    Metadata:
      Category: Major Code Smell
      Title: '"Thread.Sleep" should not be used in tests'
      Description: Using Thread.Sleep in a test might introduce unpredictable and inconsistent results depending on the environment. Furthermore, it will block the thread, which means the system resources are not being fully used.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2925
      CustomTags:
      - C#
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
  S2198:
    Metadata:
      Category: Critical Code Smell
      Title: Unnecessary mathematical comparisons should not be made
      Description: Certain mathematical comparisons will always return the same value, and should not be performed.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-2198
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S3063:
    Metadata:
      Category: Major Code Smell
      Title: '"StringBuilder" data should be used'
      Description: StringBuilder instances that never build a string clutter the code and worse are a drag on performance. Either they should be removed, or the missing ToString() call should be added.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-3063
      CustomTags:
      - C#
      - MainSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S6610:
    Metadata:
      Category: Minor Code Smell
      Title: '"StartsWith" and "EndsWith" overloads that take a "char" should be used instead of the ones that take a "string"'
      Description: With string.StartsWith(char) and string.EndsWith(char), only the first character of the string is compared to the provided character, whereas the string versions of those methods have to do checks about the current StringComparison and CultureInfo. Thus, the char overloads are significantly faster for default comparison scenarios.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6610
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S6566:
    Metadata:
      Category: Major Code Smell
      Title: Use "DateTimeOffset" instead of "DateTime"
      Description: This rule recommends using DateTimeOffset instead of DateTime for projects targeting .NET Framework 2.0 or later.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6566
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
        Comment: Noise
  S6575:
    Metadata:
      Category: Major Code Smell
      Title: Use "TimeZoneInfo.FindSystemTimeZoneById" without converting the timezones with "TimezoneConverter"
      Description: Since .NET 6 you don’t have to use the TimeZoneConverter library to manually do the conversion between IANA and Windows timezones. The .NET 6.0 introduced new Time Zone enhancements, one being the TimeZoneInfo.FindSystemTimeZoneById(string timezone) method now accepts as input both IANA and Windows time zone IDs on any operating system with installed time zone data. TimeZoneInfo.FindSystemTimeZoneById will automatically convert its input from IANA to Windows and vice versa if the requested time zone is not found on the system.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6575
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S6580:
    Metadata:
      Category: Major Code Smell
      Title: Use a format provider when parsing date and time
      Description: When converting a string representation of a date and time to a DateTime object or any other temporal type with one of the available system parsing methods, you should always provide an IFormatProvider parameter.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6580
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S6608:
    Metadata:
      Category: Minor Code Smell
      Title: Prefer indexing instead of "Enumerable" methods on types implementing "IList"
      Description: Indexes in C# provide direct access to an element at a specific position within an array or collection. When compared to Enumerable methods, indexing can be more efficient for certain scenarios, such as iterating over a large collection, due to avoiding the overhead of checking the underlying collection type before accessing it.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6608
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S6612:
    Metadata:
      Category: Minor Code Smell
      Title: The lambda parameter should be used instead of capturing arguments in "ConcurrentDictionary" methods
      Description: When using the ConcurrentDictionary, there are many overloads of the GetOrAdd and AddOrUpdate methods that take both a TKey argument and a lambda that expects a TKey parameter. This means that the right side of the lambda can be written using either the lambda’s parameter or the method’s argument. However, using the method’s argument leads to the lambda capturing it, and the compiler will need to generate a class and instantiate it before the call. This means memory allocations, as well as more time spend during Garbage Collection.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6612
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S6618:
    Metadata:
      Category: Minor Code Smell
      Title: '"string.Create" should be used instead of "FormattableString"'
      Description: In order to produce a formatted string, both string.Create and either FormattableString.Invariant or FormattableString.CurrentCulture can be used. However, string.Create rents array buffers from ArrayPool<char> making it more performant, as well as preventing unnecessary allocations and future stress on the Garbage Collector.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6618
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S6603:
    Metadata:
      Category: Minor Code Smell
      Title: The collection-specific "TrueForAll" method should be used instead of the "All" extension
      Description: Both the List.TrueForAll method and the IEnumerable.All method can be used to check if all list elements satisfy a given condition in a collection. However, List.TrueForAll can be faster than IEnumerable.All for List objects. The performance difference may be minor for small collections, but for large collections, it can be noticeable.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6603
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S6588:
    Metadata:
      Category: Minor Code Smell
      Title: Use the "UnixEpoch" field instead of creating "DateTime" instances that point to the beginning of the Unix epoch
      Description: With .NET Core the UnixEpoch field was introduced to DateTime and DateTimeOffset types. Using this field clearly states that the intention is to use the beginning of the Unix epoch.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6588
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
  S6607:
    Metadata:
      Category: Minor Code Smell
      Title: The collection should be filtered before sorting by using "Where" before "OrderBy"
      Description: When working with LINQ in C#, it is recommended to pay attention to the order in which methods are chained, especially when using Where and OrderBy methods. It is advised to call the Where method before OrderBy because Where filters the elements of the sequence based on a given condition and returns a new sequence containing only the elements that satisfy that condition. Calling OrderBy before Where, may end up sorting elements that will be later discarded, which can lead to inefficiency. Conversely, calling Where before OrderBy, will first filter the sequence to include only the elements of interest, and then sort them based on the specified order.
      HelpLinkUri: https://rules.sonarsource.com/csharp/RSPEC-6607
      CustomTags:
      - C#
      - MainSourceScope
      - TestSourceScope
      - SonarWay
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: None
      performance:
        Severity: Warning
  S9999-warning:
    Metadata:
      Category: ''
      Title: Analysis Warning generator
      Description: ''
      CustomTags:
      - MainSourceScope
      - TestSourceScope
      - Utility
      - NotConfigurable
      DefaultSeverity: Warning
    Tier: 1
    Attributes:
      general:
        Severity: Warning
