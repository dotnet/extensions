<Project>

  <!-- Produce errors if we don't have all the right properties defined -->
  <Target Name="_CheckPropsExist" Condition="'$(IsPackable)' == 'true' and '$(Stage)' != '' and $(Stage) != 'transport'" BeforeTargets="Build">
    <Error Condition="'$(Stage)' != 'dev' AND '$(Stage)' != 'normal' AND '$(Stage)' != 'obsolete' AND '$(Stage)' != 'preview'" Text="Stage property must be dev|normal|obsolete|preview" />
    <Error Condition="'$(Description)' == ''" Text="Missing Description property." />
    <Error Condition="'$(Workstream)' == ''" Text="Missing Workstream property." />
    <Error Condition="'$(MinCodeCoverage)' == ''" Text="Missing MinCodeCoverage property." />
    <Error Condition="'$(MinMutationScore)' == ''" Text="Missing MinMutationScore property." />
    <Error Condition="'$(Stage)' == 'dev' AND '$(StageDevDiagnosticId)' == ''" Text="Experimental packages must define 'StageDevDiagnosticId'." />
  </Target>

  <!-- Produce errors if we don't have all the right property values for normal stage -->
  <Target Name="_CheckNormalStageProps" Condition="'$(Stage)' == 'normal'" BeforeTargets="Build">
    <Error Condition="'$(MinCodeCoverage)' != 'n/a' AND ('$(MinCodeCoverage)' &lt; 75)" Text="MinCodeCoverage property must be >= 75 for normal stage." />
    <Error Condition="'$(MinMutationScore)' != 'n/a' AND ('$(MinMutationScore)' &lt; 50)" Text="MinMutationScore property must be >= 50 for normal stage." />
  </Target>

  <!--
   Produce errors if we don't have all the right property values for non-production stages.

   Note, that Arcade resets $(_PreReleaseLabel) to "ci" for non-official builds, which breaks the validation.
   See Arcade SDK/Version.BeforeCommonTargets.targets for more details.
    -->
  <Target Name="_ValidateVersion" AfterTargets="GenerateNuspec" Condition=" '$(OfficialBuild)' == 'true' and '$(_IsStable)' != 'true' ">
    <PropertyGroup>
      <_ExpectedVersionSuffix>$(_PreReleaseLabel)$(_BuildNumberLabels)</_ExpectedVersionSuffix>
    </PropertyGroup>

    <Error Condition=" '$(VersionSuffix)' != '$(_ExpectedVersionSuffix)' " Text="Unexpected package version suffix. Expected suffix for '$(Stage)' stage: '$(_ExpectedVersionSuffix)', received: '$(VersionSuffix)'." />
  </Target>
</Project>
