<Project>

  <!-- Pack analyzers -->
  <PropertyGroup>
    <BeforePack>IncludeAnalyzersInPackage;$(BeforePack)</BeforePack>
    <BuildAnalyzerReferences>$(BuildProjectReferences)</BuildAnalyzerReferences>
    <BuildAnalyzerReferences Condition="'$(BuildingInsideVisualStudio)' == 'true'">false</BuildAnalyzerReferences>
  </PropertyGroup>

  <!-- packaging control -->
  <PropertyGroup>
    <IsPackable Condition="'$(Stage)' == ''">false</IsPackable>
    <BeforePack>$(BeforePack);_VerifyMinimumSupportedTfmForPackagingIsUsed;_AddNETStandardCompatErrorFileForPackaging</BeforePack>
  </PropertyGroup>

  <!-- Include a compat warning for users trying to use our packages on unsupported TFMs -->
  <ItemGroup>
    <NETStandardCompatError Include="$(ConditionalNet462)"
                            Supported="$(MinimumSupportedTfmForPackaging)"
                            Condition="'$(MinimumSupportedTfmForPackaging)' != '' and
                                       '$(ConditionalNet462)' != '' and
                                       ($(TargetFrameworks.Contains('$(MinimumSupportedTfmForPackaging)')) and $(TargetFrameworks.Contains('$(ConditionalNet462)')))" />
    <NETStandardCompatError Include="netcoreapp3.1"
                            Supported="$(MinimumSupportedTfmForPackaging)"
                            Condition="'$(MinimumSupportedTfmForPackaging)' != '' and
                                       ($(TargetFrameworks.Contains('$(MinimumSupportedTfmForPackaging)')) and $(TargetFrameworks.Contains('netcoreapp3.1')))" />
  </ItemGroup>

  <!-- Verify that the minimum supported TFM is actually used. -->
  <Target Name="_VerifyMinimumSupportedTfmForPackagingIsUsed"
          Condition="'$(IsPackable)' == 'true' and '$(DisableNETStandardCompatErrors)' != 'true'">
    <Error Text="$TargetFrameworks ('$(TargetFrameworks)') does not contain $MinimumSupportedTfmForPackaging ('$(MinimumSupportedTfmForPackaging)')."
           Condition="!$(TargetFrameworks.Contains('$(MinimumSupportedTfmForPackaging)'))" />
  </Target>

  <!-- Add targets file that marks selected TFMs as unsupported. -->
  <Target Name="_AddNETStandardCompatErrorFileForPackaging"
          Condition="'@(NETStandardCompatError)' != '' and '$(DisableNETStandardCompatErrors)' != 'true'"
          Inputs="%(NETStandardCompatError.Identity)"
          Outputs="unused">
    <PropertyGroup>
      <_NETStandardCompatErrorFilePath>$(BaseIntermediateOutputPath)netstandardcompaterror_%(NETStandardCompatError.Identity).targets</_NETStandardCompatErrorFilePath>
      <_NETStandardCompatErrorFileTarget>NETStandardCompatError_$(PackageId.Replace('.', '_'))_$([System.String]::new('%(NETStandardCompatError.Supported)').Replace('.', '_'))</_NETStandardCompatErrorFileTarget>
      <_NETStandardCompatErrorFileContent>
<![CDATA[<Project InitialTargets="$(_NETStandardCompatErrorFileTarget)">
  <Target Name="$(_NETStandardCompatErrorFileTarget)"
          Condition="'%24(SuppressTfmSupportBuildWarnings)' == ''">
    <Warning Text="$(PackageId) $(PackageVersion) doesn't support %24(TargetFramework) and has not been tested with it. Consider upgrading your TargetFramework to %(NETStandardCompatError.Supported) or later. You may also set &lt%3BSuppressTfmSupportBuildWarnings&gt%3Btrue&lt%3B/SuppressTfmSupportBuildWarnings&gt%3B in the project file to ignore this warning and attempt to run in this unsupported configuration at your own risk." />
  </Target>
</Project>]]>
      </_NETStandardCompatErrorFileContent>
      <_NETStandardCompatErrorPlaceholderFilePackagePath>buildTransitive$([System.IO.Path]::DirectorySeparatorChar)%(NETStandardCompatError.Supported)</_NETStandardCompatErrorPlaceholderFilePackagePath>
      <PlaceholderFile>$(RepositoryEngineeringDir)_._</PlaceholderFile>
    </PropertyGroup>

    <WriteLinesToFile File="$(_NETStandardCompatErrorFilePath)"
                      Lines="$(_NETStandardCompatErrorFileContent)"
                      Overwrite="true"
                      WriteOnlyWhenDifferent="true" />

    <ItemGroup>
      <_PackageBuildFile Include="@(None->Metadata('PackagePath'));
                                  @(Content->Metadata('PackagePath'))" />
      <_PackageBuildFile PackagePathWithoutFilename="$([System.IO.Path]::GetDirectoryName('%(Identity)'))" />

      <None Include="$(_NETStandardCompatErrorFilePath)"
            PackagePath="buildTransitive\%(NETStandardCompatError.Identity)\$(PackageId).targets"
            Pack="true" />

      <!-- Add the placeholder file to the supported target framework buildTransitive folder, if it's empty.
           Because this target uses Item batching, it will run more than once so adding the placeholder to None which would cause a warning.
           In order to workaround it, we know this item will contain duplicates, so we will use Distinct() and add it in a target that runs
           right after this. -->
      <NoneWithDuplicates Include="$(PlaceholderFile)"
            PackagePath="$(_NETStandardCompatErrorPlaceholderFilePackagePath)\"
            Pack="true"
            Condition="'@(_PackageBuildFile)' == '' or
                       !@(_PackageBuildFile->AnyHaveMetadataValue('PackagePathWithoutFilename', '$(_NETStandardCompatErrorPlaceholderFilePackagePath)'))" />
    </ItemGroup>
  </Target>
  
  <!-- Add the de-duped placeholder file to the package. -->
  <Target Name="_AddPlaceholderFileToNone"
          AfterTargets="_AddNETStandardCompatErrorFileForPackaging">
    <ItemGroup>
      <None Include="@(NoneWithDuplicates->Distinct())" />
    </ItemGroup>
  </Target>

</Project>
