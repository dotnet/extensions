@using System.Runtime.CompilerServices
@using System.Text.RegularExpressions
@using System.Linq

@if (Message.Role == ChatRole.User)
{
    <div class="user-message">
        @Message.Text
    </div>
}
else if (Message.Role == ChatRole.Assistant)
{
    foreach (var content in Message.Contents)
    {
        <ChatAssistantContentItem Content="@content">
            <TextContentFooter>
                @foreach (var citation in citations ?? [])
                {
                    <ChatCitation File="@citation.File" PageNumber="@citation.Page" Quote="@citation.Quote" />
                }
            </TextContentFooter>
        </ChatAssistantContentItem>
    }
}

@code {
    private static readonly Regex CitationRegex = new(@"<citation filename='(?<file>[^']*)' page_number='(?<page>\d*)'>(?<quote>.*?)</citation>", RegexOptions.NonBacktracking);

    private List<(string File, int? Page, string Quote)>? citations;

    [Parameter, EditorRequired]
    public required ChatMessage Message { get; set; }

    protected override void OnInitialized()
    {
        if (Message.Role == ChatRole.Assistant && Message.Text is { Length: > 0 } text)
        {
            ParseCitations(text);
        }
    }

    private void ParseCitations(string text)
    {
        var matches = CitationRegex.Matches(text);
        citations = matches.Any()
            ? matches.Select(m => (m.Groups["file"].Value, int.TryParse(m.Groups["page"].Value, out var page) ? page : (int?)null, m.Groups["quote"].Value)).ToList()
            : null;
    }
}
