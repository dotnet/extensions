#
# This file creates an environment similar to the one that the template tests use.
# This makes it convenient to restore, build, and run projects generated by the template tests
# to debug test failures.
#
# This file must be used by invoking ". .\activate.ps1" from the command line.
# You cannot run it directly. See https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_scripts#script-scope-and-dot-sourcing
#
# To exit from the environment this creates, execute the 'deactivate' function.
#

[CmdletBinding(PositionalBinding=$false)]
Param(
  [string][Alias('c')]$configuration = "Debug"
)

if ($MyInvocation.CommandOrigin -eq 'runspace') {
    $cwd = (Get-Location).Path
    $scriptPath = $MyInvocation.MyCommand.Path
    $relativePath = [System.IO.Path]::GetRelativePath($cwd, $scriptPath)
    Write-Host -f Red "This script cannot be invoked directly."
    Write-Host -f Red "To function correctly, this script file must be 'dot sourced' by calling `". .\$relativePath`" (notice the dot at the beginning)."
    exit 1
}

function deactivate ([switch]$init) {
    # reset old environment variables
    if (Test-Path variable:_OLD_PATH) {
        $env:PATH = $_OLD_PATH
        Remove-Item variable:_OLD_PATH
    }

    if (test-path function:_old_prompt) {
        Set-Item Function:prompt -Value $function:_old_prompt -ea ignore
        remove-item function:_old_prompt
    }

    Remove-Item env:DOTNET_ROOT -ea Ignore
    Remove-Item 'env:DOTNET_ROOT(x86)' -ea Ignore
    Remove-Item env:DOTNET_MULTILEVEL_LOOKUP -ea Ignore
    Remove-Item env:NUGET_PACKAGES -ea Ignore
    Remove-Item env:LOCAL_SHIPPING_PATH -ea Ignore
    if (-not $init) {
        # Remove functions defined
        Remove-Item function:deactivate
        Remove-Item function:Get-RepoRoot
    }
}

# Cleanup the environment
deactivate -init

function Get-RepoRoot {
    $directory = $PSScriptRoot

    while ($directory) {
        $gitPath = Join-Path $directory ".git"

        if (Test-Path $gitPath) {
            return $directory
        }

        $parent = Split-Path $directory -Parent
        if ($parent -eq $directory) {
            # We've reached the filesystem root
            break  
        }

        $directory = $parent
    }

    throw "Failed to establish root of the repository"
}

# Find the root of the repository
$repoRoot = Get-RepoRoot

$_OLD_PATH = $env:PATH
# Tell dotnet where to find itself
$env:DOTNET_ROOT = "$repoRoot\.dotnet"
${env:DOTNET_ROOT(x86)} = "$repoRoot\.dotnet\x86"
# Tell dotnet not to look beyond the DOTNET_ROOT folder for more dotnet things
$env:DOTNET_MULTILEVEL_LOOKUP = 0
# Put dotnet first on PATH
$env:PATH = "${env:DOTNET_ROOT};${env:PATH}"
# Set NUGET_PACKAGES and LOCAL_SHIPPING_PATH
$env:NUGET_PACKAGES = "$PSScriptRoot\output\packages"
$env:LOCAL_SHIPPING_PATH = "$repoRoot\artifacts\packages\$configuration\Shipping\"

# Set the shell prompt
$function:_old_prompt = $function:prompt
function dotnet_prompt {
    # Add a prefix to the current prompt, but don't discard it.
    write-host "($( split-path $PSScriptRoot -leaf )) " -nonewline
    & $function:_old_prompt
}

Set-Item Function:prompt -Value $function:dotnet_prompt -ea ignore

Write-Host -f Magenta "Enabled the template testing environment. Execute 'deactivate' to exit."
Write-Host -f Magenta "Using the '$configuration' configuration. Use the -c option to specify a different configuration."
if (-not (Test-Path "${env:DOTNET_ROOT}\dotnet.exe")) {
    Write-Host -f Yellow ".NET Core has not been installed yet. Run $repoRoot\build.cmd -restore to install it."
}
else {
    Write-Host "dotnet = ${env:DOTNET_ROOT}\dotnet.exe"
}
Write-Host "NUGET_PACKAGES = ${env:NUGET_PACKAGES}"
Write-Host "LOCAL_SHIPPING_PATH = ${env:LOCAL_SHIPPING_PATH}"
