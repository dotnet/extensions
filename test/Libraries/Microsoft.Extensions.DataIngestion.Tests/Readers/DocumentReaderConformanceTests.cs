// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.TestUtilities;
using Xunit;

namespace Microsoft.Extensions.DataIngestion.Readers.Tests;

public abstract class DocumentReaderConformanceTests
{
    protected abstract IngestionDocumentReader CreateDocumentReader(bool extractImages = false);

    [ConditionalFact]
    public async Task ThrowsWhenIdentifierIsNotProvided()
    {
        var reader = CreateDocumentReader();

        var nullEx = await Assert.ThrowsAsync<ArgumentNullException>(async () => await reader.ReadAsync(new FileInfo("fileName.txt"), identifier: null!));
        Assert.Equal("identifier", nullEx.ParamName);
        var argEx = await Assert.ThrowsAsync<ArgumentException>(async () => await reader.ReadAsync(new FileInfo("fileName.txt"), identifier: string.Empty));
        Assert.Equal("identifier", argEx.ParamName);

        using MemoryStream stream = new();
        nullEx = await Assert.ThrowsAsync<ArgumentNullException>(async () => await reader.ReadAsync(stream, identifier: null!, mediaType: "some"));
        Assert.Equal("identifier", nullEx.ParamName);
        argEx = await Assert.ThrowsAsync<ArgumentException>(async () => await reader.ReadAsync(stream, identifier: string.Empty, mediaType: "some"));
        Assert.Equal("identifier", argEx.ParamName);
    }

    [ConditionalFact]
    public async Task ThrowsIfCancellationRequestedStream()
    {
        var reader = CreateDocumentReader();
        using CancellationTokenSource cts = new();
        cts.Cancel();

        using MemoryStream stream = new();
        await Assert.ThrowsAsync<TaskCanceledException>(async () => await reader.ReadAsync(stream, "id", "mediaType", cts.Token));
    }

    [ConditionalFact]
    public async Task ThrowsIfCancellationRequestedFile()
    {
        string filePath = Path.Combine(Path.GetTempPath(), Path.GetTempFileName() + ".txt");
#if NET
        await File.WriteAllTextAsync(filePath, "This is a test file for cancellation token.");
#else
        File.WriteAllText(filePath, "This is a test file for cancellation token.");
#endif

        var reader = CreateDocumentReader();
        using CancellationTokenSource cts = new();
        cts.Cancel();

        try
        {
            await Assert.ThrowsAsync<TaskCanceledException>(async () => await reader.ReadAsync(new FileInfo(filePath), cts.Token));
        }
        finally
        {
            File.Delete(filePath);
        }
    }

    public static IEnumerable<object[]> Links
    {
        get
        {
            // These are quite complex documents with multiple elements of all kinds.
            yield return new object[] { "https://winprotocoldocs-bhdugrdyduf5h2e4.b02.azurefd.net/MS-NRBF/%5bMS-NRBF%5d-190313.pdf" }; // PDF file
            yield return new object[] { "https://winprotocoldocs-bhdugrdyduf5h2e4.b02.azurefd.net/MS-NRBF/%5bMS-NRBF%5d-190313.docx" }; // DOCX file
            yield return new object[] { "https://www.bondcap.com/report/pdf/Trends_Artificial_Intelligence.pdf" }; // PDF file (presentation)
        }
    }

    [ConditionalTheory]
    [MemberData(nameof(Links))]
    public virtual async Task SupportsStreams(string uri)
    {
        using HttpClient httpClient = new();
        using HttpResponseMessage response = await httpClient.GetAsync(new Uri(uri));
        response.EnsureSuccessStatusCode();

        var reader = CreateDocumentReader();
        var document = await reader.ReadAsync(
            await response.Content.ReadAsStreamAsync(),
            uri, mediaType: response.Content.Headers.ContentType?.MediaType!);

        SimpleAsserts(document, uri, uri);
    }

    public static IEnumerable<object[]> Files
    {
        get
        {
            // One page document with a table, header, and footer and few paragraph.
            // Generated by Copilot from Microsoft Word.
            yield return new object[] { Path.Combine("TestFiles", "Sample.pdf") };
            yield return new object[] { Path.Combine("TestFiles", "Sample.docx") };
        }
    }

    [ConditionalTheory]
    [MemberData(nameof(Files))]
    public virtual async Task SupportsFiles(string filePath)
    {
        FileInfo source = new(filePath);
        var reader = CreateDocumentReader();
        var document = await reader.ReadAsync(source);

        SimpleAsserts(document, filePath, expectedId: source.FullName);
    }

    public static IEnumerable<object[]> Images
    {
        get
        {
            // One page document with an Image generated by Microsoft Copilot.
            yield return new object[] { Path.Combine("TestFiles", "SampleWithImage.pdf") };
        }
    }

    [ConditionalTheory]
    [MemberData(nameof(Images))]
    public virtual async Task SupportsImages(string filePath)
    {
        FileInfo source = new(filePath);
        var reader = CreateDocumentReader(extractImages: true);
        var document = await reader.ReadAsync(source);

        SimpleAsserts(document, filePath, expectedId: source.FullName);
        var elements = document.EnumerateContent().ToArray();
        Assert.Contains(elements, element => element is IngestionDocumentImage img && img.Content.HasValue && !string.IsNullOrEmpty(img.MediaType));
    }

    [ConditionalFact]
    public virtual Task SupportsTables() => SupportsTablesCore(Path.Combine("TestFiles", "Sample.docx"));

    protected async Task SupportsTablesCore(string filePath)
    {
        var reader = CreateDocumentReader();
        var document = await reader.ReadAsync(new FileInfo(filePath));

        IngestionDocumentTable documentTable = Assert.Single(document.EnumerateContent().OfType<IngestionDocumentTable>());
        Assert.Equal(5, documentTable.Cells.GetLength(0));
        Assert.Equal(4, documentTable.Cells.GetLength(1));

        string[,] expected =
        {
            { "Milestone", "Target Date", "Department", "Indicator" },
            { "Environmental Audit", "Mar 2025", "Environmental", "Audit Complete" },
            { "Renewable Energy Launch", "Jul 2025", "Facilities", "Install Operational" },
            { "Staff Workshop", "Sep 2025", "HR", "Workshop Held" },
            { "Emissions Review", "Dec 2029", "All", "25% Emissions Cut" }
        };

        Assert.Equal(expected, documentTable.Cells.Map(NormalizeCell));
    }

    [ConditionalFact]
    public virtual Task SupportsTablesWithImages()
        => SupportsTablesWithImagesCore(Path.Combine("TestFiles", "TableWithImage.docx"));

    protected async Task<IngestionDocumentTable> SupportsTablesWithImagesCore(string filePath)
    {
        var reader = CreateDocumentReader(extractImages: true);
        var document = await reader.ReadAsync(new FileInfo(filePath));

        var table = Assert.Single(document.EnumerateContent().OfType<IngestionDocumentTable>());
        Assert.Equal(5, table.Cells.GetLength(0));
        Assert.Equal(2, table.Cells.GetLength(1));

        // Each reader properly recognizes the text from the first column.
        // When it comes to the images, MarkItDown extracts them as images, while
        // other readers return nothing or ORCed text.
        Assert.Equal("Years", NormalizeCell(table.Cells[0, 0]));
        Assert.Equal("2020-2025", NormalizeCell(table.Cells[1, 0]));
        Assert.Equal("2015-2020", NormalizeCell(table.Cells[2, 0]));
        Assert.Equal("2010-2015", NormalizeCell(table.Cells[3, 0]));
        Assert.Equal("2000-2010", NormalizeCell(table.Cells[4, 0]));

        return table;
    }

    protected virtual void SimpleAsserts(IngestionDocument document, string source, string expectedId)
    {
        Assert.NotNull(document);
        Assert.Equal(expectedId, document.Identifier);
        Assert.NotEmpty(document.Sections);

        var elements = document.EnumerateContent().ToArray();
        Assert.Contains(elements, element => element is IngestionDocumentHeader);
        Assert.Contains(elements, element => element is IngestionDocumentParagraph);
        Assert.Contains(elements, element => element is IngestionDocumentTable);
        Assert.All(elements.Where(element => element is not IngestionDocumentImage), element => Assert.NotEmpty(element.GetMarkdown()));
    }

    private static string? NormalizeCell(IngestionDocumentElement? ingestionDocumentElement)
    {
        Assert.NotNull(ingestionDocumentElement);

        // Some readers add extra spaces or asterisks for bold/italic text for headers.
        return ingestionDocumentElement.GetMarkdown().Trim().Trim('*');
    }
}
