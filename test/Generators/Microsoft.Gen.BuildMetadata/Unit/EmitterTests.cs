// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System;
using System.Threading;
using Microsoft.Gen.Shared;
using Xunit;

namespace Microsoft.Gen.BuildMetadata.Test;

[Collection("BuildMetadataEmitterTests")]
public class EmitterTests
{
    [Fact]
    public void GivenCancellation_ShouldThrowException()
    {
        Assert.Throws<OperationCanceledException>(() =>
            _ = new Emitter().Emit(new CancellationToken(true)));
    }

    [Fact]
    public void GivenAzureDevOpsValues_ShouldOutputThem()
    {
        Model.BuildDateTime = DateTimeOffset.UtcNow;
        var buildId = "buildId";
        var buildNumber = "buildNumber";
        var sourceBranchName = "sourceBranchName";
        var sourceVersion = "sourceVersion";

        var expected = $$"""

// <auto-generated/>
#nullable enable
#pragma warning disable CS1591 // Compensate for https://github.com/dotnet/roslyn/issues/54103
namespace Microsoft.Extensions.AmbientMetadata
{
    [{{GeneratorUtilities.GeneratedCodeAttribute}}]
    internal static class BuildMetadataInitializer
    {
        public static BuildMetadata WithEnvironmentVariables()
        {
            return new BuildMetadata
            {
                BuildId = "{{buildId}}",
                BuildNumber = "{{buildNumber}}",
                SourceBranchName = "{{sourceBranchName}}",
                SourceVersion = "{{sourceVersion}}",
                BuildDateTime = "{{Model.BuildDateTime:s}}",
            };
        }
    }
}

""";

        var emitter = new Emitter();
        Model.IsAzureDevOps = true;
        Model.AzureBuildId = buildId;
        Model.AzureBuildNumber = buildNumber;
        Model.AzureSourceBranchName = sourceBranchName;
        Model.AzureSourceVersion = sourceVersion;
        var actual = emitter.Emit(CancellationToken.None);

        Assert.Equal(expected, actual);
    }

    [Fact]
    public void GivenGitHubActionsValues_ShouldOutputThem()
    {
        Model.BuildDateTime = DateTimeOffset.UtcNow;
        var buildId = "buildId";
        var buildNumber = "buildNumber";
        var sourceBranchName = "sourceBranchName";
        var sourceVersion = "sourceVersion";

        var expected = $$"""

// <auto-generated/>
#nullable enable
#pragma warning disable CS1591 // Compensate for https://github.com/dotnet/roslyn/issues/54103
namespace Microsoft.Extensions.AmbientMetadata
{
    [{{GeneratorUtilities.GeneratedCodeAttribute}}]
    internal static class BuildMetadataInitializer
    {
        public static BuildMetadata WithEnvironmentVariables()
        {
            return new BuildMetadata
            {
                BuildId = "{{buildId}}",
                BuildNumber = "{{buildNumber}}",
                SourceBranchName = "{{sourceBranchName}}",
                SourceVersion = "{{sourceVersion}}",
                BuildDateTime = "{{Model.BuildDateTime:s}}",
            };
        }
    }
}

""";

        var emitter = new Emitter();
        Model.IsAzureDevOps = false;
        Model.GitHubRunId = buildId;
        Model.GitHubRunNumber = buildNumber;
        Model.GitHubRefName = sourceBranchName;
        Model.GitHubSha = sourceVersion;
        var actual = emitter.Emit(CancellationToken.None);

        Assert.Equal(expected, actual);
    }

    [Fact]
    public void GivenDateIsNotProvided_ShouldOutputIt()
    {
        Model.BuildDateTime = null;
        var model = new Emitter().Emit(CancellationToken.None);

        Assert.Contains("BuildDateTime = \"\"", model);
    }
}
