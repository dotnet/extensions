[  
// <auto-generated/>
#nullable enable
#pragma warning disable CS1591 // Compensate for https://github.com/dotnet/roslyn/issues/54103
namespace Microsoft.Extensions.AmbientMetadata
{
    using System;
    using System.ComponentModel;
    using System.Diagnostics.CodeAnalysis;
    using Microsoft.Extensions.Configuration;
    using Microsoft.Extensions.Configuration.Memory;
    using Microsoft.Extensions.DependencyInjection;
    using Microsoft.Extensions.Hosting;

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.BuildMetadata", "VERSION")]
    internal static class BuildMetadataGeneratedExtensions
    {
        private const string DefaultSectionName = "ambientmetadata:build";

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Gen.BuildMetadata", "VERSION")]
        [EditorBrowsable(EditorBrowsableState.Never)]
        private sealed class BuildMetadataSource : IConfigurationSource
        {
            public string SectionName { get; }

            public BuildMetadataSource(string sectionName)
            {
#if NETFRAMEWORK
                if (string.IsNullOrWhiteSpace(sectionName))
                {
                    if (sectionName is null)
                    {
                        throw new ArgumentNullException(nameof(sectionName));
                    }

                    throw new ArgumentException("The value cannot be an empty string or composed entirely of whitespace.", nameof(sectionName));
                }
#else
                ArgumentException.ThrowIfNullOrWhiteSpace(sectionName);
#endif

                SectionName = sectionName;
            }

            public IConfigurationProvider Build(IConfigurationBuilder builder)
            {
                return new MemoryConfigurationProvider(new MemoryConfigurationSource())
                {
                    { $"{SectionName}:buildid", "TEST_BUILDID" },
                    { $"{SectionName}:buildnumber", "TEST_BUILDNUMBER" },
                    { $"{SectionName}:sourcebranchname", "TEST_SOURCEBRANCHNAME" },
                    { $"{SectionName}:sourceversion", "TEST_SOURCEVERSION" },
                };
            }
        }

        public static IHostBuilder UseBuildMetadata(this IHostBuilder builder, string sectionName = DefaultSectionName)
        {
#if NETFRAMEWORK
            if (builder is null)
            {
                throw new ArgumentNullException(nameof(builder));
            }

            if (string.IsNullOrWhiteSpace(sectionName))
            {
                if (sectionName is null)
                {
                    throw new ArgumentNullException(nameof(sectionName));
                }

                throw new ArgumentException("The value cannot be an empty string or composed entirely of whitespace.", nameof(sectionName));
            }
#else
            ArgumentNullException.ThrowIfNull(builder);
            ArgumentException.ThrowIfNullOrWhiteSpace(sectionName);
#endif

            _ = builder.ConfigureHostConfiguration(configBuilder => configBuilder.AddBuildMetadata(sectionName))
                .ConfigureServices((hostBuilderContext, serviceCollection) =>
                    serviceCollection.AddBuildMetadata(hostBuilderContext.Configuration.GetSection(sectionName)));

            return builder;
        }

        public static TBuilder UseBuildMetadata<TBuilder>(this TBuilder builder, string sectionName = DefaultSectionName)
            where TBuilder : IHostApplicationBuilder
        {
#if NETFRAMEWORK
            if (builder is null)
            {
                throw new ArgumentNullException(nameof(builder));
            }

            if (string.IsNullOrWhiteSpace(sectionName))
            {
                if (sectionName is null)
                {
                    throw new ArgumentNullException(nameof(sectionName));
                }

                throw new ArgumentException("The value cannot be an empty string or composed entirely of whitespace.", nameof(sectionName));
            }
#else
            ArgumentNullException.ThrowIfNull(builder);
            ArgumentException.ThrowIfNullOrWhiteSpace(sectionName);
#endif

            _ = builder.Configuration.AddBuildMetadata(sectionName);
            _ = builder.Services.AddBuildMetadata(builder.Configuration.GetSection(sectionName));

            return builder;
        }

        public static IConfigurationBuilder AddBuildMetadata(this IConfigurationBuilder builder, string sectionName = DefaultSectionName)
        {
#if NETFRAMEWORK
            if (builder is null)
            {
                throw new ArgumentNullException(nameof(builder));
            }

            if (string.IsNullOrWhiteSpace(sectionName))
            {
                if (sectionName is null)
                {
                    throw new ArgumentNullException(nameof(sectionName));
                }

                throw new ArgumentException("The value cannot be an empty string or composed entirely of whitespace.", nameof(sectionName));
            }
#else
            ArgumentNullException.ThrowIfNull(builder);
            ArgumentException.ThrowIfNullOrWhiteSpace(sectionName);
#endif

            return builder.Add(new BuildMetadataSource(sectionName));
        }
    }
}

]
