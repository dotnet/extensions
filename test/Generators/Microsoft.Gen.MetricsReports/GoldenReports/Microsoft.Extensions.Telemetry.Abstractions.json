{
  "Name": "Microsoft.Extensions.Telemetry.Abstractions, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35",
  "Types": [
    {
      "Type": "readonly struct Microsoft.Extensions.Diagnostics.Latency.Checkpoint : System.IEquatable<Microsoft.Extensions.Diagnostics.Latency.Checkpoint>",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Checkpoint(string name, long elapsed, long frequency);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Checkpoint();",
          "Stage": "Stable"
        },
        {
          "Member": "override bool Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Equals(object? obj);",
          "Stage": "Stable"
        },
        {
          "Member": "bool Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Equals(Microsoft.Extensions.Diagnostics.Latency.Checkpoint other);",
          "Stage": "Stable"
        },
        {
          "Member": "override int Microsoft.Extensions.Diagnostics.Latency.Checkpoint.GetHashCode();",
          "Stage": "Stable"
        },
        {
          "Member": "static bool Microsoft.Extensions.Diagnostics.Latency.Checkpoint.operator ==(Microsoft.Extensions.Diagnostics.Latency.Checkpoint left, Microsoft.Extensions.Diagnostics.Latency.Checkpoint right);",
          "Stage": "Stable"
        },
        {
          "Member": "static bool Microsoft.Extensions.Diagnostics.Latency.Checkpoint.operator !=(Microsoft.Extensions.Diagnostics.Latency.Checkpoint left, Microsoft.Extensions.Diagnostics.Latency.Checkpoint right);",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "long Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Elapsed { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "long Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Frequency { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "string Microsoft.Extensions.Diagnostics.Latency.Checkpoint.Name { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Diagnostics.Latency.CheckpointToken",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.CheckpointToken.CheckpointToken(string name, int position);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.CheckpointToken.CheckpointToken();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Diagnostics.Latency.CheckpointToken.Name { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "int Microsoft.Extensions.Diagnostics.Latency.CheckpointToken.Position { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Telemetry.Metering.CounterAttribute : System.Attribute",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.CounterAttribute.CounterAttribute(params string[] dimensions);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.CounterAttribute.CounterAttribute(System.Type type);",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string[]? Microsoft.Extensions.Telemetry.Metering.CounterAttribute.Dimensions { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "string? Microsoft.Extensions.Telemetry.Metering.CounterAttribute.Name { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Type? Microsoft.Extensions.Telemetry.Metering.CounterAttribute.Type { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Telemetry.Metering.CounterAttribute<T> : System.Attribute where T : struct",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.CounterAttribute<T>.CounterAttribute(params string[] dimensions);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.CounterAttribute<T>.CounterAttribute(System.Type type);",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string[]? Microsoft.Extensions.Telemetry.Metering.CounterAttribute<T>.Dimensions { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "string? Microsoft.Extensions.Telemetry.Metering.CounterAttribute<T>.Name { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Type? Microsoft.Extensions.Telemetry.Metering.CounterAttribute<T>.Type { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Telemetry.Metering.DimensionAttribute : System.Attribute",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.DimensionAttribute.DimensionAttribute(string name);",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Telemetry.Metering.DimensionAttribute.Name { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Telemetry.Enrichment.EnricherExtensions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Telemetry.Enrichment.EnricherExtensions.AddLogEnricher<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Telemetry.Enrichment.EnricherExtensions.AddLogEnricher(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Telemetry.Enrichment.ILogEnricher enricher);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Telemetry.Enrichment.EnricherExtensions.AddMetricEnricher<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Telemetry.Enrichment.EnricherExtensions.AddMetricEnricher(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Telemetry.Enrichment.IMetricEnricher enricher);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Telemetry.Metering.GaugeAttribute : System.Attribute",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.GaugeAttribute.GaugeAttribute(params string[] dimensions);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.GaugeAttribute.GaugeAttribute(System.Type type);",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string[]? Microsoft.Extensions.Telemetry.Metering.GaugeAttribute.Dimensions { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "string? Microsoft.Extensions.Telemetry.Metering.GaugeAttribute.Name { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Type? Microsoft.Extensions.Telemetry.Metering.GaugeAttribute.Type { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Telemetry.Metering.HistogramAttribute : System.Attribute",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.HistogramAttribute.HistogramAttribute(params string[] dimensions);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.HistogramAttribute.HistogramAttribute(System.Type type);",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string[]? Microsoft.Extensions.Telemetry.Metering.HistogramAttribute.Dimensions { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "string? Microsoft.Extensions.Telemetry.Metering.HistogramAttribute.Name { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Type? Microsoft.Extensions.Telemetry.Metering.HistogramAttribute.Type { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Telemetry.Metering.HistogramAttribute<T> : System.Attribute where T : struct",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.HistogramAttribute<T>.HistogramAttribute(params string[] dimensions);",
          "Stage": "Experimental"
        },
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.HistogramAttribute<T>.HistogramAttribute(System.Type type);",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "string[]? Microsoft.Extensions.Telemetry.Metering.HistogramAttribute<T>.Dimensions { get; }",
          "Stage": "Experimental"
        },
        {
          "Member": "string? Microsoft.Extensions.Telemetry.Metering.HistogramAttribute<T>.Name { get; set; }",
          "Stage": "Experimental"
        },
        {
          "Member": "System.Type? Microsoft.Extensions.Telemetry.Metering.HistogramAttribute<T>.Type { get; }",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "enum Microsoft.Extensions.Http.Telemetry.HttpRouteParameterRedactionMode",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Http.Telemetry.HttpRouteParameterRedactionMode.HttpRouteParameterRedactionMode();",
          "Stage": "Stable"
        }
      ],
      "Fields": [
        {
          "Member": "const Microsoft.Extensions.Http.Telemetry.HttpRouteParameterRedactionMode Microsoft.Extensions.Http.Telemetry.HttpRouteParameterRedactionMode.Loose",
          "Stage": "Stable",
          "Value": "1"
        },
        {
          "Member": "const Microsoft.Extensions.Http.Telemetry.HttpRouteParameterRedactionMode Microsoft.Extensions.Http.Telemetry.HttpRouteParameterRedactionMode.None",
          "Stage": "Stable",
          "Value": "2"
        },
        {
          "Member": "const Microsoft.Extensions.Http.Telemetry.HttpRouteParameterRedactionMode Microsoft.Extensions.Http.Telemetry.HttpRouteParameterRedactionMode.Strict",
          "Stage": "Stable",
          "Value": "0"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Http.Telemetry.IDownstreamDependencyMetadata",
      "Stage": "Stable",
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Http.Telemetry.IDownstreamDependencyMetadata.DependencyName { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Collections.Generic.ISet<Microsoft.Extensions.Http.Telemetry.RequestMetadata> Microsoft.Extensions.Http.Telemetry.IDownstreamDependencyMetadata.RequestMetadata { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Collections.Generic.ISet<string> Microsoft.Extensions.Http.Telemetry.IDownstreamDependencyMetadata.UniqueHostNameSuffixes { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(string key, object value);",
          "Stage": "Stable"
        },
        {
          "Member": "void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(string key, string value);",
          "Stage": "Stable"
        },
        {
          "Member": "void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(System.ReadOnlySpan<System.Collections.Generic.KeyValuePair<string, object>> properties);",
          "Stage": "Stable"
        },
        {
          "Member": "void Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag.Add(System.ReadOnlySpan<System.Collections.Generic.KeyValuePair<string, string>> properties);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Diagnostics.Latency.ILatencyContext : System.IDisposable",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "void Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.AddCheckpoint(Microsoft.Extensions.Diagnostics.Latency.CheckpointToken token);",
          "Stage": "Stable"
        },
        {
          "Member": "void Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.AddMeasure(Microsoft.Extensions.Diagnostics.Latency.MeasureToken token, long value);",
          "Stage": "Stable"
        },
        {
          "Member": "void Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.Freeze();",
          "Stage": "Stable"
        },
        {
          "Member": "void Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.RecordMeasure(Microsoft.Extensions.Diagnostics.Latency.MeasureToken token, long value);",
          "Stage": "Stable"
        },
        {
          "Member": "void Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.SetTag(Microsoft.Extensions.Diagnostics.Latency.TagToken token, string value);",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.LatencyData Microsoft.Extensions.Diagnostics.Latency.ILatencyContext.LatencyData { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Diagnostics.Latency.ILatencyContextProvider",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.ILatencyContext Microsoft.Extensions.Diagnostics.Latency.ILatencyContextProvider.CreateContext();",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Diagnostics.Latency.ILatencyContextTokenIssuer",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.CheckpointToken Microsoft.Extensions.Diagnostics.Latency.ILatencyContextTokenIssuer.GetCheckpointToken(string name);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.MeasureToken Microsoft.Extensions.Diagnostics.Latency.ILatencyContextTokenIssuer.GetMeasureToken(string name);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.TagToken Microsoft.Extensions.Diagnostics.Latency.ILatencyContextTokenIssuer.GetTagToken(string name);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Diagnostics.Latency.ILatencyDataExporter",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "System.Threading.Tasks.Task Microsoft.Extensions.Diagnostics.Latency.ILatencyDataExporter.ExportAsync(Microsoft.Extensions.Diagnostics.Latency.LatencyData data, System.Threading.CancellationToken cancellationToken);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Telemetry.Enrichment.ILogEnricher",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "void Microsoft.Extensions.Telemetry.Enrichment.ILogEnricher.Enrich(Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag bag);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Logging.ITagCollector",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "void Microsoft.Extensions.Logging.ITagCollector.Add(string propertyName, object? propertyValue);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Telemetry.Enrichment.IMetricEnricher",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "void Microsoft.Extensions.Telemetry.Enrichment.IMetricEnricher.Enrich(Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag bag);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Http.Telemetry.IOutgoingRequestContext",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "void Microsoft.Extensions.Http.Telemetry.IOutgoingRequestContext.SetRequestMetadata(Microsoft.Extensions.Http.Telemetry.RequestMetadata metadata);",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "Microsoft.Extensions.Http.Telemetry.RequestMetadata? Microsoft.Extensions.Http.Telemetry.IOutgoingRequestContext.RequestMetadata { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "interface Microsoft.Extensions.Telemetry.Enrichment.ITraceEnricher",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "void Microsoft.Extensions.Telemetry.Enrichment.ITraceEnricher.Enrich(System.Diagnostics.Activity activity);",
          "Stage": "Stable"
        },
        {
          "Member": "void Microsoft.Extensions.Telemetry.Enrichment.ITraceEnricher.EnrichOnActivityStart(System.Diagnostics.Activity activity);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Diagnostics.Latency.LatencyContextRegistrationOptions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.LatencyContextRegistrationOptions.LatencyContextRegistrationOptions();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.Collections.Generic.IReadOnlyList<string> Microsoft.Extensions.Diagnostics.Latency.LatencyContextRegistrationOptions.CheckpointNames { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Collections.Generic.IReadOnlyList<string> Microsoft.Extensions.Diagnostics.Latency.LatencyContextRegistrationOptions.MeasureNames { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Collections.Generic.IReadOnlyList<string> Microsoft.Extensions.Diagnostics.Latency.LatencyContextRegistrationOptions.TagNames { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Diagnostics.Latency.LatencyData",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.LatencyData.LatencyData(System.ArraySegment<Microsoft.Extensions.Diagnostics.Latency.Tag> tags, System.ArraySegment<Microsoft.Extensions.Diagnostics.Latency.Checkpoint> checkpoints, System.ArraySegment<Microsoft.Extensions.Diagnostics.Latency.Measure> measures, long durationTimestamp, long durationTimestampFrequency);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.LatencyData.LatencyData();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "System.ReadOnlySpan<Microsoft.Extensions.Diagnostics.Latency.Checkpoint> Microsoft.Extensions.Diagnostics.Latency.LatencyData.Checkpoints { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "long Microsoft.Extensions.Diagnostics.Latency.LatencyData.DurationTimestamp { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "long Microsoft.Extensions.Diagnostics.Latency.LatencyData.DurationTimestampFrequency { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.ReadOnlySpan<Microsoft.Extensions.Diagnostics.Latency.Measure> Microsoft.Extensions.Diagnostics.Latency.LatencyData.Measures { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.ReadOnlySpan<Microsoft.Extensions.Diagnostics.Latency.Tag> Microsoft.Extensions.Diagnostics.Latency.LatencyData.Tags { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Diagnostics.Latency.LatencyRegistryExtensions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Diagnostics.Latency.LatencyRegistryExtensions.RegisterCheckpointNames(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, params string[] names);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Diagnostics.Latency.LatencyRegistryExtensions.RegisterMeasureNames(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, params string[] names);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Diagnostics.Latency.LatencyRegistryExtensions.RegisterTagNames(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, params string[] names);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Logging.LoggerMessageAttribute : System.Attribute",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Logging.LoggerMessageAttribute.LoggerMessageAttribute(int eventId, Microsoft.Extensions.Logging.LogLevel level, string message);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Logging.LoggerMessageAttribute.LoggerMessageAttribute(int eventId, Microsoft.Extensions.Logging.LogLevel level);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Logging.LoggerMessageAttribute.LoggerMessageAttribute(Microsoft.Extensions.Logging.LogLevel level, string message);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Logging.LoggerMessageAttribute.LoggerMessageAttribute(Microsoft.Extensions.Logging.LogLevel level);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Logging.LoggerMessageAttribute.LoggerMessageAttribute(string message);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Logging.LoggerMessageAttribute.LoggerMessageAttribute(int eventId, string message);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Logging.LoggerMessageAttribute.LoggerMessageAttribute(int eventId);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Logging.LoggerMessageAttribute.LoggerMessageAttribute();",
          "Stage": "Experimental"
        }
      ],
      "Properties": [
        {
          "Member": "int Microsoft.Extensions.Logging.LoggerMessageAttribute.EventId { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "string? Microsoft.Extensions.Logging.LoggerMessageAttribute.EventName { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Logging.LogLevel? Microsoft.Extensions.Logging.LoggerMessageAttribute.Level { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "string Microsoft.Extensions.Logging.LoggerMessageAttribute.Message { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "bool Microsoft.Extensions.Logging.LoggerMessageAttribute.SkipEnabledCheck { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Logging.LogMethodHelper : System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<string, object?>>, Microsoft.Extensions.Logging.ITagCollector, Microsoft.Extensions.Telemetry.Enrichment.IEnrichmentPropertyBag, Microsoft.Extensions.ObjectPool.IResettable",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Logging.LogMethodHelper.LogMethodHelper();",
          "Stage": "Stable"
        },
        {
          "Member": "void Microsoft.Extensions.Logging.LogMethodHelper.Add(string propertyName, object? propertyValue);",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Logging.LogMethodHelper Microsoft.Extensions.Logging.LogMethodHelper.GetHelper();",
          "Stage": "Stable"
        },
        {
          "Member": "static void Microsoft.Extensions.Logging.LogMethodHelper.ReturnHelper(Microsoft.Extensions.Logging.LogMethodHelper helper);",
          "Stage": "Stable"
        },
        {
          "Member": "static string Microsoft.Extensions.Logging.LogMethodHelper.Stringify(System.Collections.IEnumerable? enumerable);",
          "Stage": "Stable"
        },
        {
          "Member": "static string Microsoft.Extensions.Logging.LogMethodHelper.Stringify<TKey, TValue>(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>? enumerable);",
          "Stage": "Stable"
        },
        {
          "Member": "bool Microsoft.Extensions.Logging.LogMethodHelper.TryReset();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Logging.LogMethodHelper.ParameterName { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "static Microsoft.Extensions.Logging.LogDefineOptions Microsoft.Extensions.Logging.LogMethodHelper.SkipEnabledCheckOptions { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Logging.LogPropertiesAttribute : System.Attribute",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Logging.LogPropertiesAttribute.LogPropertiesAttribute();",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Logging.LogPropertiesAttribute.LogPropertiesAttribute(System.Type providerType, string providerMethod);",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "bool Microsoft.Extensions.Logging.LogPropertiesAttribute.OmitParameterName { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "string? Microsoft.Extensions.Logging.LogPropertiesAttribute.ProviderMethod { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "System.Type? Microsoft.Extensions.Logging.LogPropertiesAttribute.ProviderType { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "bool Microsoft.Extensions.Logging.LogPropertiesAttribute.SkipNullProperties { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "sealed class Microsoft.Extensions.Logging.LogPropertyIgnoreAttribute : System.Attribute",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Logging.LogPropertyIgnoreAttribute.LogPropertyIgnoreAttribute();",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Diagnostics.Latency.Measure : System.IEquatable<Microsoft.Extensions.Diagnostics.Latency.Measure>",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.Measure.Measure(string name, long value);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.Measure.Measure();",
          "Stage": "Stable"
        },
        {
          "Member": "override bool Microsoft.Extensions.Diagnostics.Latency.Measure.Equals(object? obj);",
          "Stage": "Stable"
        },
        {
          "Member": "bool Microsoft.Extensions.Diagnostics.Latency.Measure.Equals(Microsoft.Extensions.Diagnostics.Latency.Measure other);",
          "Stage": "Stable"
        },
        {
          "Member": "override int Microsoft.Extensions.Diagnostics.Latency.Measure.GetHashCode();",
          "Stage": "Stable"
        },
        {
          "Member": "static bool Microsoft.Extensions.Diagnostics.Latency.Measure.operator ==(Microsoft.Extensions.Diagnostics.Latency.Measure left, Microsoft.Extensions.Diagnostics.Latency.Measure right);",
          "Stage": "Stable"
        },
        {
          "Member": "static bool Microsoft.Extensions.Diagnostics.Latency.Measure.operator !=(Microsoft.Extensions.Diagnostics.Latency.Measure left, Microsoft.Extensions.Diagnostics.Latency.Measure right);",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Diagnostics.Latency.Measure.Name { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "long Microsoft.Extensions.Diagnostics.Latency.Measure.Value { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Diagnostics.Latency.MeasureToken",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.MeasureToken.MeasureToken(string name, int position);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.MeasureToken.MeasureToken();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Diagnostics.Latency.MeasureToken.Name { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "int Microsoft.Extensions.Diagnostics.Latency.MeasureToken.Position { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Telemetry.Metering.Meter<TMeterName> : System.Diagnostics.Metrics.Meter",
      "Stage": "Experimental",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Telemetry.Metering.Meter<TMeterName>.Meter();",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Telemetry.Metering.MeteringExtensions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Telemetry.Metering.MeteringExtensions.RegisterMetering(this Microsoft.Extensions.DependencyInjection.IServiceCollection services);",
          "Stage": "Experimental"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Diagnostics.Latency.NullLatencyContextExtensions",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "static Microsoft.Extensions.DependencyInjection.IServiceCollection Microsoft.Extensions.Diagnostics.Latency.NullLatencyContextExtensions.AddNullLatencyContext(this Microsoft.Extensions.DependencyInjection.IServiceCollection services);",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "class Microsoft.Extensions.Http.Telemetry.RequestMetadata",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Http.Telemetry.RequestMetadata.RequestMetadata();",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Http.Telemetry.RequestMetadata.RequestMetadata(string methodType, string requestRoute, string requestName = \"unknown\");",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Http.Telemetry.RequestMetadata.DependencyName { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "string Microsoft.Extensions.Http.Telemetry.RequestMetadata.MethodType { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "string Microsoft.Extensions.Http.Telemetry.RequestMetadata.RequestName { get; set; }",
          "Stage": "Stable"
        },
        {
          "Member": "string Microsoft.Extensions.Http.Telemetry.RequestMetadata.RequestRoute { get; set; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Diagnostics.Latency.Tag",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.Tag.Tag(string name, string value);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.Tag.Tag();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Diagnostics.Latency.Tag.Name { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "string Microsoft.Extensions.Diagnostics.Latency.Tag.Value { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "readonly struct Microsoft.Extensions.Diagnostics.Latency.TagToken",
      "Stage": "Stable",
      "Methods": [
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.TagToken.TagToken(string name, int position);",
          "Stage": "Stable"
        },
        {
          "Member": "Microsoft.Extensions.Diagnostics.Latency.TagToken.TagToken();",
          "Stage": "Stable"
        }
      ],
      "Properties": [
        {
          "Member": "string Microsoft.Extensions.Diagnostics.Latency.TagToken.Name { get; }",
          "Stage": "Stable"
        },
        {
          "Member": "int Microsoft.Extensions.Diagnostics.Latency.TagToken.Position { get; }",
          "Stage": "Stable"
        }
      ]
    },
    {
      "Type": "static class Microsoft.Extensions.Http.Telemetry.TelemetryConstants",
      "Stage": "Stable",
      "Fields": [
        {
          "Member": "const string Microsoft.Extensions.Http.Telemetry.TelemetryConstants.ClientApplicationNameHeader",
          "Stage": "Experimental",
          "Value": "X-ClientApplication"
        },
        {
          "Member": "const string Microsoft.Extensions.Http.Telemetry.TelemetryConstants.Redacted",
          "Stage": "Stable",
          "Value": "REDACTED"
        },
        {
          "Member": "const string Microsoft.Extensions.Http.Telemetry.TelemetryConstants.RequestMetadataKey",
          "Stage": "Stable",
          "Value": "R9-RequestMetadata"
        },
        {
          "Member": "const string Microsoft.Extensions.Http.Telemetry.TelemetryConstants.ServerApplicationNameHeader",
          "Stage": "Experimental",
          "Value": "X-ServerApplication"
        },
        {
          "Member": "const string Microsoft.Extensions.Http.Telemetry.TelemetryConstants.Unknown",
          "Stage": "Stable",
          "Value": "unknown"
        }
      ]
    }
  ]
}